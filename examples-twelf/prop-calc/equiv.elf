%%% A most naive version of translation from natural deductions
%%% into a proof in the Hilbert-style system and vice versa.
%%% Expresses the equivalence of the two systems.
%%% Author: Frank Pfenning

% abs implements bracket abstraction which amounts to
% the computational content of the deduction theorem.

abs : (|- A -> |- B) -> |- (imp A B) -> type.

% aID	  : abs ([x] x) (mp (mp s k) k).
aONE	  : abs (\x. one) (mp k one).
aPAIR	  : abs (\x. pair) (mp k pair).
aLEFT	  : abs (\x. left) (mp k left).
aRIGHT	  : abs (\x. right) (mp k right).
aK	  : abs (\x. k) (mp k k).
aS	  : abs (\x. s) (mp k s).
aMP	  : abs (\x. mp (P x) (Q x)) (mp (mp s P') Q')
	      <- abs P P' <- abs Q Q'.

%mode abs +D -F.
% %covers abs +D -F.

% comb does the translation from natural deduction to Hilbert deductions,
% appealing to the deduction theorem in case of implies-introduction
% which requires hypothetical reasoning.

comb : ! A -> |- A -> type.
%mode comb +D -F.

ctrue     : comb trueI one.
candI     : comb (andI P Q) (mp (mp pair P') Q') <- comb P P' <- comb Q Q'.
candEL    : comb (andEL P)  (mp left P')	 <- comb P P'.
candER    : comb (andER P)  (mp right P')	 <- comb P P'.
cimpliesI : comb (impliesI PP) Q
            <- ({x:! _ }{y: |- _ } comb x y
%	                -> ({B:o} abs (\z. y) (mp k y))
	                -> (abs (\z. y) (mp k y))
		        -> comb (PP x) (PP' y))
	    <- abs PP' Q.
cimpliesE : comb (impliesE P Q) (mp P' Q')
	    <- comb P P'
	    <- comb Q Q'.

%{
%block l : some {A:o} block {x:! A}{y: |- A} {u: comb x y}
	                {v: {B:o} abs ([z:|- B] y) (mp k y)}.
%worlds (l) (abs D F).
%worlds (l) (comb _ _ ).
}%

% Now the translation from Hilbert deduction into natural deductions.
% This simply gives the definition of the (proof) combinators as lambda-terms.

combdefn : |- A -> ! A -> type.
%mode  combdefn +D -F.

cdK     : combdefn k (impliesI (\p. impliesI (\q. p))).
cdS	: combdefn s (impliesI (\p. impliesI (\q. impliesI (\r.
		         (impliesE (impliesE p r) (impliesE q r)))))).
cdONE   : combdefn one trueI.
cdPAIR  : combdefn pair (impliesI (\p. impliesI (\q. andI p q))).
cdLEFT  : combdefn left (impliesI (\p. andEL p)).
cdRIGHT : combdefn right (impliesI (\p. andER p)).
cdMP    : combdefn (mp P Q) (impliesE P' Q')
	     <- combdefn P P'
	     <- combdefn Q Q'.


%%% Decidability proof for theorem  HD -> ND
%terminates D (combdefn D _).
