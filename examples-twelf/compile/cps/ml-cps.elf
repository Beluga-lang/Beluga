%%% Compilation to Continuation-Passing Style
%%% Author: Frank Pfenning

cmp : exp -> (cval -> cexp) -> cexp -> type.

cmp_z : cmp z (\v. K  v) (K z+).
cmp_s : cmp (s E) (\v. K v) E'
	 <- cmp E (\x. K (s+ x)) E'.

% note duplication of K
cmp_match : cmp (match E1 E2 (\x.E3 x)) (\v. K v)  E'
	    <- cmp E2 (\v. K v) E2'
	    <- ({x:exp} {x':cval}
		  ({k':cval -> cexp} cmp x (\v. k' v) (k' x'))
		  -> cmp (E3 x) (\v. K v) (E3' x'))
	    <- cmp E1 (\x1. match+ x1 E2' (\x. E3' x)) E'.

cmp_pair : cmp (pair E1 E2) (\v. K v) E'
	    <- ({x1':cval} cmp E2 (\x2'. K (pair+ x1' x2')) (E2' x1'))
	    <- cmp E1 (\v. E2' v) E'.

cmp_fst : cmp (fst E) (\v. K v) E'
	   <- cmp E (\x. fst+ x (\v. K v)) E'.

cmp_snd : cmp (snd E) (\v. K v) E'
	   <- cmp E (\x. snd+ x (\v. K v)) E'.

cmp_lam : 
%	   cmp (lam (\x. E x)) (\v. K v) (K (lam+ (\v. (\k. E' v  k))))
	   cmp (lam (\x. E x)) (\v. K v) (K (lam+ E'))
	   <- ({x:exp} {x':cval}
		 ({k':cval -> cexp} cmp x (\v. k' v) (k' x'))
		 -> {k:cval -> cexp}
		    cmp (E x) (\v. k v) (E' x' (\v. k v))).

cmp_app : cmp (app E1 E2) (\v. K v) E'
	   <- ({x1:cval} cmp E2 (\x2. app+ x1 x2 (\v. K v)) (E2' x1))
	   <- cmp E1 (\x1. E2' x1) E'.

cmp_letv : cmp (letv E1 (\x. E2 x)) (\v. K v) E'
	    <- ({x:exp} {x':cval}
		  ({k':cval -> cexp} cmp x (\v. k' v) (k' x'))
		  -> cmp (E2 x) (\v. K v) (E2' x'))
	    <- cmp E1 (\x. E2' x) E'.
