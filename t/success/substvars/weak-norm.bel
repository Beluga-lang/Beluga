% Sketch of weak normalization for STLC that goes under binders
% Author: Andrew Cave

tp : type.                %name tp T.
i :  tp.
arr: tp -> tp -> tp.

tm : tp -> type.          %name tm E.
app : tm (arr T S) -> tm T -> tm S.
lam : (tm T -> tm S) -> tm (arr T S).

schema ctx = tm T;

mstep : tm A -> tm A -> type.
beta : mstep (app (lam M) N) (M N).
eta : {M:tm (arr A B)} mstep M (lam (\x. app M x)).
steplam : ({x:tm A} mstep (M x) (M' x)) -> mstep (lam M) (lam M').
stepapp : mstep M M' -> mstep N N' -> mstep (app M N) (app M' N').
refl : mstep M M.
trans : mstep M M' -> mstep M' M'' -> mstep M M''.

datatype IsWeakeningOf : {g:ctx} [g. tm A] -> {h:ctx} [h. tm A] -> ctype =
| Zero : IsWeakeningOf [g] [g. M ..] [g] [g. M ..]
| Succ : {h:ctx} {M:[g.tm B]} IsWeakeningOf [g] [g. M ..] [h] [h. N ..] -> IsWeakeningOf [g] [g. M ..] [h,x:tm A] [h,x:tm A. N ..]
;

% This could be defined at the LF layer, but then it would require a bigger schema, and I don't want to deal with that
% TODO: Hmm, couldn't we use a block x:tm A , neut x schema all the way through? lam even adds the assumption that neut x?
datatype IsNormal : {g:ctx} {A:[.tp]} {M:[g.tm A]} ctype =
| Neut : IsNeutral [g] [. i] [g. M ..] -> IsNormal [g] [.i] [g. M ..]
| Lam : IsNormal [g,x:tm A] [.B] [g,x:tm A. M .. x] -> IsNormal [g] [.arr A B] [g. lam (\x. M .. x)]
and IsNeutral : {g:ctx} {A:[.tp]} {M:[g.tm A]} ctype =
| Var : {#p:[g.tm A]} IsNeutral [g] [.A] [g. #p ..]
| App : IsNeutral [g] [.arr A B] [g. M ..] -> IsNormal [g] [.A] [g. N ..] -> IsNeutral [g] [.B] [g. app (M ..) (N ..)]
;

datatype Halts : {g:ctx} {A:[.tp]} {M:[g.tm A]} ctype =
| Halts : [g. mstep (M ..) (V ..)] -> IsNormal [g] [.A] [g. V ..] ->
          Halts [g] [.A] [g. M ..]
;

datatype Reduce : {g:ctx} {A:[.tp]} {M:[g.tm A]} ctype =
| Base : Halts [g] [.i] [g. M ..] -> Reduce [g] [. i] [g. M ..]
| Arr : ({h:ctx} {F:[h. tm (arr A B)]} {N:[h. tm A]} IsWeakeningOf [g] [g. M ..] [h] [h. F ..] -> Reduce [h] [.A] [h. N ..] -> Reduce [h] [.B] [h. app (F ..) (N ..)])
           -> Reduce [g] [. arr A B] [g. M ..]
;

datatype IsApp : {g:ctx}{M:[g.tm (arr A B)]}{N:[g.tm A]}{h:ctx}{R:[h. tm B]} ctype =
| IsApp : {M':[h.tm (arr A B)]} IsWeakeningOf [g] [g. M ..] [h] [h. M' ..] -> IsWeakeningOf [g] [g. N ..] [h] [h. N' ..]
          -> IsApp [g] [g. M ..] [g. N ..] [h] [h. app (M' ..) (N' ..)]
;

datatype IsVar : {g:ctx}{M:[g.tm A]} ctype =
| IsVar : {#p:[g.tm A]} IsVar [g] [g. #p ..]
;

rec weakenInvApp : IsWeakeningOf [g] [g. app (M ..) (N ..)] [h] [h. R ..] -> IsApp [g] [g. M ..] [g. N ..] [h] [h. R ..] =
fn w => let (w : IsWeakeningOf [g] [g. app (M ..) (N ..)] [h] [h. R ..]) = w in case w of
| Zero => IsApp [h. _] Zero Zero
| Succ [h] [h. Q ..] w' => let IsApp [h. Q1 ..] w1 w2 = weakenInvApp w' in IsApp [h,x:tm _. _] (Succ [h] [h._] w1) (Succ [h] [h._] w2)
;

rec weakenInvVar :  IsWeakeningOf [g] [g. #p ..] [h] [h. R ..] -> IsVar [h] [h. R ..] =
fn w => let (w : IsWeakeningOf [g] [g. #p ..] [h] [h. R ..]) = w in case w of
| Zero => IsVar [g. #p ..]
| Succ [h] [h. Q ..] w' => let IsVar [h. #q ..] = weakenInvVar w' in IsVar [h,x:tm _. #q ..]
;

rec wkn : IsNeutral [g] [.A] [g. R ..] -> IsWeakeningOf [g] [g. R ..] [h] [h. R' ..] -> IsNeutral [h] [.A] [h. R' ..] =
fn r => fn e => let (e : IsWeakeningOf [g] [g. R ..] [h] [h. R' ..]) = e in case r of
| Var [g. #p ..] => let IsVar [h. #q ..] = weakenInvVar e in Var [h. #q ..]
| App r n => let IsApp [h. M1 ..] w1 w2 = weakenInvApp e in App (wkn r w1) (nwkn n w2)
and nwkn : IsNormal [g] [.A] [g. N ..] -> IsWeakeningOf [g] [g. N ..] [h] [h. N' ..] -> IsNormal [h] [.A] [h. N' ..] =
fn n => fn e => case n of
| Neut r => Neut (wkn r e)
| Lam n => ? % Guessing I might have to make a generalization of IsWeakeningOf which lets vars be inserted anywhere
;

rec mstepTrans : (g:ctx){M:[g.tm A]} [g. mstep (M ..) (M' ..)] -> [g. mstep (M' ..) (M'' ..)] -> [g. mstep (M ..) (M'' ..)] =
mlam M => fn s => fn s' => let [g. S ..] = s in let [g. S' ..] = s' in [g. trans (S ..) (S' ..)]
;

rec mstepAppR : (g:ctx){M:[g.tm (arr A B)]} [g. mstep (N1 ..) (N2 ..)] -> [g. mstep (app (M ..) (N1 ..)) (app (M ..) (N2 ..))] =
mlam M => fn s => let [g. S ..] = s in [g. stepapp refl (S ..)]
;

rec mstepAppL : (g:ctx){M1:[g.tm (arr A B)]} [g. mstep (M1 ..) (M2 ..)] -> [g. mstep (app (M1 ..) (N ..)) (app (M2 ..) (N ..))] =
mlam M => fn s => let [g. S ..] = s in [g. stepapp (S ..) refl]
;

datatype Exists : {g:ctx}{M:[g.tm A]}{M':[g.tm A]}{h:ctx}{N:[h.tm A]} ctype =
| ExIntro : {N':[h.tm A]} [h. mstep (N ..) (N' ..)] -> IsWeakeningOf [g] [g. M' ..] [h] [h. N' ..] -> Exists [g] [g. M ..] [g. M' ..] [h] [h. N ..]
;

rec diamond : IsWeakeningOf [g] [g. M ..] [h] [h. N ..] -> [g. mstep (M ..) (M' ..)] -> Exists [g] [g. M ..] [g. M' ..] [h] [h. N ..] =
fn w => fn s => let (w : IsWeakeningOf [g] [g. M ..] [h] [h. N ..]) = w in case w of
| Zero => ExIntro [h. _] s Zero
| Succ [h] [g. M ..] w' =>
 let ExIntro [h. N' ..] [h. S ..] w'' = diamond w' s in
 ExIntro [h,x:tm _. N' ..] [h,x:tm _. S ..] (Succ [h] [g. _] w'')
;

rec closed :  Reduce [g] [.A] [g. M' ..] -> [g. mstep (M ..) (M' ..)] -> Reduce [g] [.A] [g. M ..] =
fn r => fn s => let (r : Reduce [g] [.A] [g. M' ..]) = r in case r of
| Base (Halts s' v) => Base (Halts (mstepTrans [g. _] s s') v)
| Arr f => Arr (mlam h' => mlam F' => mlam N' => fn n => fn rn =>
                let ExIntro [h'. P ..] q1 q2 = diamond n s in
                closed (f [h'] [h'. P ..] [h'. N' ..] q2 rn) (mstepAppL [h'. _] q1))
;

rec reflect : IsNeutral [g] [.A] [g. R ..] -> Reduce [g] [.A] [g. R ..] =
fn r => let r : IsNeutral [g] [.A] [g. R ..] = r in case [.A] of
| [.i] => Base (Halts [g. refl] (Neut r))
| [.arr A B] => Arr (reflectHelper r)

and reflectHelper : IsNeutral [g] [. arr A B] [g. M ..] -> ({h:ctx} {F:[h. tm (arr A B)]} {N:[h. tm A]} IsWeakeningOf [g] [g. M ..] [h] [h. F ..] -> Reduce [h] [.A] [h. N ..] -> Reduce [h] [.B] [h. app (F ..) (N ..)]) =
fn r => mlam h => mlam F => mlam N => fn e => fn red =>
let Halts q1 n = reify red in
closed (reflect (App (wkn r e) n)) (mstepAppR [h. _] q1)

and reify : Reduce [g] [.A] [g. M ..] -> Halts [g] [.A] [g. M ..] =
fn r => let r : Reduce [g] [.A] [g. M ..] = r in case r of
| Base h => h
| Arr f =>
  let Halts [g,x:tm _. S .. x] q2 = reify (f [g,x:tm _] [g,x:tm _. M ..] [g,x:tm _. x] (Succ [g] [g. M ..] Zero) (reflect (Var [g,x:tm _. x]))) in
  Halts [g. trans (eta _) (steplam (\x. S .. x))] (Lam q2)
;

%{
Sketch of the main theorem using substitution variables

% Every term in the substitution #S is reducible
datatype AllReduce : {g:ctx}{h:ctx}{#S:[h. g]} ctype =
| Nil : AllReduce [] [h] [h. ]
| Cons : AllReduce [g] [h] [h. #S ..] -> Reduce [h] [.A] [h. M ..] -> AllReduce [g,x:tm A] [h] [h. (#S ..) (M ..)]
;

rec eval : {M:[g.tm A]}{#S:[h. g]} -> AllReduce [g] [h] [h. #S ..] -> Reduce [h] [.A] [h. M (#S ..)] =
mlam M => fn rs => let (rs : AllReduce [g] [h] [h. #S ..]) = rs in case [g. M ..] of
| [g,x:tm T. x] => let Cons rs' r = rs in r
| [g,x:tm T. #p ..] => let Cons rs' r = rs in eval [g. #p ..] rs'
| [g. app (M1 ..) (M2 ..)] => eval [g. M1 ..] rs [h] [h. M1 (#S ..)] [h. M2 (#S ..)] Zero (eval [g. M2 ..] rs)
| [g. lam (\x. M1 .. x)] => % This case is definitely wrong, but roughly the idea...
   mlam h' => mlam F => mlam N => fn wkn-f-m => fn rn => eval [g,x:tm _. M1 .. x] (Cons (all-wkn wkn-f-m rs) rn)
;

rec weak-normalization-closed : {M:[. tm A]} -> Halts [] [.A] [. M] =
mlam M => reify (eval [. M] [.] Nil)
}%

rec eval : {g:ctx}{h:ctx}{M:[g.tm A]}{#S:g[h]} Reduce [h] [.A] [h. M #S[..] ] =
mlam g => mlam h => mlam M => mlam #S => case [g. M ..] of
%| [g,x:tm T. x] => let Cons rs' r = rs in r
%| [g,x:tm T. #p ..] => let Cons rs' r = rs in eval [g. #p ..] rs'
| [g. app (M1 ..) (M2 ..)] => let Arr f = eval [g] [h] [g. M1 ..] [h $ #S[..] ] in
                              f [h] [h. M1 #S[..] ] [h. M2 #S[..]] Zero (eval [g] [h] [g. M2 ..] [h $ #S[..] ])
%| [g. lam (\x. M1 .. x)] => % This case is definitely wrong, but roughly the idea...
%   mlam h' => mlam F => mlam N => fn wkn-f-m => fn rn => eval [g,x:tm _. M1 .. x] (Cons (all-wkn wkn-f-m rs) rn)
;


%{ An attempt without substitution vars, which fails:
This won't work for representing instantiations, since we need U to be in h, not closed.
I don't see how we can build up simultaneous substitutions inductively out of single substitutions...
datatype IsInstantiation : {g:ctx}{M:[g.tm A]}{N:[.tm A]} ctype =
| Nil : IsInstantiation [] [. M] [. M]
| Cons : {M:[g,x:tm T. tm A]} {U:[. tm T]} Reduce [] [.T] [. U] -> IsInstantiation [g] [g. M .. U] [. R]
  -> IsInstantiation [g,x:tm T] [g,x:tm T. M .. x] [. R]
;
}%
