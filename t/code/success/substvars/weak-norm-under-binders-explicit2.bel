% Weak normalization under binders. Very carefully tiptoes around various gaps in the implementation

tp : type.                --name tp T.
i :  tp.
arr: tp -> tp -> tp.

tm : tp -> type.          --name tm E.
app : tm (arr T S) -> tm T -> tm S.
lam : (tm T -> tm S) -> tm (arr T S).

schema ctx = tm T;

mstep : tm A -> tm A -> type.  --name mstep S.
beta : mstep (app (lam M) N) (M N).
eta : {M:tm (arr A B)} mstep M (lam (\x. app M x)).
steplam : ({x:tm A} mstep (M x) (M' x)) -> mstep (lam M) (lam M').
stepapp : mstep M M' -> mstep N N' -> mstep (app M N) (app M' N').
refl : mstep M M.
trans : mstep M M' -> mstep M' M'' -> mstep M M''.

inductive IsVar : (g:ctx){M:[g |- tm A]} ctype =
| IsVar : {#p:#[g |- tm A[]]} IsVar [g |- #p[..]];

inductive IsVarSub : {g:ctx} (h:ctx) {$S:$[h |- g]}ctype =
| Nil : IsVarSub [] $[h |- ^]
| Cons :  {g:ctx}{h:ctx}{A:[ |- tp]}{$S:$[h |- g]}{M:[h |- tm A[]]}
      IsVarSub [g] $[h |- $S[..]]
         -> IsVar [h |- M[..]] % I would like to directly quantify over #p, but bugs
         -> IsVarSub [g, x:tm A[]] $[h |- $S, M]
;

% This could be defined at the LF layer, but then it would require a bigger schema, and I don't want to deal with that
% Could enforce also eta longness easily, but meh
inductive IsNormal : (g:ctx) {M:[g |- tm A]} ctype =
| Neut : IsNeutral [g |- M[..]] -> IsNormal [g |- M[..]]
| Lam : IsNormal [g, x:tm A[] |- M]
     -> IsNormal [g |- lam (\x. M)]
and inductive IsNeutral : (g:ctx) {M:[g |- tm A]} ctype =
| Var : {#p:[g |- tm A[]]} IsNeutral [g |- #p[..]]
| App : IsNeutral [g |- M[..]]
     -> IsNormal  [g |- N[..]]
     -> IsNeutral [g |- app M[..] N[..]]
;

inductive Halts : (g:ctx) {M:[g |- tm A]} ctype =
| Halts : [g |- mstep M[..] V[..]] -> IsNormal [g |- V[..]] ->
          Halts [g |- M[..]]
;

rec wknVar :  {g:ctx}(h:ctx){A:[ |- tp]}{#p:[g |- tm A[]]}{$W:$[h |- g]}
     IsVarSub [g] [h |- $W]
   -> IsVar [h |- #p[$W]] =
 mlam g => mlam A => mlam #p => mlam $W => fn ivs =>
case [g |- #p[..]] of
| [g', x:tm B[] |- x] =>
  let  {$R:$[h |- g']} Cons [g'] [h] [ |- B] $[h |- $R[..]] [h |- M[..]] ivs' iv = ivs in iv
| {#q : [g' |- tm T[]]} [g', x:tm B[] |- #q[..]] =>
   let  Cons [g'] [h] [ |- B] $[h |- $R[..]] [h |- M[..]] ivs' iv = ivs in
   wknVar [g'] [ |- T] [g' |- #q[..]] $[h |- $R[..]] ivs'
% let  Cons  ivs' iv = ivs in
% wknVar [g'] [g' |- #q[..]]  ivs'
;


rec varSubCompose' : {g:ctx}{h:ctx}{h':ctx}{$W:$[h |- g]}{$W2:$[h' |- h]}
    IsVarSub [g] $[h |- $W[..]]
 -> IsVarSub [h] $[h' |- $W2[..]]
 -> IsVarSub [g] $[h' |- $W[$W2[..]]] =
mlam g => mlam h => mlam h' => mlam $W => mlam $W2 => fn r1 => fn r2 =>
case r1 of
| Nil => Nil
| Cons [g'] [h] [ |- B] $[h |- $R[..]] [h |- M[..]] ivs' iv =>
  let q0 = varSubCompose' [g'] [h] [h'] $[h |- $R[..]] $[h' |- $W2[..]] ivs' r2 in
  let IsVar [h |- #p[..]] = iv in
  let q1 = wknVar [h] [ |- B] [h |- #p[..]] $[h' |- $W2[..]] r2 in
  Cons [g'] [h'] [ |- B] $[h' |- $R[$W2[..]]] [h' |- _] q0 q1
;
