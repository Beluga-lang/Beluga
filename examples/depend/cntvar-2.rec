% Variable counting (see Pientka [POPL'08])
% Author:  Brigitte Pientka
%
% This example only uses weak higher-order abstract syntax.

tp  : type.
nat : tp.
bool: tp.

exp : tp -> type.
z   : exp nat.
s   : exp nat -> exp nat.

tt  : exp bool.

add : exp nat -> exp nat -> exp nat.
letv: {T1:tp} exp T1 -> (exp T1 -> exp T2) -> exp T2.


schema expCtx = some [t:tp] exp t;


rec plus : (exp nat) [ ] -> (exp nat) [ ] -> (exp nat) [ ] =
fn x => fn y =>
 case x of
    [ ] z => y

  | [ ] s U  =>
  let  [ ] V = plus ([ ] U) y in 
    [ ] s V;


rec cntV : {g:(expCtx)*} (exp (S ..))[g, x:exp (T..)] -> (exp nat) [ ] =
FN g => 
  fn e =>
  (case e of

     [g,x : exp _ ] tt        => [ ] z

   | [g,x : exp _ ] (#p ..)   => [ ] z

   | [g,x : exp _ ] x         => [ ] s z

   | [g,x : exp _ ] z         => [ ] z

   | [g,x : exp _ ] s (W .. x)  => 
          cntV [g]  ([g,x] (W .. x))

   | [g,x : exp _ ] letv (T1 ..) (U1 .. x) (\y . (U2 .. x y)) =>
             plus 
	     (cntV [g]           ([g,x]   (U1 .. x)))
             (cntV [g, y:exp _]  ([g,y,x] (U2 .. x y)))

);


