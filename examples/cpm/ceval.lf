%%% Computations of Continuation Machine
%%% Author: Frank Pfenning

%%% Single Step Transitions
step: cm_state -> cm_state -> type.		%name step St.
%infix none 6 =>.

% Natural Numbers
st_z        : step  (state K  (ev z))      (state K  (return z')).
st_s        : step  (state K (ev (s E))) (state (cons K  (\x. return (s' x)))  (ev E)).
st_match    : step  (state K (ev (match E1 E2 (\x. E3 x)))) 
                    (state (cons K  (\x1. match1 x1 E2 (\x. E3 x))) (ev E1)).
st_match1_z : step  (state K (match1 (z') E2 (\x. E3 x)))
                    (state K (ev E2)).
st_match1_s : step  (state K (match1 (s' V1') E2 (\x. E3 x))) 
                    (state K (ev (E3 V1'))).

% Pairs
st_pair     : step  (state K (ev (pair E1 E2))) 
                    (state (cons K  (\x1. pair1 x1 E2)) (ev E1)).

st_pair1    : step  (state K (pair1 V1 E2)) 
                    (state (cons K (\x2. return (pair' V1 x2))) (ev E2)).

st_fst      : step  (state K (ev (fst E)))
                    (state (cons K  (\x. fst1 x)) (ev E)).

st_fst1     : step  (state K (fst1 (pair' V1 V2)))
                    (state K (return V1)).

st_snd      : step  (state K (ev (snd E)))
                    (state (cons K (\x. snd1 x)) (ev E)).

st_snd1     : step  (state K (snd1 (pair' V1 V2)))
                    (state K (return V2)).

% Functions
st_lam      : step  (state K (ev (lam (\x. E x))))
                    (state K (return (lam' (\x. E x)))).
st_app      : step  (state K (ev (app E1 E2)))
                    (state (cons K  (\x1. app1 x1 E2)) (ev E1)).

st_app1     : step  (state K (app1 V1 E2))
                    (state (cons K  (\x2. app2 V1 x2)) (ev E2)).

st_app2     : step  (state K (app2 (lam' (\x. E1' x)) V2))              
                    (state K (ev (E1' V2))).

% Definitions
st_letv : step  (state K (ev (letv E1 (\x. E2 x))))
                (state (cons K  (\x1. ev (E2 x1))) (ev E1)).
st_letn : step  (state K (ev (letn E1 (\x. E2 x))))
                (state K (ev (E2 E1))).

% Recursion
st_fix : step  (state K (ev (fix (\x. E x))))
               (state K (ev (E (fix (\x. E x))))).

% Values
st_vl : step  (state K (ev (vl V))) (state K (return V)).

% Return Instructions
st_return : step (state (cons K  (\x. C x))  (return V))  (state K (C V)).

st_init   : step (state init (return V)) (answer V).

%%% Multi-Step Computation
mstep : cm_state -> cm_state -> type.		%name mstep C. 
%infix none 5 =>*.

stop : mstep S  S.
to : mstep S  S''
      <- step S  S'
      <- mstep S'  S''.

%infix left 5 <<.
% Because of evaluation order, computation sequences are displayed
% in reverse, using "<<" as a left-associative infix operator.

%%% Full Evaluation
ceval : exp -> val -> type.		%name ceval CE.

cev : ceval E V
       <- mstep (state init (ev E)) (answer V).

 

