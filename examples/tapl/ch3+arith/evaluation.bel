%{
  CH 3:  Untyped arithmetic expressions
  Author: Brigitte Pientka

  SYNTAX
}%


LF term  : type =
| true  : term
| false : term
| switch: term -> term -> term -> term
| z     : term
| succ  : term -> term
| pred  : term -> term
| iszero: term -> term
;

--name term M.
% ----------------------------------------------------------------------------
% Examples : Valid Terms

let v1 = [ |- switch false z (succ z)] ;
let v2 = [ |- iszero (pred (succ z))]  ;

% The following is still a valid term
% although we may want to identify it as
% ill-typed later. So far, we only are concerned
% with syntax.

let v3 = [ |- switch (succ z) (succ z) false ] ;

% ----------------------------------------------------------------------------
% Values
LF num_value : term -> type =
| v_z    : num_value z
| v_s    : num_value N -> num_value (succ N)
;

LF value     : term -> type =
| v_true : value true
| v_false: value false
| v_num  : num_value V -> value V
;

% Small-step operational semantics
LF step: term -> term -> type =
| e_switch_true:  step (switch true T2 T3)    T2
| e_switch_false: step (switch false T2 T3)   T3
| e_pred_zero:    step (pred z) z
| e_pred_succ:    num_value N
                 -> step (pred (succ N)) N
| e_iszero_zero:  step (iszero z) true
| e_iszero_succ:  num_value N
                -> step (iszero (succ N)) false
| e_switch:       step T1 T1'
                -> step (switch T1 T2 T3)      (switch T1' T2 T3)
| e_succ:         step T T'
                -> step (succ T) (succ T')
| e_pred:         step T T'
                -> step (pred T) (pred T')
| e_iszero:       step M N
                -> step (iszero M) (iszero N)
;

% ----------------------------------------------------------------------------
% Example:

let t : [ |- step (switch (switch true false false)
                      true
                      true)
              (switch false true true)]
= [ |- e_switch e_switch_true] ;

let d : [ |- step (switch (switch (switch true false false)
                               true
                               true)
                       false
                       false)

              (switch (switch false true true)
	              false
                      false)]
= [ |- e_switch (e_switch e_switch_true)] ;


let e1 : [ |- step (pred (succ (pred z))) (pred (succ z))]
= [ |- e_pred (e_succ e_pred_zero)] ;


let e2 : [ |- step (pred (succ z)) z]
= [ |- e_pred_succ v_z] ;

% ----------------------------------------------------------------------------
%{
Typing
}%

LF tp : type =
| nat : tp
| bool : tp
;
--name tp T.

LF hastype: term -> tp -> type =
| t_zero : hastype z nat
| t_succ : hastype M nat
     -> hastype (succ M) nat
| t_pred : hastype M nat
      -> hastype (pred M) nat
| t_true : hastype true bool
| t_false: hastype false bool
| t_iszero: hastype M nat
          -> hastype (iszero M) bool
| t_switch: hastype M bool -> hastype M1 T -> hastype M2 T
          -> hastype (switch M M1 M2) T
;

% ----------------------------------------------------------------------------
% Type preservation

rec tps: [|- hastype M T] -> [|- step M M'] -> [|- hastype M' T] =
/ total s (tps m t m' d s) /
fn d => fn s => case s of
| [|- e_switch_true] => let [|- t_switch D D1 D2] = d in [|- D1]
| [|- e_switch_false] =>
  let [|- t_switch D D1 D2] = d in [|- D2]
| [|- e_switch S] =>
  let [|- t_switch D D1 D2] = d in
  let [|- D'] = tps [|- D] [|- S] in
  [|- t_switch D' D1 D2]
| [|- e_pred_zero] =>
  let [|- t_pred _ ] = d in [|- t_zero]
| [|- e_pred_succ _ ] =>
  let [|- t_pred (t_succ D) ] = d in [|- D]
| [|- e_iszero_zero] =>
  let [|- t_iszero _] = d in [|- t_true]
| [|- e_iszero_succ _ ] =>
  let [|- t_iszero _] = d in [|- t_false]
| [|- e_pred S] =>
  let [|- t_pred D] = d in
  let [|- D'] = tps [|- D] [|- S] in
  [|- t_pred D']
| [|- e_succ S] =>
  let [|- t_succ D] = d in
  let [|- D'] = tps [|- D] [|- S] in
  [|- t_succ D']
| [|- e_iszero S] =>
  let [|- t_iszero D] = d in
  let [|- D'] = tps [|- D] [|- S] in
  [|- t_iszero D']
;

% ----------------------------------------------------------------------------
%{
Multi-step relation is the reflexive transitive closure over the
single step relation.
}%

LF multi_step: term -> term -> type =
| ms_tr: multi_step M N' -> multi_step N' N
       -> multi_step M N
| ms_ref: multi_step M M
| ms_step: step M N
	 -> multi_step M N
;

% ----------------------------------------------------------------------------
% LEMMAS
% Type preservation for multi-steps
rec multi_tps : [|- hastype M T] -> [|- multi_step M M'] -> [|- hastype M' T] =
/ total s (multi_tps m t m' d s)/
fn d => fn s => case s of
| [|- ms_ref] => d
| [|- ms_tr S1 S2] =>
  let d1 = multi_tps d  [|- S1] in
   multi_tps d1 [|- S2]
| [|- ms_step S] => tps d [|- S]
;


%{
Lemma: IF multi-step T T' THEN multi-step (switch T T2 T3) (switch T' T2 T3).
}%

rec mstep_switch :
  {T2:[ |- term]}{T3:[ |- term]}
  [ |- multi_step T T'] ->
  [ |- multi_step (switch T T2 T3) (switch T' T2 T3)] =
/ total ms (mstep_switch _ _ _ _ ms)/
mlam T2 => mlam T3 =>
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
  [ |- ms_step (e_switch S)]

| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_switch [ |- T2 ] [ |- T3 ] [ |- MS1] in
  let [ |- MS2'] = mstep_switch [ |- T2 ] [ |- T3 ] [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;

%{
Lemma: IF multi-step T T' THEN multi-step (succ T) (succ T').
}%

rec mstep_succ :
 [ |- multi_step M M'] -> [ |- multi_step (succ M) (succ M') ] =
/ total ms (mstep_succ m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_succ S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_succ [ |- MS1] in
  let [ |- MS2'] = mstep_succ [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;

%{
Lemma: IF multi-step T T' THEN multi-step (pred T) (pred T').
}%


rec mstep_pred :
  [ |- multi_step M M'] -> [ |- multi_step (pred M) (pred M')] =
/ total ms (mstep_pred m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_pred S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_pred [ |- MS1] in
  let [ |- MS2'] = mstep_pred [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;


%{
Lemma: IF multi-step T T' THEN multi-step (pred T) (pred T').
}%


rec mstep_iszero :
  [ |- multi_step M M'] -> [ |- multi_step (iszero M) (iszero M')] =
/ total ms (mstep_iszero m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_iszero S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_iszero [ |- MS1] in
  let [ |- MS2'] = mstep_iszero [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;

% ----------------------------------------------------------------------------
%{

 MAIN THEOREM:

 For every well-typed term, there exists an evaluation sequence  which leads to
 a value, i.e. no term will get stuck.

}%

LF steps_to_val: term -> type =
| result: multi_step T T' -> value T'
       -> steps_to_val T;


rec terminate : [|- hastype M T] -> [ |- steps_to_val M] =
/ total d (terminate m t d)/
fn d => case d of
| [ |- t_true] => [ |- result ms_ref v_true]

| [ |- t_false] => [ |- result ms_ref v_false]

| [ |- t_switch D D1 D2] =>
  let d : [|- hastype (switch M M1 M2) T] = d in
  (case terminate [ |- D ] of
   | [ |- result MS v_true] =>
       let [ |- result MS1 V1] = terminate [ |- D1 ] in
       let [ |- MS']           = mstep_switch [ |- M1 ] [ |- M2 ] [ |- MS] in
       [ |- result (ms_tr MS' (ms_tr (ms_step e_switch_true) MS1)) V1]

   | [ |- result MS v_false] =>
       let [ |- result MS2 V2] = terminate [ |- D2 ] in
       let [ |- MS']           = mstep_switch [ |- M1 ] [ |- M2 ] [ |- MS] in
       [ |- result (ms_tr MS' (ms_tr (ms_step e_switch_false) MS2)) V2]
   | [ |- result MS (v_num v_z)]     => impossible multi_tps [|- D] [|- MS]
   | [ |- result MS (v_num (v_s V))] => impossible multi_tps [|- D] [|- MS]
  )

| [ |- t_zero] => [ |- result ms_ref (v_num v_z)]

| [ |- t_succ D] =>
  (case terminate [ |- D] of
   | [ |- result MS (v_num V)] =>
     let [ |- MS']         = mstep_succ [ |- MS] in
     [ |- result MS' (v_num (v_s V))]
   | [|- result MS v_true]  => impossible multi_tps [|- D] [|- MS]
   | [|- result MS v_false] => impossible multi_tps [|- D] [|- MS]

 )

| [ |- t_pred D]       =>
  (case terminate [ |- D ] of
   | [ |- result MS (v_num v_z)] =>
     let [ |- MS']         = mstep_pred [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_pred_zero))) (v_num v_z)]
   | [ |- result MS (v_num (v_s V))] =>
     let [ |- MS']         = mstep_pred [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_pred_succ V))) (v_num V)]
   | [ |- result MS v_true] => impossible multi_tps [|- D] [|- MS]
   | [|- result MS v_false] => impossible multi_tps [|- D] [|- MS]
 )

| [|- t_iszero D] =>
  (case terminate [|- D] of
   | [ |- result MS (v_num v_z)] =>
     let [ |- MS']         = mstep_iszero [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_iszero_zero))) v_true]
   | [ |- result MS (v_num (v_s V))] =>
     let [ |- MS']         = mstep_iszero [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_iszero_succ V))) v_false]

   | [ |- result MS v_true] => impossible multi_tps [|- D] [|- MS]
   | [|- result MS v_false] => impossible multi_tps [|- D] [|- MS]
  )
;
