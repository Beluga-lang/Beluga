term: type.
lam   : (term -> term) -> term.
app   : term -> term -> term.


target: type.

tunit: target.
tfst: target -> target.
tsnd: target -> target.
tpair: target -> target -> target.
tapp : target -> target -> target ->  target.
tabs : (target -> target -> target) -> target.
tlet :  target -> (target -> target) -> target.

nat: type.
z: nat.
s: nat -> nat.
plus: nat -> nat -> nat.
mult: nat -> nat -> nat.

env:type.
enil : env.
econs:  term -> env -> env.


schema tctx =  term  ;

rec genTVar :(g:tctx){#p:[g |- term]} [g |- env] -> [arg':target, xve:target |-  target] =
/ total env (genTVar g p env) /
mlam #p => fn env => case env  of
| [g |- enil] => [arg':target, xve |-  tfst xve]
| [g |- econs H T]  =>
  if [g |- H] == [g |- #p] then
     [arg':target, xve |-  arg']
  else
     (let [arg':target, xve:target |- U] = genTVar [g |- #p ] [g |- T ]  in
     [x:target, xve:target |- U[x, (tsnd xve)] ])
;


rec build: (g:tctx)[g |- env] -> [g |- env] -> [arg':target, xve:target |-  target] = 
% / total l (build g lorig l) /
fn lorig => fn l => case l of
| [g |- enil] => [arg':target, xve |-  tunit]
| [g |- econs (#p ) (Xs )] =>
  let [arg':target, xve:target |-  U] = genTVar [g |- #p ] lorig in
  let [arg':target, xve:target |-  V] = build lorig [g |- Xs ] in
    [arg':target,xve |-  tpair U V]
;


rec convert:(g:tctx)[g |- env] -> [g,x:term |-  term]
	    -> [arg':target, xve:target |-  target] =
fn env => fn t => case t of
| [g,x:term |-  x] =>      [arg':target, xve |-  arg']
| [g,x:term |-  #p] =>
    let [g |- L] = env in
    genTVar [g |- #p ] [g |- L ]

| [g,y:term |-  lam \x. E] =>
  let [g |- L] = env in
  let [arg':target, xve:target |- Ve] =
    build [g |- L] [g |- L] in

  let [arg':target, xve:target |-  T] =
    convert [g,y:term |-  econs y (L )] [g,y,x |-  E[..,x]] in
% or should this be.
%     convert [g,x:term] ([g,x] econs x (L )) ([g,x,y] E y x) in

   [arg':target,xve |-  tpair (tabs \arg'. \xve. T[arg',xve]) Ve]

| [g, x:term |-  app (E1) (E2)] =>
  let [g |- L] = env in
  let [arg':target,xve:target |-  T1] =
        convert [g |- L ] [g,x |- E1] in
  let [arg':target, xve:target |-  T2] =
        convert [g |- L ] [g,x |- E2] in
   [arg':target,xve |-  tlet T1
                \closure .  tapp (tfst closure) (tsnd closure) (T2[arg',xve])]


;


%{ rec cc : [ |- term] ->  [ |- target] =
fn e =>
 let [ |- E] = e in
 let [arg':target, xve:target |-  T] =
     convert [ |- enil] [x:target |- E] in
   [ |- T]
;
}%
%{

let t1 = cc [ |- lam (\x. (lam (\y. app x y)))] ;
let t2 = cc [ |- lam (\x. (lam (\y. app y x)))] ;
 }%


%{

let a = 2
    b = 5
    f = x . y . a * x + b * y
in f 7 3

is equivalent to

(lam a. (let b = 5 f = \x.\y. a * x + b * y))  2
(lam a. (lam b. let f = \x.\y. a * x + b * y) 5)  2
(lam a. (lam b. (lam f. f 7 3) (\x.\y. a * x + b * y)) 5)  2



let v = cc ([ ] app (lam \a. (app (lam \b. (app  (lam \f. app (app f (s z)) (s s s z))   (lam \x.\y. plus (mult a x) (mult b y)))
                                (s s s s s z)))
                      (s s z)))

;

}%

