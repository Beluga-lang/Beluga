% Given an expression e, return the proof that e is always equal to itself.
% 
% If e is an expression, then eq e e.

% Author: Brigitte Pientka
% Comments: 
% - use of Sigma-types in context
%
% - in Delphin, this example requires a special function `extend' of
%   type eqParamFun = <f:exp#> -> <eq f f> to keep track of the
%   relationship between an introduced parameter and the fact that
%   every parameter is equal to itself;
%
% - also requires explicit use of "remove parameter x and u" in the
%   definition of `extend' and the use of `extend' in `eqfun'

exp: type.    %name exp E x.
app: exp -> exp -> exp.
lam: (exp -> exp) -> exp.

eq: exp -> exp -> type.   %name eq Q u.
eq_app : % {E1:exp} {F1:exp} {E2:exp} {F2:exp}
         eq E1 F1 -> eq E2 F2 -> eq (app E1 E2) (app F1 F2).

eq_lam : % {E : exp -> exp} {F : exp -> exp}
             ({x : exp} eq x x -> eq (E x) (F x)) 
          -> eq (lam (\x. E x)) (lam (\x. F x)).
 

schema w = block x:exp. eq x x;

rec eqfun : {g:(w)*} {U::exp[g]} (eq (U ..) (U ..))[g] =
 FN g => mlam U =>
   case [g] (U ..) of
  | [g] #p.1 .. => [g] #p.2 ..

  | [g] lam \x. L .. x =>
      let
          [g,e:block yyy:exp. eq yyy yyy] V .. e = eqfun [g, e:block q:exp. eq q q] <g, e. L .. e.1>
      in
        [g] eq_lam \x. \w. (V .. <x, w>)  % : eq (L .. x) (L .. x)

   | [g] app (A1 ..) (A2 ..)  : exp[g]=>
       let [g] EQ1 .. = eqfun [g] <g . A1 ..> in
       let [g] EQ2 .. = eqfun [g] <g . A2 ..> in
          [g] eq_app (EQ1 ..) (EQ2 ..)

;


exp: type.    %name exp E x.
app: exp -> exp -> exp.
lam: (exp -> exp) -> exp.

eq: exp -> exp -> type.   %name eq Q u.
eq_app : {E1:exp} {F1:exp} {E2:exp} {F2:exp}
         eq E1 F1 -> eq E2 F2 -> eq (app E1 E2) (app F1 F2).

eq_lam : % {E : exp -> exp} {F : exp -> exp}
             ({x : exp} eq x x -> eq (E x) (F x)) 
          -> eq (lam (\x. E x)) (lam (\x. F x)).
 
% schema w = some [x:exp] eq x x;
schema w = block x:exp. eq x x;


% General transitivity is admissible
rec trans: {g:(w)*}       %   {TT::exp[g]} {RR::exp[g]} {SS::exp[g]}
   (eq (TT ..) (RR ..))[g]  % e1 : eq T R
-> (eq (RR ..) (SS ..))[g]  % e2 : eq R S
-> (eq (TT ..) (SS ..))[g]  % result : eq T S
=
  FN g => 
    fn e1 => fn e2 =>
      case e1 of
      | {#p :: (block yy:exp. eq yy yy)[g]}
         [g] #p.2 .. => e2

      | {D1 :: (eq (TT ..) (RR ..))[g, b:block xx:exp. eq xx xx]}
         [g] eq_lam \x.\u. D1 .. <x, u> =>
           (case e2 of
              {D2 :: (eq (RR ..) (SS ..))[g, b:block xx:exp. eq xx xx]}
              [g] eq_lam \xx.\uu. D2 .. <xx, uu> =>
              let
                  [g, b:block x:exp. eq x x] E .. b = 
                     trans [g, b:block x':exp. eq x' x'] 
                       ([g, b] D1 .. b)
                       ([g, b] D2 .. b)
              in
                  [g] eq_lam \x. \u. E .. <x, u>
           )

     | [g] eq_app (T1 ..) (R1 ..) (T2 ..) (R2 ..) (D1 ..) (D2 ..) =>
           (case e2 of
             [g] eq_app (R1 ..) (S1 ..) (R2 ..) (S2 ..)
                    (F1 ..) (F2 ..) =>
             let [g] E1 .. = trans [g]   % <g. T1 ..> <g. R1 ..> <g. S1 ..>
                               ([g] D1 ..)  ([g] F1 ..)
             in
             let [g] E2 .. = trans [g]   % <g. T2 ..> <g. R2 ..> <g. S2 ..>
                               ([g] D2 ..)  ([g] F2 ..)
             in
                 [g] eq_app  (T1 ..) (S1 ..) (T2 ..) (S2 ..)
                        (E1 ..)  (E2 ..)
           )
;


