%%% The language and inference rules of natural deduction
%%% This contains only the positive fragment
%%% Author: Frank Pfenning

i : type.  % individuals
o : type.  % formulas
p : type.  % atomic formulas
%name i T. % S
%name o A. % B C
%name p P. % Q

atom   : p -> o.
and    : o -> o -> o.  %infix right 11 and.
imp    : o -> o -> o.  %infix right 10 imp.
true   : o.
forall : (i -> o) -> o.

pf : o -> type.  % natural deductions
%name pf D. % E

andi    : pf A -> pf B -> pf (and A B).
andel   : pf (and A B) -> pf A.
ander   : pf (and A B) -> pf B.

impi    : (pf A -> pf B) -> pf (imp A B).
impe    : pf (imp A B) -> pf A -> pf B.

truei   : pf (true).

foralli : ({a:i} pf (A a)) -> pf (forall (\x. A x)).
foralle : pf (forall (\x. A x)) -> {T:i} pf (A T).


%%% Canonical forms for natural deductions.
%%% Author: Frank Pfenning

can : {A:o} pf A -> type.  % Canonical deductions
atm : pf A -> type.        % Atomic deductions
%name can CN.
%name atm AT.
%mode (can +A +P) (atm +P).

can_andi : can (and A B) (andi D E)
	    <- can A D
	    <- can B E.


can_impi : can (imp A B) (impi (\u. D u))
	    <- {u:pf A} atm u -> can B (D u).


can_truei : can (true) (truei).


can_foralli : can (forall (\x. A x)) (foralli (\x. D x))
	       <- {a:i} can (A a) (D a).


can_atm : can (atom P) D
	    <- atm D.

atm_andel : atm (andel D) <- atm D.

atm_ander : atm (ander D) <- atm D.

atm_impe : atm (impe D E)
	    <- atm D
	    <- can B E.

atm_foralle : atm (foralle D T)
	       <- atm D.


%%% Conversion to canonical form
%%% Author: Frank Pfenning

% Weak head reduction

whr : pf A -> pf A -> type.  % Weak head reduction
%name whr WHR.

% Reductions
whr_andl : whr (andel (andi D E)) D.
whr_andr : whr (ander (andi D E)) E.
whr_imp  : whr (impe (impi (\u. D u)) E) (D E).
whr_forall : whr (foralle (foralli (\x. D x)) T) (D T).

% Congruences on elimination rules
whr_andel : whr (andel D) (andel D')
	     <- whr D D'.
whr_ander : whr (ander D) (ander D')
	     <- whr D D'.
whr_impe  : whr (impe D E) (impe D' E)
	     <- whr D D'.
whr_foralle : whr (foralle D T) (foralle D' T)
	       <- whr D D'.

% Conversion to canonical and atomic form.

tocan : {A:o} pf A -> pf A -> type.  % Conversion to canonical form
toatm : pf A -> pf A -> type.        % Conversion to atomic form
%name tocan TC.
%name toatm TA.

tc_and : tocan (and A B) D (andi D1' D2')
	  <- tocan A (andel D) D1'
	  <- tocan B (ander D) D2'.

tc_imp : tocan (imp A B) D  (impi (\u. D' u))
	  <- {u:pf A} toatm u u -> tocan B (impe D u) (D' u).

tc_true : tocan (true) D (truei).

tc_forall : tocan (forall (\x. A x)) D (foralli (\x. D' x))
	      <- {a:i} tocan (A a) (foralle D a) (D' a).

tc_whr : tocan (atom P) D D'
	  <- whr D D''
	  <- tocan (atom P) D'' D'.

tc_atm : tocan (atom P) D D'
	  <- toatm D D'.

ta_impe : toatm (impe D E) (impe D' E')
	   <- toatm D D'
	   <- tocan A E E'.

ta_andel : toatm (andel D) (andel D')
	    <- toatm D D'.

ta_ander : toatm (ander D) (ander D')
	    <- toatm D D'.

ta_foralle : toatm (foralle D T) (foralle D' T)
	      <- toatm D D'.



%%% The result of conversion to canonical form is canonical.
%%% Author: Frank Pfenning

iscan : tocan A D D' -> can A D' -> type.
isatm : toatm D D' -> atm D' -> type.
%mode iscan +TC -C.
%mode isatm +TA -A.


% isc_and : iscan (tc_and TC2 TC1) (can_andi CN2 CN1)
% 	   <- iscan TC1 CN1
% 	   <- iscan TC2 CN2.

% % ERROR in type reconstruction 
% % isc_imp : iscan (tc_imp (\u. \ta. TC1 u ta)) (can_impi (\u. \at. CN1 u at))
% %	   <- ({u:pf A} {ta:toatm u u} {at:atm u}
% %	      isatm ta at -> iscan (TC1 u ta) (CN1 u at)).

% isc_true : iscan (tc_true) (can_truei).

% ERROR in type reconstruction 
% isc_forall :
%    {A1:i -> o} {D1:pf (forall ([t:i] A1 t))} {D2:{t:i} pf (A1 t)}
%       {TC1:{t:i} tocan (A1 t) (foralle ([t1:i] A1 t1) D1 t) (D2 t)}
%       {CN1:{t:i} can (A1 t) (D2 t)}
%       ({a:i} iscan (A1 a) (foralle ([t:i] A1 t) D1 a) (D2 a) (TC1 a) (CN1 a))
%          -> iscan (forall ([t:i] A1 t)) D1 (foralli ([t:i] A1 t) ([a:i] D2 a))
%                (tc_forall ([t:i] A1 t) D1 ([t:i] D2 t) ([a:i] TC1 a))
%                (can_foralli ([t:i] A1 t) ([t:i] D2 t) ([a:i] CN1 a)).
%
isc_forall : iscan (tc_forall (\a. TC1 a)) (can_foralli (\x. CN1 x))
	       <- ({a:i} iscan (TC1 a) (CN1 a)).


% isc_whr : iscan (tc_whr TC1 WHR) CN1
% 	   <- iscan TC1 CN1.

% isc_atm : iscan (tc_atm TA1) (can_atm AT1)
% 	   <- isatm TA1 AT1.

% isa_impe : isatm (ta_impe TC2 TA1) (atm_impe CN2 AT1)
% 	    <- isatm TA1 AT1
% 	    <- iscan TC2 CN2.

% isa_andel : isatm (ta_andel TA1) (atm_andel AT1)
% 	     <- isatm TA1 AT1.

% isa_ander : isatm (ta_ander TA1) (atm_ander AT1)
% 	     <- isatm TA1 AT1.

% isa_foralle : isatm (ta_foralle TA1) (atm_foralle AT1)
% 	       <- isatm TA1 AT1.



