nat : type.
bool: type.

tt: bool.

z : nat.
s : nat -> nat.
add: nat -> nat -> nat.
foo: nat -> bool -> nat.
zoo: (nat -> nat) -> nat.

schema natCtx = some [] nat;

rec identity : {g:natCtx} [g |- nat] -> [g |- nat] =
mlam g =>
 fn x =>
  (case x of
      [g |- z]                  =>  [g |- z]
    | [g |- (#p[..])]            =>  [g |- z]
    | [g |- (U[..])]             =>  [g |- (U[..])]
    | [g |- zoo (\x. (U))] =>  [g |- (U[..,(s z)])]

);

rec identity :  [ |- nat] -> [ |- nat] =
 fn x =>
  (case x of
     [ |- z]          =>  [ |- z]
   | [ |- U]          =>  [ |- U]
)
;


rec copy :  [ |- nat] -> [ |- nat] =
 fn x =>
  (case x of
     [ |- z]          =>  [ |- z]
   | [ |- U]          =>
    let [ |- V] = copy [ |- U] in
       [ |- s V]
)
;


% rec plus :  nat [ ] -> nat [ ] -> nat [ ] =
% fn x => fn y =>
%  (case x of
%     box ( . z)            =>  y
%   | box ( . U)          =>
%    let box( . V) = plus box ( .  U)  y in
%       box( . s V)
%)
%;




% rec identity :  nat [,x:nat] -> nat [,x:nat] =
% fn x =>
%  (case x of
%     box (y : nat. z)            =>  box (y . z)
%   | box (y : nat. y)            =>  box (y . z)
%   | box (y : nat . U y) =>  box(y .z)
%)
%;
