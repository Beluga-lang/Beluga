nat : type.
z : nat.
s : nat -> nat.
s' : nat -> nat.
adding: nat -> nat -> nat.
plus: nat -> nat -> nat.

rec identity : [ |- nat] -> [ |- nat] =
    fn x =>
      case x of
          [ |- z]     => [ |- z]
        | [ |- s' U]  => [ |- s' U]
        | [ |- s  U]  => [ |- s U]
        | [ |- adding V U] => [ |- adding V U]
        | [ |- plus V U]   => [ |- plus V U]
;


rec plus : [ |- nat] -> [ |- nat] -> [ |- nat] =
 fn x => fn y =>
  case x of --not
     [ |- z]  => y
  |  [ |- s U]  =>
     let
       [ |- V]  = plus [ |- U] y
     in
       [ |- s V]
;


rec plus' : [ |- nat] -> [ |- nat] -> [ |- nat] =
   fn x => fn y =>
     case x of --not
       [ |- z]  => y
     | [ |- s U] =>
       let [ |- V] = plus' [ |- U] y in
  	 [ |- (s V)];
