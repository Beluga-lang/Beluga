LF nat : type =
| z : nat
| s : nat -> nat
;

coinductive Stream : ctype =
| Hd : Stream :: [ |- nat]
| Tl : Stream :: Stream
;

rec plus : [ |- nat] -> [ |- nat] -> [ |- nat] =
fn e => fn f => case e of
| [ |- z] => f
| [ |- s N] => let [ |- M] = f in plus [ |- N] [ |- s M]
;

rec zipwith : Stream -> Stream -> Stream =
fun e f .Hd => plus (e .Hd) (f .Hd)
  | e f .Tl => zipwith (e .Tl) (f .Tl)
;

rec fib : Stream =
fun .Hd => [ |- z]
  | .Tl .Hd => [ |- s z]
  | .Tl .Tl => zipwith fib (fib .Tl)
;


let a = fib .Hd;
let b = fib .Tl;
let c = b .Tl;
let d = b .Hd;
let e = c .Tl;
let f = e .Hd;
