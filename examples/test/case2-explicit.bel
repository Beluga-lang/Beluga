nat: type.
z   : nat.
suc : nat -> nat.

irrelevancy : type.
irrelevant_con : irrelevancy.

schema w = block nat;

rec copynat : {g:(w)*} nat[g] -> nat[g] =
FN g => fn e =>
 case e of [g] z : nat[g] => [g] z
         | {U::nat[g]}
            [g] suc (U ..) : nat[g] => copynat [g] ([g] (U ..))
    
;
