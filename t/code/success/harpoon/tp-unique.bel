LF tp : type =
  | base : tp
  | arr : tp → tp → tp
; --name tp A a.

LF tm : type =
  | lam : tp → (tm → tm) → tm
  | app : tm → tm → tm
; --name tm M m.

LF oft : tm → tp → type =
  | t_lam : ({x : tm} oft x A → oft (M x) B) → oft (lam A \x. M x) (arr A B)
  | t_app : oft M (arr A B) → oft N A → oft (app M N) B
; --name oft D d.

schema ctx = some [T : tp] block x : tm, u : oft x T;

LF eq : tp → tp → type =
  | eq_base : eq base base
  | eq_arr : eq A1 A2 → eq B1 B2 → eq (arr A1 B1) (arr A2 B2)
; --name eq E e.

proof tp-refl : {A : ⊢ tp} [⊢ eq A A] =
/ total 1 /
intros
{ A : ( |- tp)
|
; split [ |- A] as
  case arr:
  { X : ( |- tp), X1 : ( |- tp)
  |
  ; by tp-refl [ |- X] as EQ_X unboxed;
    by tp-refl [ |- X1] as EQ_X1 unboxed;
    solve [ |- eq_arr EQ_X EQ_X1]
  }
  case base:
  {
  |
  ; solve [ |- eq_base]
  }
}
;

proof tp-unique : (g : ctx) [g ⊢ oft M A[]] → [g ⊢ oft M B[]] → [⊢ eq A B] =
/ total 1 /
intros
{ g : ctx, M : (g |- tm), A : ( |- tp), B : ( |- tp)
| y6 : [g |- oft M A[]], d : [g |- oft M B[]]
; split y6 as
  case t_app:
  { g : ctx,
    M1 : (g |- tm),
    M2 : (g |- tm),
    A : ( |- tp),
    B : ( |- tp),
    A1 : ( |- tp),
    D : (g |- oft M1 (arr A1[] A[])),
    D1 : (g |- oft M2 A1[])
  | y6 : [g |- oft (app M1 M2) A[]], d : [g |- oft (app M1 M2) B[]]
  ; split d as
    case t_app:
    { g : ctx,
      M1 : (g |- tm),
      M2 : (g |- tm),
      A : ( |- tp),
      B : ( |- tp),
      A1 : ( |- tp),
      D : (g |- oft M1 (arr A1[] A[])),
      D1 : (g |- oft M2 A1[]),
      A2 : ( |- tp),
      D2 : (g |- oft M1 (arr A2[] B[])),
      D3 : (g |- oft M2 A2[])
    | y6 : [g |- oft (app M1 M2) A[]], d : [g |- oft (app M1 M2) B[]]
    ; by tp-unique [g |- D] [g |- D2] as IH unboxed;
      split [ |- IH] as
      case eq_arr:
      { g : ctx,
        M1 : (g |- tm),
        M2 : (g |- tm),
        A : ( |- tp),
        B : ( |- tp),
        A1 : ( |- tp),
        D : (g |- oft M1 (arr A1[] A[])),
        D1 : (g |- oft M2 A1[]),
        A2 : ( |- tp),
        D2 : (g |- oft M1 (arr A2[] B[])),
        D3 : (g |- oft M2 A2[]),
        E : ( |- eq A1 A2),
        E1 : ( |- eq A B)
      | y6 : [g |- oft (app M1 M2) A[]], d : [g |- oft (app M1 M2) B[]]
      ; solve [ |- E1]
      }
    }
  }
  case t_lam:
  { g : ctx,
    A1 : ( |- tp),
    M1 : (g, m : tm |- tm),
    A2 : ( |- tp),
    B : ( |- tp),
    D : (g, x : tm, x3 : oft x A1[] |- oft (M1[.., x]) A2[])
  | y6 : [g |- oft (lam A1[] (\x. M1)) (arr A1[] A2[])],
    d : [g |- oft (lam A1[] (\x. M1)) B[]]
  ; split d as
    case t_lam:
    { g : ctx,
      A1 : ( |- tp),
      M1 : (g, m : tm |- tm),
      A2 : ( |- tp),
      A4 : ( |- tp),
      D : (g, x : tm, x3 : oft x A1[] |- oft (M1[.., x]) A2[]),
      D1 : (g, x : tm, x3 : oft x A1[] |- oft (M1[.., x]) A4[])
    | y6 : [g |- oft (lam A1[] (\x. M1)) (arr A1[] A2[])],
      d : [g |- oft (lam A1[] (\x. M1)) (arr A1[] A4[])]
    ; by tp-unique [g, x1:block x:tm, u:oft x A1[] |- D[.., x1.1, x1.2]] [g, x1 |- D1[.., x1.1, x1.2]]
        as IH unboxed;
      by tp-refl [ |- A1] as EQ_A1 unboxed;
      solve [ |- eq_arr EQ_A1 IH]
    }
  }
  case #.2:
  { g : ctx,
    A : ( |- tp),
    #p1 : #(g |- block (x:tm, u:oft x A[])),
    B : ( |- tp)
  | y6 : [g |- oft #p1.1 A[]], d : [g |- oft #p1.1 B[]]
  ; split d as
    case #.2:
    { g : ctx, B : ( |- tp), #p1 : #(g |- block (x:tm, u:oft x B[]))
    | y6 : [g |- oft #p1.1 B[]], d : [g |- oft #p1.1 B[]]
    ; suffices by tp-refl toshow
    }
  }
}
;
