%{ type uniqueness, Marie }%

terminals lam app nat fun
syntax 

tp ::= tp -> tp | nat | x ;

exp ::= lam \x .exp[x] | app exp exp; 

judgment of_typ : exp oft tp;

E1 oft (T2 -> T);  
E2 oft T2;
------------------------- t_app
(app E1 E2) oft T;

{x:exp} x oft T1;  
E[x] oft T2;
------------------------- t_lam
(lam T1 E) oft (T1 -> T2);

judgment equal : tp = tp;

------------------------- eq_ref
T = T;

%{ schema tctx =  some [t:tp] block x:exp. type_of x t; }%

context gamma ::= {t:tp} (y:exp) y oft t;

theorem unique : forall d: [g: gamma] |- E .. oft T ; f: [g] |- E .. oft T' exists T = T';

T = T' by induction on d :


case rule

D1: [g] |- E1 oft (T2 -> T);  
D2: [g] |- E2 oft T2;
------------------------------ t_app
[g] |- (app E1 E2) oft T;

is

(T2 -> T) = (T2 -> T') by case analysis on f:

                 case rule

                 F1: [g] |- E1 oft (T2 -> T');  
                 F2: [g] |- E2 oft T2;
                 ------------------------------ t_app
                 [g] |- (app E1 E2) oft T';

                 is 

                 eq_ref by induction hypothesis on [g] |- D1 .. , [g] |- F1 .. ;

                 end case
                 end case analysis

T = T' by rule eq_ref

end case


end induction
end theorem
%{
case rule

D1 : [g] |- {x:exp} x oft T1;  
D2 : [g] |- E[x] oft T2;
---------------------------------- t_lam
[g] |- (lam T1 E) oft (T1 -> T2);

is

(T2 -> T) = (T2 -> T') by case analysis on f:

                 case rule

                 F1: [g] |- {x:exp} x oft T1;  
                 F2: [g] |- E[x] oft T2;
                 ---------------------------------- t_lam 
                 [g] |- (lam T1 E) oft (T1 -> T2);

                 is 

                 eq_ref  by induction hypothesis on [g, b:(x:exp) x oft _] |- D1 .. , [g,b] |- F1 .. ;

                 end case
                 end case analysis

T = T' by rule eq_ref

end case 

case rule

D1: [g] |- E1 oft (T2 -> T);  
D2: [g] |- E2 oft T2;
------------------------------ t_app
[g] |- (app E1 E2) oft T;

is

(T2 -> T) = (T2 -> T') by case analysis on f:

                 case rule

                 F1: [g] |- E1 oft (T2 -> T');  
                 F2: [g] |- E2 oft T2;
                 ------------------------------ t_app
                 [g] |- (app E1 E2) oft T';

                 is 

                 eq_ref by induction hypothesis on [g] |- D1 .. , [g] |- F1 .. ;

                 end case
                 end case analysis

T = T' by rule eq_ref

end case
}%
