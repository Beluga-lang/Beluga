exp  : type.
z    : exp.
suc  : exp -> exp.

app  : exp -> exp -> exp.
lam  : (exp -> exp) -> exp.

pair : exp -> exp -> exp.
fst  : exp -> exp.
snd  : exp -> exp.

case' : exp -> exp -> (exp -> exp) -> exp.
letv : exp -> (exp -> exp) -> exp.
letn : exp -> (exp -> exp) -> exp.
fix  : (exp -> exp) -> exp.



tp: type.

nat: tp.
arrow: tp -> tp -> tp.
cross: tp -> tp -> tp.


eval : exp -> exp -> type.

ev_z : eval z z.
ev_s : eval E V -> eval (suc E) (suc V).

ev_lam: eval (lam (\ x . E x)) (lam (\ x . E x)).

ev_app:  eval (E1' V2) V  ->
         eval E2 V2 ->
         eval E1 (lam (\ x . E1' x))
      -> eval (app E1 E2) V.

ev_pair: eval E2 V2 -> eval E1 V1
	 -> eval (pair E1 E2) (pair V1 V2).

ev_fst : eval E (pair V1 V2)
       -> eval (fst E) V1.

ev_snd : eval E (pair V1 V2)
       -> eval (snd E) V2.

ev_case'_z : eval E2 V  ->
 	    eval E1 z
         -> eval (case' E1 E2 (\ x . E3 x)) V.

ev_case'_s :  eval (E3 V1') V ->  eval E1 (suc V1')
	  -> eval (case' E1 E2 (\ x . E3 x)) V.

ev_letv	  : eval (E2 V1) V ->
	    eval E1 V1
         -> eval (letv E1 (\ x . E2 x)) V.

ev_letn :  eval (E2 E1) V
	   -> eval (letn E1 (\ x . E2 x)) V.


ev_fix :    eval (E (fix (\ x . E x))) V
	  -> eval (fix (\ x . E x)) V.


oft : exp -> tp -> type.

tp_z     : oft z nat.
tp_s     : oft E nat ->
	   oft (suc E) nat.

tp_case'  : ({x:exp} oft x nat -> oft (E3 x) T) ->
	    oft E2 T ->
	    oft E1 nat ->
            oft (case' E1 E2 (\ x . E3 x)) T.

tp_pair :  oft E2 T2 ->
	   oft E1 T1 ->
           oft (pair E1 E2) (cross T1 T2).

tp_fst  : oft E (cross T1 T2)
	  -> oft (fst E) T1.

tp_snd  : oft E (cross T1 T2)
	-> oft (snd E) T2.


tp_lam :   ({x:exp} oft x T1 -> oft (E x) T2)
        -> oft (lam (\ x . E x)) (arrow T1 T2).

tp_app : oft E2 T2 ->
         oft E1 (arrow T2 T1)
	 -> oft (app E1 E2) T1.


tp_letv : ({x:exp} oft x T1 -> oft (E2 x) T2) ->
	   oft E1 T1
        -> oft (letv E1 (\ x . E2 x)) T2.

tp_letn :   oft (E2 E1) T2 ->
	    oft E1 T1
	    -> oft (letn E1 (\ x . E2 x)) T2.

tp_fix : ({x:exp} oft x T -> oft (E x) T)
       -> oft (fix (\ x . E x)) T.



tps : eval E V -> oft E T -> oft V T -> type.


tps_z     : tps (ev_z) (tp_z) (tp_z).
tps_s     : tps D1 P1 Q1
	  -> tps (ev_s D1) (tp_s P1) (tp_s Q1).

tps_case'_z:  tps D2 P2 Q2
	   -> tps (ev_case'_z D2 D1) (tp_case' (\ x . \ u . P3 x u) P2 P1) Q2.


tps_case'_s:
	    tps D1 P1 (tp_s Q1') ->
	    tps D3 (P3 _ Q1') Q3
	  -> tps (ev_case'_s D3 D1) (tp_case' (\ x . \ u . P3 x u) P2 P1) Q3.


tps_pair : tps D2 P2 Q2 ->
	   tps D1 P1 Q1
         -> tps (ev_pair D2 D1) (tp_pair P2 P1) (tp_pair Q2 Q1).

tps_fst  : tps D1 P1 (tp_pair Q2 Q1)
	 -> tps (ev_fst D1) (tp_fst P1) Q1.

tps_snd  : tps D1 P1 (tp_pair Q2 Q1)
	 -> tps (ev_snd D1) (tp_snd P1) Q2.



tps_app  :  tps D3 (Q1' _ Q2) Q3 ->
	    tps D2 P2 Q2 ->
	    tps D1 P1 (tp_lam (\ x . \ u . Q1' x u))
          -> tps (ev_app D3 D2 D1) (tp_app P2 P1) Q3.


tps_lam  : tps (ev_lam) (tp_lam (\ x . \ u . P x u)) (tp_lam (\ x . \ u . P x u)).




tps_letv :  tps D2 (P2 _ Q1) Q2 ->
	    tps D1 P1 Q1
          -> tps (ev_letv D2 D1) (tp_letv (\ x . \ u . P2 x u) P1) Q2.


tps_letn : tps D2 P2 Q2
	 -> tps (ev_letn D2) (tp_letn P2 P1) Q2.


tps_fix : tps D1 (P1 (fix (\ x . E x)) (tp_fix (\ x . \ u . P1 x u))) Q1
	-> tps (ev_fix D1) (tp_fix (\ x . \ u . P1 x u)) Q1.