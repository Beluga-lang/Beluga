%{
  CH 3:  Untyped arithmetic expressions
  Author: Brigitte Pientka

  IMPLEMENTING AN INTERPRETER

  We interpret the big-step evaluation rules
  as a specification for an interpreter.


}%

val_or_error: type.
val   : term -> val_or_error .
error : val_or_error.


rec eval : [ |- term] -> [ |- val_or_error] =
/ total m (eval m)/
fn m => case m of
| [ |- true]   => [ |- val true]
| [ |- false]  => [ |- val false]
| [ |- switch T1 T2 T3] =>
  (case eval [ |- T1] of
    | [ |- val true]     => eval [ |- T2]
    | [ |- val false]    => eval [ |- T3]
    | [ |- _]            => [ |- error]
  )
| [ |- z]      => [ |- val z]
| [ |- succ N] =>
  (case eval [ |- N] of
   | [ |- val z]         => [ |- val (succ z)]
   | [ |- val (succ V)]  => [ |- val (succ V)]
   | [ |- _]             => [ |- error]
  )
| [ |- pred N] =>
  (case eval [ |- N] of
   | [ |- val z]         => [ |- val z]
   | [ |- val (succ V)]  => [ |- val V]
   | [ |- _]             => [ |- error]
  )
| [ |- iszero M] =>
  (case eval [ |- M] of
   | [ |- val z]         => [ |- val true]
   | [ |- val (succ _ )] => [ |- val false]
   | [ |- _]             => [ |- error]
  )
;


%{
let r = eval [ |- (switch (switch (switch true false false)
                               true
                               true)
                       false
                       false) ] ;
}%
