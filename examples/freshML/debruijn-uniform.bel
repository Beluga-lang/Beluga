%{

  Translating HOAS terms into de Bruijn terms:
  Case study for system F

  Author: Brigitte Pientka

  Feature:
    - Uniform source and target language
    - Use of dependent types and context matching

}%
% Types or Terms
LF term_or_typ : type =
  | typ: term_or_typ
  | term : term_or_typ
;
--name term_or_typ T.

% Intrinsically well-typed expressions
LF obj   :  term_or_typ -> type =
  | app   : obj term -> obj T_or_K -> obj term
  | lam   : (obj T_or_K  -> obj term) -> obj term
  | nat   : obj typ
  | arr   : obj typ -> obj typ -> obj typ
  | all   : (obj typ -> obj typ) -> obj typ
;
--name obj E.

% Translating to untyped deBruijn terms


LF obj'   : term_or_typ -> type =
  | one    : obj' T
  | shift  : obj' T -> obj' T
  | lam'   : obj' T -> obj' term
  | app'   : obj' term -> obj' T  -> obj' term
  | nat'   : obj' typ
  | arr'   : obj' typ -> obj' typ -> obj' typ
  | all'   : obj' typ -> obj' typ
;

schema ctx = some [a:term_or_typ] obj a ;

rec vhoas2db: {g:ctx} {#p: [g |- obj (S[])]}[ |- obj' S] = / total p (vhoas2db g _ p) /
mlam g => mlam #p => case [g |- #p] of
| [h,x:obj S |-  x] => [ |- one]

| % {#p:[h |- obj S]}
  [h,x:obj T |-  #p[..]]  =>
  let [ |- Db] = vhoas2db [h] [h |- #p] in [ |- shift Db]
;

rec hoas2db : (g:ctx) [g |- obj (S[])]  -> [ |- obj' S] = / total x (hoas2db _ _ x) /
fn v =>  case v of
| [g |- #p] => vhoas2db [g] [g |- #p]
| [g |- lam (\x. E)] =>
  let [ |- F]  =  hoas2db [g,x:obj _ |-  E] in
    [ |- lam' F]

| [g |- app (E1 ) (E2 )] =>
  let [ |- F1] = hoas2db [g |- E1]  in
  let [ |- F2] = hoas2db [g |- E2]  in [ |- app' F1 F2]

| [g |- nat]               => [ |- nat']

| [g |- arr T S]   =>
  let [ |- T'] = hoas2db [g |- T] in
  let [ |- S'] = hoas2db [g |- S] in [ |- arr' T' S']

| [g |- all \a. T] =>
  let [ |- T'] = hoas2db [g, a:obj typ |-  T] in
    [ |- all' T']

;
