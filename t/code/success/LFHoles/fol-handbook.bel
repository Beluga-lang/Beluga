% Natural Deduction - Hilbert Translation
% adapted from Handbook article on Logical Frameworks
% by F. Pfenning
%
% Author: Brigitte Pientka

i : type.  % individual
o : type.  % formulas

imp : o -> o -> o.
all : (i -> o) -> o.
not  : o -> o.

%{
even: i -> o.
all (\x. impl (even x)  (even x))

(\x. impl (even x)  (even x)) a  ----> imp (even a) (even a)
}%


nd : o -> type. % Natural deduction
impi : (nd A -> nd B) -> nd (imp A B).
impe : nd (imp A B) -> nd A -> nd B.
noti : ({p:o} nd A -> nd p) -> nd (not A).
note : nd (not A) -> {C:o} nd A -> nd C.
alli : ({a:i} nd (A a)) -> nd (all (\x. A x)).
alle : nd (all (\x.A x)) -> {T:i} nd (A T).



hil : o -> type.  % Hilbert deductions
k  : hil (imp A (imp B A)).
s  : hil (imp (imp A (imp B C)) (imp (imp A B) (imp A C))).
n1 : hil (imp (imp A (not B)) (imp (imp A B) (not A))).
n2 : hil (imp (not A) (imp A B)).
f1 : {T:i} hil (imp (all (\x.A x)) (A T)).
f2 : hil (imp (all (\x.(imp B  (A x))))  (imp B (all (\x.A x)))).
mp : hil (imp A B) -> hil A -> hil B.
ug : ({a:i} hil (A a)) -> hil (all (\x.A x)).

% Implementation of the Deduction Theorem
%
%   If G, u:hil A |- hil B then G |- hil (A imp B).
%

schema hilCtx =  i + some [ a:o ] hil a ;


rec trivial_imp : {g:hilCtx}{A:[g |- o]}[g |- hil (imp (A[..]) (imp (A[..]) (A[..])))] =
/ total a (trivial_imp g a) /
 mlam g => mlam A => [g |- k] ;

rec ded: (g:hilCtx) [g, u:hil (A[..]) |-  hil (B[..])]
        -> [g |- hil (imp (A[..]) (B[..]))] =
/ total h (ded g _ _ h) /
fn h =>  case h of
| [g, u: hil _  |-  #p[..]] =>  [g |- mp k (#p[..])]  % SPECIAL!

% Can only be done by giving type annotation to k or s in
% the output; this is also done in the Twelf implementation
%
% ded_id : ded ([u:hil A] u) (mp (mp s k) (k : hil (A imp (A imp A)))).
% we define a little lemma trivial_imp which generates proofs of the right form.
 | [g, u: hil (A[..]) |-  u]    =>
   let [g |- D[..]] = trivial_imp [g] [g |- A[..] ] in [g |- (mp (mp s k) (D[..]))]

 | [g, u: hil _  |-  k]  => [g |- mp k k]
 | [g, h: hil _  |-  s]  => [g |- mp k s]
 | [g, u: hil _  |-  n1] => [g |- mp k n1]
 | [g, u: hil _  |-  n2] => [g |- mp k n2]
 | [g, u: hil _  |-  f1 (T[..])] => [g |- mp k (f1 (T[..]))]
 | [g, u: hil _  |-  f2] => [g |- mp k f2]

 | [g, u: hil A |-  ug (\x. H[..,x,u])] =>
  let
    [g,x:i |- H'] =
      ded [g, x:i, u: hil A[..] |-  H[..,x,u]]
  in
     [g |- mp f2 (ug  \x. (H'))]

| % {H1 : [g, u : hil (A[..]) |-  hil (imp (B1[..]) (B2[..]))]}
  % {H2 : [g, u : hil (A[..]) |-  hil (B1[..])]}
  [g, u: hil (A[..])  |- mp H1 H2] =>
  let [g |- H2'[..]] = ded [g,u: hil (A[..]) |- H2] in
  let [g |- H1'[..]] = ded [g,u: hil (A[..]) |- H1] in
       [g |- mp (mp s (H1'[..])) (H2'[..])]

;

% Theorem: If G |- nd A  where G = nd B1[..].. nd Bn
%          then G* |- hil A   where G' = hil B1[..]. hil Bn

schema ndhilCtx = some [a:o] block _t:nd a, u:hil a  + i + o ;

rec ndhil : (g:ndhilCtx) [g |- nd (A[..])] -> [g |- hil (A[..])] =
 / total d (ndhil g a d) /
fn d =>  case d of
| [g |- (#p.1[..])] => [g |- (#p.2[..])]

| {B1:[g |- o]}{B2:[g |- o]}{D:[g, u: nd (B1[..]) |-  nd (B2[..])]}
  [g |- impi \u. D] =>
  let {H:[g, u:hil (A1[..]) |-  hil (A2[..])]}
      [g,b: block  _t:nd (A1[..]), u: hil (A1[..])   |-  H[..,b.2]] =
    ndhil [g, b:block _t:nd (B1[..]), u:hil (B1[..]) |- D[..,b.1]]
  in
    ded [g,u |- H[..,?]]

| [g |- note (D1[..]) (C[..]) (D2[..])] =>
  let [g |- H1[..]]   = ndhil [g |- D1[..]] in
  let [g |- H2[..]]   = ndhil [g |- D2[..]] in
    [g |- mp (mp n2 (H1[..])) (H2[..])]

| [g |- alle  (D1[..]) (T[..])] =>
  let [g |- H1[..]] =  ndhil [g |- D1[..]] in
    [g |- mp (f1 (T[..])) (H1[..])]

| [g |- alli \x. D] =>
  let [g,x:i |-  H] =  ndhil [g, x:i |-  D] in
    [g |- ug \x. (H)]


| [g |- impe (D1[..]) (D2[..])] =>
  let [g |- H1[..]] = ndhil [g |- D1[..]] in
  let [g |- H2[..]] = ndhil [g |- D2[..]] in
    [g |- mp (H1[..]) (H2[..])]

|  {B1:[g |- o]}{D: [g, u:nd (B1[..]), p:o |-  nd p]}
  [g |- noti (\p.(\u.D[..,u,p]))] =>
  let {H:[g, u: hil (A[..]), p:o |-  hil p]}
      [g,w:block (_t:nd (A[..]),u:hil (A[..])),p:o |-  H[..,w.2,p]] =
      ndhil [g, w : block (_t:nd (B1[..]), u:hil (B1[..]) ), p:o |-  D[..,w.1,p]] in
  let [g |- H1'[..]]  = ded [g,u |- H[..,u,(not (A[..]))]] in
  let [g |- H1''[..]] = ded [g,u |- H[..,u,(A[..])]] in
    [g |- mp (mp n1 (H1'[..])) ?]

;


rec ndhil_main : [ |- nd A] -> [ |- hil A] =
/ total d (ndhil_main d) /
 fn d => ndhil d ;
