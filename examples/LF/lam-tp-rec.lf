% Typed Mini-ML with value soundness
% (Adapted from Twelf)
% Author: Brigitte Pientka
%

% Types
tp  : type.
nat : tp.
arr : tp -> tp -> tp.
prod: tp -> tp -> tp.

% Expressions indexed with types

exp : tp -> type.
z    : exp nat.
s    : exp nat -> exp nat.
case' : exp nat -> exp T -> (exp nat -> exp T) -> exp T.
pair : exp T1 -> exp T2 -> exp (prod T1 T2).
fst  : exp (prod T1 T2) -> exp T1.
snd  : exp (prod T1 T2) -> exp T2.
lam  : (exp T1 -> exp T2) -> exp (arr T1 T2).
app  : exp (arr T1 T2) -> exp T1 -> exp T2.
letv : exp T1 -> (exp T1 -> exp T2) -> exp T2.
letn : exp T1 -> (exp T1 -> exp T2) -> exp T2.
fix  : (exp T -> exp T) -> exp T.


% Type-preserving evaluation

eval : exp T -> exp T -> type.

ev_lam : eval (lam (\ x . E x)) (lam (\ x . E x)).

ev_z : eval z z.
ev_s : eval E V -> eval (s E) (s V).
ev_case'_z :
      eval E1 z -> eval E2 V -> eval (case' E1 E2 (\ x . E3 x)) V.

ev_case'_s :
      eval E1 (s V1') -> eval (E3 V1') V -> eval (case' E1 E2 (\ x . E3 x)) V.

ev_pair :
      eval E1 V1 -> eval E2 V2 -> eval (pair E1 E2) (pair V1 V2).

ev_fst : eval E (pair V1 V2) -> eval (fst E) V1.
ev_snd : eval E (pair V1 V2) -> eval (snd E) V2.

ev_app :
      eval E1 (lam (\ x . E1' x)) -> eval E2 V2 -> eval (E1' V2) V
   -> eval (app E1 E2) V.

ev_lam: eval (lam (\ x . E x)) (lam (\ x . E x)).


ev_letv :
      eval E1 V1 -> eval (E2 V1) V
   -> eval (letv E1 (\ x . E2 x)) V.

ev_letn :
      eval (E2 E1) V
   -> eval (letn E1 (\x . E2 x)) V.

ev_fix : eval (E (fix (\ x . E x))) V
      -> eval (fix (\ x . E x)) V.


% Values

value : exp T -> type.
v_z   : value z.
v_s   : value V -> value (s V).
v_l   : value (lam (\ x . E x)).
v_p   : value V1 -> value V2 -> value (pair V1 V2).


% Value soundness for type-preserving evaluations

vs: eval E V -> value V -> type.

vs_z    : vs ev_z v_z.

vs_s    : vs D P -> vs (ev_s D) (v_s P).

vs_lam  : vs (ev_lam) (v_l).

vs_app  : vs D3 P3
       -> vs (ev_app D1 D2 D3) P3.

vs_fst  : vs D' (v_p P1 P2)
	-> vs (ev_fst D') P1.

vs_snd  : vs D' (v_p P1 P2)
       -> vs (ev_snd D') P2.

vs_pair : vs D1 P1 -> vs D2 P2
	-> vs (ev_pair D1 D2) (v_p P1 P2).

vs_case'_z :   vs D2 P2
	   -> vs (ev_case'_z D1 D2) P2.

vs_case'_s :  vs D3 P3
	  -> vs (ev_case'_s D1 D3) P3.

vs_letv :  vs D2 P2
	-> vs (ev_letv D1 D2) P2.

vs_letn :  vs D2 P2
	-> vs (ev_letn D2) P2.


vs_fix :  vs D1 P1
       -> vs (ev_fix D1) P1.
