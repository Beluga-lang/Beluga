nat: type.
z: nat.

schema nctx = nat; 

rec cmatch_correct1 : {g:nctx} nat[g] -> nat[g] =
fn n  => case n of 
 | [g] z => [g] z
 | [g] #p .. => [g] #p ..

;


rec cmatch_correct2 : {g:nctx} nat[g] -> nat[g] =
fn n  => case n of 
 | [g] z => [g] z
 | [h,x:nat] x => [h,x:nat] x
 | [g,x:nat] #p .. => [g,x:nat] #p ..

;


rec cmatch_incorrect1 : {g:nctx} nat[g] -> nat[g] =
fn n  => case n of  %not
 | [g] z => [g] z
% | [h,x:nat] x => [h,x:nat] x
 | [g,x:nat] #p .. => [g,x:nat] #p ..

;

rec cmatch_incorrect2 : {g:nctx} nat[g] -> nat[g] =
fn n  => case n of %not
% | [g] z => [g] z
 | [h,x:nat] x => [h,x:nat] x
 | [g,x:nat] #p .. => [g,x:nat] #p ..

;

rec cmatch_incorrect3 : {g:nctx} nat[g] -> nat[g] =
fn n  => case n of %not
 | [g] z => [g] z
 | [h,x:nat] x => [h,x:nat] x
% | [g,x:nat] #p .. => [g,x:nat] #p ..
;
