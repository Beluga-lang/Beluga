% Mechanization of POPLMark Reloaded challenge:
% Section 2.2 Defining strong normalization
% [A. Hameer & B. Pientka (2019), syntax updated by D. Zackon (2025)]

inductive Sn : (Ψ:ctx) [Ψ ⊢ tm A[]] → ctype =
| Acc : {Ψ:ctx} {A:[ ⊢ ty]} {M:[Ψ ⊢ tm A[]]}
  ({M':[Ψ ⊢ tm A[]]} {S:[Ψ ⊢ step M M']} Sn [Ψ ⊢ M'])
  → Sn [Ψ ⊢ M];

rec mstep_sn : (Ψ:ctx) {M:[Ψ ⊢ tm A[]]} {M':[Ψ ⊢ tm A[]]} [Ψ ⊢ mstep M M'] → Sn [Ψ ⊢ M] → Sn [Ψ ⊢ M'] =
  / total sn (mstep_sn g m m' ms sn) /
  mlam _, M' ⇒ fn ms, sn ⇒ case ms of
  | [_ ⊢ m-refl] ⇒ sn
  | [_ ⊢ m-step S MS'] ⇒
    let Acc [_] [ ⊢ _] [_ ⊢ _] r = sn in
    let sn' = r [_ ⊢ _] [_ ⊢ S] in
    mstep_sn [_ ⊢ _] [_ ⊢ M'] [_ ⊢ MS'] sn'
  ;

inductive SN : (Ψ:ctx) [Ψ ⊢ tm A[]] → ctype =
| SNeu : SNe [Ψ ⊢ R] → SN [Ψ ⊢ R]
| SAbs : SN [Ψ, x:tm A[] ⊢ M] → SN [Ψ ⊢ abs \x. M]
| SRed : SNRed [Ψ ⊢ M] [Ψ ⊢ M'] → SN [Ψ ⊢ M'] → SN [Ψ ⊢ M]
| SInl : SN [Ψ ⊢ M] → SN [Ψ ⊢ inl _ M]
| SInr : SN [Ψ ⊢ M] → SN [Ψ ⊢ inr _ M]

and inductive SNe : (Ψ:ctx) [Ψ ⊢ tm A[]] → ctype =
| SVar : {#p:#[Ψ ⊢ tm A[]]} SNe [Ψ ⊢ #p]
| SApp : SNe [Ψ ⊢ R] → SN [Ψ ⊢ M] → SNe [Ψ ⊢ app R M]
| SCase : SNe [Ψ ⊢ M] → SN [Ψ, x:tm A[] ⊢ N1] → SN [Ψ, y:tm B[] ⊢ N2]
  → SNe [Ψ ⊢ match M (\x. N1) (\y. N2)]

and inductive SNRed : (Ψ:ctx) [Ψ ⊢ tm A[]] → [Ψ ⊢ tm A[]] → ctype =
| SBeta : {M:[Ψ, x:tm A[] ⊢ tm B[]]} SN [Ψ ⊢ N] → SNRed [Ψ ⊢ app (abs \x. M) N] [Ψ ⊢ M[…, N]]
| SAppl : SNRed [Ψ ⊢ R] [Ψ ⊢ R'] → SNRed [Ψ ⊢ app R M] [Ψ ⊢ app R' M]
| SCInl : SN [Ψ ⊢ M] → SN [Ψ, x:tm A[] ⊢ N1] → SN [Ψ, y:tm B[] ⊢ N2]
  → SNRed [Ψ ⊢ match (inl B[] M) (\x. N1) (\y. N2)] [Ψ ⊢ N1[…, M]]
| SCInr : SN [Ψ ⊢ M] → SN [Ψ, x:tm A[] ⊢ N1] → SN [Ψ, y:tm B[] ⊢ N2]
  → SNRed [Ψ ⊢ match (inr A[] M) (\x. N1) (\y. N2)] [Ψ ⊢ N2[…, M]]
| SRCase : SNRed [Ψ ⊢ M] [Ψ ⊢ M']
  → {N1:[Ψ, x:tm A[] ⊢ tm C[]]} {N2:[Ψ, y:tm B[] ⊢ tm C[]]}
  SNRed [Ψ ⊢ match M (\x. N1) (\y. N2)] [Ψ ⊢ match M' (\x. N1) (\y. N2)];

inductive SnRed : (Ψ:ctx) [Ψ ⊢ tm A[]] → [Ψ ⊢ tm A[]] → ctype =
| SnBeta : {M:[Ψ, x:tm A[] ⊢ tm B[]]} Sn [Ψ ⊢ N] → SnRed [Ψ ⊢ app (abs \x. M) N] [Ψ ⊢ M[…, N]]
| SnAppl : SnRed [Ψ ⊢ M] [Ψ ⊢ M'] → SnRed [Ψ ⊢ app M N] [Ψ ⊢ app M' N]
| SnCInl : Sn [Ψ ⊢ M] → Sn [Ψ, x:tm A[] ⊢ N1] → Sn [Ψ, y:tm B[] ⊢ N2]
  → SnRed [Ψ ⊢ match (inl B[] M) (\x. N1) (\y. N2)] [Ψ ⊢ N1[…, M]]
| SnCInr : Sn [Ψ ⊢ M] → Sn [Ψ, x:tm A[] ⊢ N1] → Sn [Ψ, y:tm B[] ⊢ N2]
  → SnRed [Ψ ⊢ match (inr A[] M) (\x. N1) (\y. N2)] [Ψ ⊢ N2[…, M]]
| SnCasR : SnRed [Ψ ⊢ M] [Ψ ⊢ M']
  → {N1:[Ψ, x:tm A[] ⊢ tm C[]]} {N2:[Ψ, y:tm B[] ⊢ tm C[]]}
  SnRed [Ψ ⊢ match M (\x. N1) (\y. N2)] [Ψ ⊢ match M' (\x. N1) (\y. N2)];