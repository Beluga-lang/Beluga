%
% Author: Brigitte Pientka
% Adapted from Twelf's POPL tutorial

% Types
LF tp  : type =
  | o   : tp
  | arr : tp -> tp -> tp
;
--name tp T.

% Intrinsically well-typed expressions
LF exp   : tp -> type =
  | app   : exp (arr A B) -> exp A -> exp B
  | ret   : value A -> exp A
and value : tp -> type =
  | lam   : {A:tp}(value A -> exp B) -> value (arr A B)
;

--name exp E.
% CPS expression (target of the cps translation)
% Intrinsically well-typed
LF contra : type =
  | capp   : cvalue (arr A B) -> cvalue A -> ccont B -> contra
  | cthrow : ccont A -> cvalue A -> contra
and cvalue : tp -> type =
  | clam   : (cvalue A -> ccont B -> contra) -> cvalue (arr A B)
and ccont  : tp -> type =
  | cconti : (cvalue A -> contra) -> ccont A
;

% Translating values to cvalues
% and expressions to.

schema ctx = some [a:tp] block x:value a, _t:cvalue a ;

rec cps : {g:ctx} [g |- value A] -> [g |- cvalue A] =
/ total v (cps g a v) /
mlam g => fn v =>  case v of
| [g |- #p.1] =>  [g |- #p.2]

| [g |- lam A2[] \x. E] =>
  let  [g, b:block (x:value A[] , _t:cvalue A[]), k:ccont B[] |-  E'[..,b.2,k]] =
    cpse [g, b:block x:value A2[] , _t:cvalue A2[] ]
         [g,b |- E[..,b.1]]
   in
     [g |- clam \v.\c. E']


and rec cpse : {g:ctx}[g |- exp A] -> [g,k:ccont A |-  contra] =
/ total e (cpse g a e)/
mlam g => fn e => case e of
| [g |- ret (V )] =>
  let [g |- V'] = cps [g] [g |- V ] in
    [g,k |- cthrow k (V'[..] )]

| [g |- app (E1 ) (E2 )] =>
  let [g,k:ccont (arr B A) |-  E1'[..,k]] = cpse [g] [g |- E1 ] in
  let [g,k:ccont B' |-  E2'[..,k]] = cpse [g] [g |- E2 ] in
   [g, k |- E1'[..,(cconti (\f. E2'[..,(cconti (\x. capp f x k))]))]]

;


let id_fun = [ |- lam o \x. ret x] ;

let r0 = cps [b:block (x:value o , _t:cvalue o)] [b:block (x:value o , _t:cvalue o) |-  b.1] ;
%{
rec test : Bool -> [b:block (x:value o , _t:cvalue o), k:ccont o |-  contra] =
fn x => let [b:block (x:value o , _t:cvalue o) |-  V' b] = cps [b:block (x:value o , _t:cvalue o)] [b |- b.1] in
	[b,k |- cthrow k (V' b)] ;

let r1' = test ttrue ;

let r1 = cpse [b:block (x:value o , _t:cvalue o)] [b |- ret b.1] ;

let r2 = cps [ ] [ |- lam o \x. ret x] ;

let r3 = cps [ ] [ |- (lam (arr (arr o o) o) (\x. app (ret x) (ret (lam o (\x. ret x )))))] ;

}%
%{

% Twelf version from POPL Tutorial

cps : value A -> cvalue A -> type.
% mode cps +X1 -X2.

cpse : exp A -> (ccont A -> contra) -> type.
% mode cpse +X1 -X2.

cps/lam : cps (lam (E:value A -> exp B))
              (clam (E':cvalue A -> ccont B -> contra))
           <- ({x:value A}{x':cvalue A} cps x x' -> cpse (E x) (E' x')).

cpse/app : cpse (app (E1:exp (B => A)) (E2:exp B))
                ([c:ccont A] E1' (cconti ([f:cvalue (B => A)]
                                            E2' (cconti([x:cvalue B]
                                                          capp f x c)))))
            <- cpse E1 (E1':ccont (B => A) -> contra)
            <- cpse E2 (E2':ccont B -> contra).
cpse/ret : cpse (ret (V:value A)) ([c:ccont A] cthrow c V')
            <- cps V (V':cvalue A).

% block cpsb : some {A : tp} block {x : value A} {x' : cvalue A} {d : cps x x'}.
% worlds (cpsb) (cps _ _) (cpse _ _).
% total (E V) (cps E _) (cpse V _).
}%
