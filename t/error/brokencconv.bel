% Types

LF tp: type =
| int: tp
| arr  : tp -> tp -> tp
| code : tp -> tp -> tp
| cross: tp -> tp -> tp
| unit :tp
;
--name tp T.


% Target language
LF target: tp -> type =
| bottom: target T
| tunit : target unit
| tfst  : target (cross T S) -> target T
| tsnd  : target (cross T S) -> target S
| tpair : target T -> target S -> target (cross T S)
| tapp  : target (code T S) -> target T -> target S
| tlam  : (target T -> target S) -> target (code T S)
| tlet  : target T -> (target T -> target S) -> target S
% We write E for the type of the environment
| tpack : {E:tp} target (cross (code (cross T E) S) E)
       -> target (arr T S)
| topen : target (arr T S)
       -> ({e:tp} target (cross (code (cross T e) S) e) -> target S')
       -> target S'
| tz: target int
| tsuc: target int -> target int
;
--name target Q.

% Natural Numbers
LF nat: type =
| z:nat
| suc: nat -> nat
;
--name nat N.

%{
%  member N R P is true iff
%   P is the (N-1)th member of R, counting from the head.
}%
LF member_tp: nat -> tp -> tp -> type =
| m_last: member_tp z P (cross P R')
| m_cons: member_tp N P R'
	-> member_tp (suc N) P (cross R R')
;





% Error (Reconstruction): unbound data-level variable (ordinary or meta-variable) or constructor:
% makeproj return the nth project of pair y
% makeproj n = tfst([..]. (tfst y))
rec makeproj: {N: [ |- nat]} [ |- member_tp N R Q] -> [xenv:(target Q) |-  target (R[])] =
mlam N  => fn p => case [ |- N] of
| [ |- z] => let [ |- m_last] = p in
      	     [xenv:(target Q) |-  (tfst xenv)]
| [ |- suc M] =>
  let [ |- (m_cons L)] : [ |- member_tp (suc N) R (cross T' S)] = p in
  let [xenv:target S  |-  F] = makeproj [ |- M] [ |- L] in
      [xenv:target (cross T' S) |-  F[(tsnd xenv)]]
;
