% Proof that a big step evaluation relation for lambda terms is deterministic
% (An an argument for using refl for equality instead of algorithmic equality)
% Author: Andrew Cave

exp : type.
lam : (exp -> exp) -> exp.
app : exp -> exp -> exp. #infix app 1 left.

eq : exp -> exp -> type. #infix eq 3.
refl : M eq M.

notLam : exp -> type. #postfix notLam 2.
notLam : (M app N) notLam.

eval : exp -> exp -> type. #infix eval 1 left.
eval_lam : ({x:exp} x eval x -> (x notLam) -> (M x) eval (N x))
           -> (lam M) eval (lam N).
eval_app1 : M eval (lam M') -> (M' N) eval R -> (M app N) eval R.
eval_app2 : M eval M' -> M' notLam  -> N eval N' -> (M app N) eval (M' app N').

schema evctx = block x:exp, u:x eval x, _t:x notLam;

rec deterministic : (g:evctx) [g |- (M ..) eval (R ..)] -> [g |- (M ..) eval (R' ..)]
-> [g |- (R ..) eq (R' ..)] =
fn d => fn f =>
case d of
| [g |- eval_app2 (D1 ..) (NL ..) (D2 ..)] =>
  (case f of
    | [g |- eval_app2 (F1 ..) (NL' ..) (F2 ..)] =>
      let [g |- refl] = deterministic [g |- D1 ..] [g |- F1 ..] in
      let [g |- refl] = deterministic [g |- D2 ..] [g |- F2 ..] in
      [g |- refl]

    | [g |- eval_app1 (F1 ..) (F2 ..)] =>
      let [g |- refl] = deterministic [g |- D1 ..] [g |- F1 ..] in
       impossible [g |- NL ..] in [g])

 | [g |- eval_lam (\x.\u.\v. D1 .. x u v)] =>
  let [g |- eval_lam (\x.\u.\v. F1 .. x u v)] = f in
  let [g,b:block x:exp, v:x eval x, _t:x notLam  |-  refl] =
    deterministic
     [g,b:block x:exp, v:x eval x, _t:x notLam  |-  D1 .. b.1 b.2 b.3]
     [g,b |- F1 .. b.1 b.2 b.3] in
  [g |- refl]

| [g |- eval_app1 (D1 ..) (D2 ..)] : [g |- (((M ..) app (N ..)) eval (R ..))] =>
  (case f of
    | [g |- eval_app1 (F1 ..) (F2 ..)] =>
      let [g |- refl] = deterministic [g |- D1 ..] [g |- F1 ..] in
      deterministic [g |- D2 ..] [g |- F2 ..]

    | [g |- eval_app2 (F1 ..) (NL ..) (F2 ..)] =>
      let [g |- refl] = deterministic [g |- D1 ..] [g |- F1 ..] in
      impossible [g |- NL ..] in [g])

| [g |- #p.2 ..] => let [g |- #q.2 ..] = f in [g |- refl]
;


