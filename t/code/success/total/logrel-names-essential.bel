% Completeness/soundness of algorithmic equality for declarative equality for name term language.

nm : type.
leaf : nm.
nmbin : nm -> nm -> nm.

tp : type.         --name tp T.
tp/nm :  tp.
tp/unit : tp.
prod : tp -> tp -> tp.
arr: tp -> tp -> tp.

tm : type.          --name tm E.
unit : tm.
pair : tm -> tm -> tm.
fst : tm -> tm. % ???
snd : tm -> tm. % ???
name : nm -> tm.
bin : tm -> tm -> tm.
app : tm -> tm -> tm.
lam : (tm -> tm) -> tm.

step : tm -> tm -> type.  --name step S.
step/beta : step (app (lam M) N) (M N).
step/app : step M M' -> step (app M N) (app M' N). % stepapp
step/betaprod1 : step (fst (pair M1 M2)) M1.
step/betaprod2 : step (snd (pair M1 M2)) M2.
step/proj1 : step M M' -> step (fst M) (fst M').
step/proj2 : step M M' -> step (snd M) (snd M').
step/bin : step M1' M1 -> step M2' M2 -> step (bin M1' M2') (bin M1 M2).
step/bin1 : step M1' M1 -> step (bin M1' M2) (bin M1 M2).
step/bin2 : step M2' M2 -> step (bin M1 M2') (bin M1 M2).

oft : tm -> tp -> type.
oft/bin : oft M1 tp/nm -> oft M2 tp/nm -> oft (bin M1 M2) tp/nm. % need???


mstep : tm -> tm -> type.  --name mstep MS.
refl : mstep M M.
trans1 : step M M' -> mstep M' M'' -> mstep M M''.

% algorithmic (and path) equivalence and apartness
algeqn : tm -> tm -> tp -> type.
algeqr : tm -> tm -> tp -> type.
algapn : tm -> tm -> tp -> type.
algapr : tm -> tm -> tp -> type.

algequnit : algeqn M N tp/unit.
algeqname : mstep M P -> mstep N Q -> algeqr P Q tp/nm -> algeqn M N tp/nm.
algeqarr : ({x:tm}{xx:algeqr x x T} algeqn (app M x) (app N x) S) -> algeqn M N (arr T S).
algeqprod : algeqn (fst M) (fst N) T1 -> algeqn (snd M) (snd N) T2 -> algeqn M N (prod T1 T2).
% TODO: do we need algeqbin?
% algeqbin : algeqn M1 N1 tp/nm -> algeqn M2 N2 tp/nm -> algeqn (bin M1 M2) (bin N1 N2) tp/nm.

algeqapp : algeqr M1 M2 (arr T S) -> algeqn N1 N2 T -> algeqr (app M1 N1) (app M2 N2) S.
algeqproj1 : algeqr P Q (prod T1 T2) -> algeqr (fst P) (fst Q) T1.
algeqproj2 : algeqr P Q (prod T1 T2) -> algeqr (snd P) (snd Q) T2.
algeqbinp : algeqr P1 Q1 tp/nm -> algeqr P2 Q2 tp/nm -> algeqr (bin P1 P2) (bin Q1 Q2) tp/nm.
% TODO: why is QAP-Name(Base) missing in the original???
algeqnamep : algeqr (name n) (name n) tp/nm.
% algeqr-trans : algeqr P Q T -> algeqr Q R T -> algeqr P R T.

algapunit : algapn M N tp/unit.
algapname : mstep M P -> mstep N Q -> algapr P Q tp/nm -> algapn M N tp/nm.
algaparr : ({x:tm}{y:tm}{xy:algeqr x y T}{yx:algeqr y x T} algapn (app M x) (app N y) S) -> algapn M N (arr T S).
algapbin1 : algapn M1 N1 tp/nm -> algapn (bin M1 M2) (bin N1 N2) tp/nm.
algapbin2 : algapn M2 N2 tp/nm -> algapn (bin M1 M2) (bin N1 N2) tp/nm.
algappair : algapn (fst M) (fst N) T1 -> algapn (snd M) (snd N) T2 -> algapn M N (prod T1 T2).

algapapp : algapr P Q (arr T S) -> algeqn M N T -> algapr (app P M) (app Q N) T2.
algapproj1 : algapr P Q (prod T1 T2) -> algapr (fst P) (fst Q) T1.
algapproj2 : algapr P Q (prod T1 T2) -> algapr (snd P) (snd Q) T2.
algapbin : algapr P1 Q1 tp/nm -> algapr P2 Q2 tp/nm -> algapr (bin P1 P2) (bin Q1 Q2) tp/nm.
% schema tctx = some [t:tp] block x:tm, y:oft x t, z:algeqr x x t;

schema rctx = some [t:tp] block x:tm, xt:oft x t, xx:algeqr x x t
                        + block x:tm, y:tm, xt:oft x t, yt:oft y t, xy:algapr x y t, yx:algapr y x t;


% Logical equivalence. _|-_~~_:_ in the paper

tmpair : type.
sim : tm -> tm -> tmpair.
--infix sim 5 right.

stratified Log : (g:rctx) [g |- tmpair] -> [ |- tp] -> ctype =
| LogUnit : Log [g |- M sim N ] [|- tp/unit]
| LogName : [g |- algeqn M N tp/nm]
            -> Log [g |- M sim N ] [|- tp/nm]
| LogProd : Log [g |- (fst M) sim (fst N) ] [|- T1]
            -> Log [g |- (snd M) sim (snd N) ] [|- T2]
            -> Log [g |- M sim N ] [|- prod T1 T2]
| LogArr  : {M1:[g |- tm]}{M2:[g |- tm]}
             ({h:rctx} {$R:[h |- g]} {N1:[h |- tm]}{D1:[h |- oft N1 T[]]}{N2:[h |- tm]}{D2:[h |- oft N2 T[]]}
                Log [h |- N1 sim N2] [ |- T]
              -> Log [h |- (app M1[$R] N1) sim (app M2[$R] N2)] [|- S])
            -> Log [g |- M1 sim M2] [ |- arr T S]
;

rec mstep_bin : (g:rctx) [g |- mstep M1 N1] -> [g |- mstep M2 N2] -> [g |- mstep (bin M1 M2) (bin N1 N2)] =
/ total s1 (mstep_bin g m1 n1 m2 n2 s1 s2) /
? ;


%%


eqtm : tm -> tm -> type.
refltm : eqtm M M.

schema ctx = some [t:tp] block x:tm,y:oft x t;

% % Logical equivalence of substitutions. Written _|-s_simsim_:_ in the paper
inductive LogSub : {g0:ctx}(h:rctx){$S1: [h |- g0]}{$S2: [h |- g0]}
ctype  =
| Nil : LogSub [] [h |- ^] [h |- ^]
| Dot : LogSub [g0] [h |- $S1] [h |- $S2]
       -> Log [h |- M1 sim M2] [ |- R]
       -> {D1:[h |- oft M1 R[]]} {D2:[h |- oft M2 R[]]}
         LogSub [g0,b:block x:tm,y:oft x R[]] [h |- $S1, <M1;D1>] [h |- $S2, <M2;D2>]
;



rec lookup : {g:ctx}{#p:[g |- block (x:tm, u: oft x Q[])]} LogSub [g] [h |- $S1] [h |- $S2]
   -> Log [h |- #p.1[$S1] sim #p.1[$S2]] [|- Q] =
 / total g (lookup g) /
?
;

% Tiny fundamental theorem (Crary's fundamental theorem I)
rec thm' : [g |- oft M T[]] -> LogSub [g] [h |- $S1] [h |- $S2] -> Log [h |- M[$S1] sim M[$S2]] [|- T] =
/ total d (thm' g h m t s1 s2 d) /
fn d, s =>
let s : LogSub [g] [h |- $S1] [h |- $S2] = s in
case d of
| [g |- oft/bin D1 D2] =>
  let ih1 = thm' [g |- D1] s in
  let ih2 = thm' [g |- D2] s in
  let LogName [h |- algeqname MS11 MS12 A1] = ih1 in
  let LogName [h |- algeqname MS21 MS22 A2] = ih2 in
  let [h |- MS1] = mstep_bin [h |- MS11] [h |- MS21] in
%  let s2 = mstep_bin [h |- MS12] [h |- MS22] in
 ?
%  let [h |- MS1] = s1 in ?

| [g |- #p.2] => lookup [g] [g |- #p] s
;
