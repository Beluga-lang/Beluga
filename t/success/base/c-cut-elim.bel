i : type.
--name i S.
o : type.
--name o A.

imp    : o -> o -> o.
% not    : o -> o.
true   : o.
% forall : (i -> o) -> o.

hyp  : o -> type.  % Hypotheses (left)
conc : o -> type.  % Conclusion (right)

axiom   : (hyp A -> conc A).
truer   : conc (true).
impr    : (hyp A -> conc B) -> conc (imp A B).
impl    : conc A -> (hyp B -> conc C) -> (hyp (imp A B) -> conc C).
% notr    : ({p:o}hyp A -> conc p) -> conc (not A).
% notl    : conc A -> (hyp (not A) -> conc C).
% forallr : ({a:i} conc (A a)) -> conc (forall (\x. A x)).
% foralll : {T:i}(hyp (A T) -> conc C) -> (hyp (forall (\x . A x)) -> conc C).

schema ctx = some [a: o] hyp a + i + o;

rec ca : {g:ctx}{A:[g |- o]} [g |- conc (A[..])] -> [g, u: hyp (A[..]) |-  conc (C[..])]
%       -> (conc (C[..]))[g] =
       -> [g |- (conc true)] =
% / total e (ca _ _ _ e)/
mlam g => mlam A' => fn d => fn e => case e of
%  | [g, h:hyp (B[..])] axiom (H1[..]) =>  [g] axiom (H1[..])
%
%  | [g, h:hyp (A[..])] axiom h  => d
%
%  |[g, h:hyp (A[..])] impr (\h1. E2[..] h1 h) =>
%    let [g] D[..]  = d in
%    let [g, h1: hyp (B1[..])] E2'[..] h1 =
%      ca [g, h1: hyp _ ] <g,h1. A[..] >
%         ([g, h1 ] D[..] )
%         ([g, h1, h] E2[..] h1 h)
%    in
%     [g] impr (\h1. E2'[..] h1)
%
%  | [g, h:hyp (A[..])] impl (E1[..] h) (\h2. E2[..] h2 h) (H[..]) =>
%    let [g] D[..] = d in
%    let [g] E1'[..] = (ca [g] <g . A[..] > d) ([g, h] E1[..] h) in
%    let [g,h2: hyp (B2[..])] E2'[..] h2 =
%        ca [g, h2: hyp _  ] <g,h2 . A[..] > ([g,h2] D[..]) ([g, h2, h] E2[..] h2 h)
%    in
%     [g] impl (E1'[..]) (\h2. E2'[..] h2) (H[..])
%
%  | [g, h:hyp (A[..])] notr (\p.\h1. E1[..] h p h1) =>
%    let [g] D[..] = d in
%    let [g, p:o, h1: hyp (B1[..])] E1'[..] p h1 =
%      ca [g, p:o, h1:hyp _ ] <g,p,h1 . A[..]>
%         ([g,p,h1] D[..]) ([g,p,h1,h] E1[..] h p h1)
%    in
%      [g] notr (\p.\h1. E1'[..] p h1)
%
%  | [g, h:hyp (A[..])] notl (E1[..] h) (H[..]) =>
%    let [g] E1'[..] = (ca [g] <g . A[..] > d) ([g, h] E1[..] h) in
%      [g] notl (E1'[..]) (H[..])
%
%  | [g,h: hyp (A[..])] truer => [g] truer
%
%  | [g,h:hyp (A[..])] forallr (\a. E1[..] a h) =>
%    let [g] D[..] = d in
%    let [g,a:i] E1'[..] a =
%      ca [g, a:i] <g,a . A[..] >  ([g,a] D[..]) ([g,a, h] E1[..] a h)
%    in
%     [g] forallr \a. E1'[..] a
%
%  | [g, h:hyp (A[..])] foralll (T[..]) (\h1.E1[..] h h1) (H[..]) =>
%    let [g] D[..] = d in
%    let [g,h1: hyp _ ] E1'[..] h1 =
%      ca [g,h1: hyp _ ] <g,h1. A[..]> ([g,h1] D[..] ) ([g,h1,h] E1[..] h h1)
%    in
%      [g] foralll (T[..]) (\h1. E1'[..] h1) (H[..])

 | [g, h:hyp (imp (A1[..]) (A2[..])) |-  impl (GGGGG[..]) (\h2. HHHHH[..]) h] => % impl (E1 [..] %{ h }% ) (\h2. WWWW) %{ (\h2. E2[..] h h2) }% h  =>
%
%    let [g] impr \h1. D2[..] h1  = d in
%    let [g] E1'[..] = (ca [g] <g. A'[..] > d) ([g,h ] E1[..] h) in
%    let [g,h2: hyp (A2[..])] E2'[..] h2 =
%      ca [g, h2: hyp (A2[..])]
%        <g,h2. A'[..] >  ([g,h2]  impr \h1. D2[..] h1) ([g,h2,h] E2[..] h h2) in
%    let [g] D2'[..] = ca [g] <g . A1[..] > ([g] E1'[..] ) ([g,h1] D2[..] h1) in
%      ca [g] <g . A2[..] > ([g] D2'[..] ) ([g,h2] E2'[..] h2)
%
     [g |- truer]

%  | [g, h:hyp (not (A1[..]))] notl (E1[..] h) h =>
%    let [g] notr \p.\h2. (D1[..] p h2)  = d in
%    let [g] F1[..] = (ca [g] <g . A'[..] > d ) ([g,h] E1[..] h) in
%    let [g,p:o] F2[..] p = ca [g,p:o] <g, p. A1[..] > ([g,p] F1[..]) ([g,p,h1] D1[..] p h1) in
%      [g] F2[..] _
%
%  | [g, h:hyp (forall (\x .  A1))] foralll (T[..]) (\h1. E1[..] h h1) h =>
%    let [g] forallr \a. D1[..] a = d in
%    let [g,h2: hyp _ ]  E1'[..] h2 =
%      ca [g,h2: hyp _ ] <g,h2. A'[..]>  ([g,h2] forallr \a. D1[..] a)   ([g, h2, h] E1[..] h h2)
%    in
%     ca [g] <g. A1[..] (T[..])> ([g] D1[..] (T[..])) ([g,h2] E1'[..] h2)
%
%  | [g, h:hyp (A[..])] E[..] h =>
%    case d of
%     | [g] axiom (H[..]) =>   [g] E[..] (H[..])
%     | [g] impl (D1[..] ) (\h2. D2[..] h2) (H[..]) =>
%       let [g,h2: hyp (B2[..])] D2'[..] h2 = ca [g,h2: hyp _ ] <g,h2 . A[..] > ([g,h2] D2[..] h2) ([g,h2,h] E[..] h) in
%        [g] impl (D1[..]) (\h2. D2'[..] h2) (H[..])
%
%     | [g] notl (D1[..]) (H[..]) => [g] notl (D1[..] ) (H[..])
%
%     | [g] foralll (T[..]) (\h1. D1[..] h1) (H[..]) =>
%       let [g,h1: hyp _ ] D1'[..] h1 = ca [g, h1:hyp _ ] <g,h1. A[..]> ([g,h1] D1[..] h1) ([g,h1,h] E[..] h) in
%         [g] foralll (T[..] ) (\h1. D1'[..] h1) (H[..])
;
