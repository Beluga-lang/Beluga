exp: type. %name exp E.
lam: (exp -> exp) -> exp.
app: exp -> exp -> exp.
z: exp.
s: exp -> exp.

schema ctx = exp;

datatype IsExp : {g:ctx} [g |- exp] -> ctype % positive 
=
| IsZero : (g:ctx) IsExp [g] [g |- z]
| IsSuc : (g:ctx) IsExp [g] [g |- M ..] -> IsExp [g] [g |- s (M ..)]
| IsVar : (g:ctx) IsExp [g] [g |- #p..]
| IsApp: (g:ctx) IsExp [g] [g |- M..] -> IsExp [g] [g |- N ..]
         -> IsExp [g] [g |- app (M ..) (N ..)]

| IsLam: (g:ctx) IsExp [g,x:exp] [g,x |- M .. x] -> IsExp [g] [g |- lam \x. M .. x ]
;


rec copy : (g:ctx)IsExp [g] [g |- M..] -> IsExp [g] [g |- M ..] =
fn e => case e of
 | IsZero => IsZero
 | IsSuc m => IsSuc (copy m)
| IsLam m => let m' = copy m in IsLam m
| IsApp m n =>
  let m' = copy m in
  let n' = copy n in IsApp m' n'

;
