# -*- coding: utf-8; indent-tabs-mode: nil; -*-

# Use ocamlfind to manage library linking
USE_OCAMLFIND = true

# Set up the ocamlfind flags
OCAMLFINDFLAGS = -syntax camlp4o

# The ocamlfind packages we use
OCAMLPACKS[] =
        camlp4
        extlib
        oUnit
        ulex

# Compile with debugging options?  This enables:
#
# 1. Pattern match failure warnings
# 2. Debugging information in compiled code (-g)
# 3. Profiling information in compiled code (-p)
OCAMLFLAGS = $(if $(DEBUG), -w Ae  -warn-error Ap -g \
                          , -w Aep -warn-error A)

# Flags to pass to the native-code compiler
# Explanation:
#       -noassert       (turn off assertions)
#       -inline 100     (aggressive inlining)
OCAMLOPTFLAGS  = -noassert -inline 100
OCAMLOPTFLAGS += $(if $(DEBUG), -p)

# Compile to byte code?
BYTE_ENABLED   = true

# Compile to native code?
# NATIVE_ENABLED = true

# Declare a phony clean target
.PHONY: core clean frontend interpreter test

# Map the src dir onto the build dir
vmount(-l, src, .build)

# Include the fake .build subdirectory
.SUBDIRS: .build

.DEFAULT: .PHONY/src/.DEFAULT :effects: build
        $(if $(not $(file-exists bin)),               \
          $(mkdir bin))                               \
        $(if $(not $(file-exists bin/interpreter)),   \
          $(symlink .build/tools/interpreter/interpreter, bin/interpreter))

clean: .PHONY/src/clean
        rm $(filter-proper-targets $(ls R, .))
        rm $(filter %.omc,         $(ls R, .))
        $(if $(file-exists bin), $(rmdir -r bin))

