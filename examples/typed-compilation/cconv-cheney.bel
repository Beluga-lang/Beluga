term: type.
lam   : (term -> term) -> term.
app   : term -> term -> term.


target: type.

tunit: target.
tfst: target -> target.
tsnd: target -> target.
tpair: target -> target -> target.
tapp : target ->  target ->  target.
tabs : (target -> target) -> target.
tlet :  target -> (target -> target) -> target.

schema tctx = target ;
schema sctx = term ;

%{ We distinguish between source language and target language;
   the target code is either completely closed;
   this is the environment passing variant; the abstraction in the
   target language will always expect a tuple where the first argument
   is the code and followed by other arguments representing the environment.
}%
rec cconv : (g:sctx)(g':tctx) [g |- term] -> [g' |-  target] -> [g' |-  target] =
fn t => fn e => case t of
| [h,y:term |-  y]    => let [g' |-  E] = e in [g' |-  tfst (E )]
| [h,y:term |-  #p[..]] =>
    (let [g' |-  E] = e in
     cconv [h |- #p ]  [g' |-  tsnd (E )] )

 | [h |- app E1 (E2 )] =>
  let [g' |-  E] = e in
  let [g' |-  T1] = cconv [h |- E1] [g' |-  E ] in
  let [g' |-  T2] = cconv [h |- E2] [g' |-  E ] in
    [g' |-  tlet (T1 ) (\c. (tapp (tfst c) (tpair (T2[..] ) (tsnd c))))]

| [g |- lam \x. F] =>
  let [y:target |- T] = cconv [g,x:term |-  F] [y:target |-  y] in
  let [g' |-  E] = e in
    [g' |-  tpair (tabs \y. T[y]) (E )]
;


% When given a closed term, we produce a closed target
rec cconv_main: [ |- term] -> [ |- target] =
  fn t => cconv t [ |- tunit] ;


let t' = cconv [ |- lam \x. x] [ |- tunit];
% ==> [] tpair (tabs (\y. tfst y)) tunit
%  where tabs \y. tfst y  : exist \X. ((T1 * X) -> T2) * X
%  and tunit provides a possible environment, namely the empty environment


let t1'' = cconv [ |- lam \x. (lam \y. x)] [ |- tunit];
% [] tpair (tabs (\y. tpair (tabs (\y. tfst (tsnd y))) y)) tunit
let t2'' = cconv [ |- lam \x. (lam \y. y)] [ |- tunit];

let t2 = cconv [x2:term,x1:term |-  x2] [y:target |-  y] ;

let t1a = cconv [x:term |-  x] [y:target |-  y];
let t1b = cconv [x2:term,x1:term |-  x1] [y:target |-  y];

let t3 = cconv [ |- lam (\x. (lam (\y. app x y)))] [ |- tunit];
%{
  [ ] lam \x. lam \y. (app x y)  : term ((Ty => T) => Ty => T)
 ===>  [] tpair (tabs (\y. tpair (tabs (\y. tlet (tfst (tsnd y))
						 (\c. tapp (tfst c)
							   (tpair
								(tfst
								     y)
								(tsnd
								     c)))))
				 y)) tunit




   : target ( ( )
             *
             tunit )

}%


let t4 = cconv [ |- lam (\x. (lam (\y. app y x)))] [ |- tunit];
let t5 = cconv [ |- lam (\x. (lam (\y. app y x)))] [ |- tunit];

%{ How to make it type-preserving? -- Find sensible representation for
   abstractions.
}%
