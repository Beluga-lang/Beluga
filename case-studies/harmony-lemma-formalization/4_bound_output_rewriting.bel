% Predicate about syntactic equivalence of processes involved in bound output transitions:
% ex_bout_rew Q X Q' holds iff there exist R, S, z, x_1,...,x_n such that Q cong (nu z)(nu x_1)...(nu x_n)((p_out X z R) p_par S) and
% (Q' z) cong (nu x_1)...(nu x_n)((R z) p_par (S z)).
% We encode this type via two constructors: one representing the base case without restrictions, and one representing the inductive case
% in which Q cong (nu x)P and Q' cong (nu x)P', where ex_bout_rew P X P' holds inductively.

LF ex_bout_rew: proc → names → (names → proc) → type =
  | bout_base: Q cong (p_res \z.((p_out X z (R z)) p_par (S z)))
    → ({y:names} (Q' y) cong ((R y) p_par (S y))) → ex_bout_rew Q X Q'
  | bout_ind: Q cong (p_res P) → ({y:names} (Q' y) cong (p_res (P' y)))
    → ({w:names} ex_bout_rew (P w) X \y.(P' y w)) → ex_bout_rew Q X Q'
;


% We prove the lemma which states that processes involved in bound output transitions (bstep Q (b_out X) Q')
% can be rewritten (up to congruence) in a canonic way (ex_bout_rew Q X Q').
% Before, we need four additional lemmas which prove the result in particular cases.

rec bs_out_rew_par1: (g:ctx) {R:[g ⊢ proc]} [g ⊢ ex_bout_rew Q X \y.Q'[..,y]]
  → [g ⊢ ex_bout_rew (Q p_par R) X \y.(Q'[..,y] p_par R[..])] =
/ total d (bs_out_rew_par1 _ _ _ _ _ d) /
mlam R ⇒ fn d ⇒ case d of
   | [g ⊢ bout_base C1 \y.C2[..,y]] ⇒
     [g ⊢ bout_base (c_trans (c_par C1) (c_trans sc_ext_par (c_res \z.(c_sym par_assoc))))
     \y.(c_trans (c_par C2[..,y]) (c_sym par_assoc))]
   | [g ⊢ bout_ind C1 (\y.C2[..,y]) (\w.D1[..,w])] ⇒ let [g,w:names ⊢ D2[..,w]]
     = bs_out_rew_par1 [g,w:names ⊢ R[..]] [g,w:names ⊢ D1[..,w]] in
 	   [g ⊢ bout_ind (c_trans (c_par C1) sc_ext_par)
       (\y.(c_trans (c_par C2[..,y]) sc_ext_par)) (\w.D2[..,w])]
;

rec bs_out_rew_par2: (g:ctx) {R:[g ⊢ proc]} [g ⊢ ex_bout_rew Q X \y.Q'[..,y]]
  → [g ⊢ ex_bout_rew (R p_par Q) X \y.(R[..] p_par Q'[..,y])] =
/ total d (bs_out_rew_par2 _ _ _ _ _ d) /
mlam R ⇒ fn d ⇒ case d of
   | [g ⊢ bout_base C1 \y.C2[..,y]] ⇒ [g ⊢ bout_base (c_trans par_comm
     (c_trans (c_par C1) (c_trans sc_ext_par (c_res \z.(c_sym par_assoc)))))
     \y.(c_trans par_comm (c_trans (c_par C2[..,y]) (c_sym par_assoc)))]
   | [g ⊢ bout_ind C1 (\y.C2[..,y]) (\w.D1[..,w])] ⇒ let [g,w:names ⊢ D2[..,w]]
     = bs_out_rew_par2 [g,w:names ⊢ R[..]] [g,w:names ⊢ D1[..,w]] in
       [g ⊢ bout_ind (c_trans par_comm (c_trans (c_par C1) (c_trans sc_ext_par
       (c_res \w.par_comm)))) (\y.(c_trans par_comm (c_trans (c_par C2[..,y])
       (c_trans sc_ext_par (c_res \w.par_comm))))) (\w.D2[..,w])]
;

rec bs_out_rew_res: (g:ctx) [g,z:names ⊢ ex_bout_rew Q[..,z] X[..] \y.Q'[..,z,y]]
  → [g ⊢ ex_bout_rew (p_res \z.Q[..,z]) X \y.(p_res \z.Q'[..,z,y])] =
/ total d (bs_out_rew_res _ _ _ _ d) /
fn d ⇒ case d of
   | [g,z:names ⊢ bout_base C1[..,z] \y.C2[..,z,y]] ⇒ [g ⊢ bout_ind (c_res \z.C1[..,z])
     (\y.(c_res \z.C2[..,z,y])) (\z.(bout_base c_ref \y.c_ref))]
   | [g,z:names ⊢ bout_ind C1[..,z] (\y.C2[..,z,y]) (\w.D1[..,z,w])] ⇒
     let [g,z:names ⊢ D2[..,z]] = bs_out_rew_res [g,z:names,w:names ⊢ D1[..,z,w]] in
       [g ⊢ bout_ind (c_res \z.C1[..,z]) (\y.(c_res \z.C2[..,z,y])) (\z.D2[..,z])]
;

rec bs_out_rew_open: (g:ctx) [g,z:names ⊢ ex_fout_rew Q[..,z] X[..] z Q'[..,z]]
  → [g ⊢ ex_bout_rew (p_res \z.Q[..,z]) X \z.Q'[..,z]] =
/ total d (bs_out_rew_open _ _ _ _ d) /
fn d ⇒ case d of
   | [g,z:names ⊢ fout_base C1[..,z] C2[..,z]] ⇒
     [g ⊢ bout_base (c_res \z.C1[..,z]) \z.C2[..,z]]
   | [g,z:names ⊢ fout_ind C1[..,z] C2[..,z] \w.D1[..,w,z]] ⇒
     let [g,z:names ⊢ D2[..,z]] = bs_out_rew_open [g,z:names,w:names ⊢ D1[..,z,w]] in
       [g ⊢ bout_ind (c_trans (c_res \z.C1[..,z]) sc_ext_res) (\z.C2[..,z]) (\w.D2[..,w])]
;


rec bs_out_rew: (g:ctx) [g ⊢ bstep Q (b_out X) \y.Q'[..,y]]
   → [g ⊢ ex_bout_rew Q X \y.Q'[..,y]] =
/ total b (bs_out_rew _ _ _ _ b) /
fn b ⇒ case b of
   | [g ⊢ bs_par1 B1]:[g ⊢ bstep (P p_par R) (b_out X) \y.(P' p_par R[..])] ⇒
     let [g ⊢ D1] = bs_out_rew [g ⊢ B1] in
     let [g ⊢ D2] = bs_out_rew_par1 [g ⊢ R] [g ⊢ D1] in [g ⊢ D2]
   | [g ⊢ bs_par2 B2]:[g ⊢ bstep (R p_par P) (b_out X) \y.(R[..] p_par P')] ⇒
     let [g ⊢ D1] = bs_out_rew [g ⊢ B2] in
     let [g ⊢ D2] = bs_out_rew_par2 [g ⊢ R] [g ⊢ D1] in [g ⊢ D2]
   | [g ⊢ bs_res \z.B[..,z]] ⇒
     let [g,z:names ⊢ D1[..,z]] = bs_out_rew [g,z:names ⊢ B[..,z]] in
     let [g ⊢ D2] = bs_out_rew_res [g,z:names ⊢ D1[..,z]] in [g ⊢ D2]
   | [g ⊢ bs_open \z.F[..,z]] ⇒
     let [g,z:names ⊢ D1[..,z]] = fs_out_rew [g,z:names ⊢ F[..,z]] in
     let [g ⊢ D2] = bs_out_rew_open [g,z:names ⊢ D1[..,z]] in [g ⊢ D2]
;
