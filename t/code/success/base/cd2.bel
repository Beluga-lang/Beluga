nat : type.
z   : nat.
suc : nat -> nat.

list : nat -> type.
cons : list N -> list (suc N).
nil : list z.


rec conslist : {G':[ |- nat]} [ |- list (suc G')] -> [ |- nat] = mlam G => fn e =>
  case e of
  | [ |- cons T]          => [ |- z]
;

rec conslist2 : {G':[ |- nat]} [ |- list (suc G')] -> [ |- nat] = mlam G => fn e =>
  case e of --not
  | [ |- cons (cons (cons T))]          => [ |- z]
;


rec conslist3 : [ |- list (suc G')] -> [ |- nat] = fn e =>
  case e of
  | [ |- cons (cons T)]          => [ |- z]
  | [ |- cons nil]          => [ |- z]
;


% let blah = conslist2 <. z> ([] cons nil);

--not
rec badlist : {G':[ |- nat]} [ |- list (suc G')] -> [ |- nat] = mlam G => fn e =>
  case e of
  | [ |- nil]          => [ |- z]
;
