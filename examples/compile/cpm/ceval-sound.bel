%%% Soundness of Evaluation under Continuations
%%% Author: Frank Pfenning

%% %{ Main Lemma:
%%    If   C :: K # (ev E) =>* (answer W)
%%    then for some V
%%         D :: eval E V
%%    and  C' :: K # (return V) =>* (answer W)
%%    where C' is a subderivation of C.
%%
%% Proof: By complete induction on the structure of C.
%%
%% Note, we do not explicitly reason about the fact that
%% C' is a subderivation of C. This could be added as an extra argument. 
%%
%% Interesting part: We avoid the use of existentials by defining first a
%% constant eval_step (see below).
%% }%

eval_step: exp -> cont -> val -> type.

result : eval_step E K W 
      <- mstep (st K (return V))  (answer W) 
      <- eval E V.

rec csd : 
          (mstep (st K (ev E)) (answer W) )[ ]
       -> (eval_step E K W )[ ] = 
fn c => case c of 

  [ ] << C' st_z => [ ] result ev_z C'
 
| [ ] << C1 st_s => 
  let [ ] result D1 (<< C' st_return)  = csd ([ ] C1) in 
   [ ] result (ev_s D1) C'

 | [ ] << C1 st_match  => 
   % % step (st K (ev (match E1 E2 (\x. E3 x))))
   % % mstep (st (c K  (\x1. match1 x1 E2 (\x. E3 x))) (ev E1))  ==>* mstep (st K (ev E) (answer W)
   % % 
   % % by i.h.
   % % eval_step E1 (c K  (\x1. match1 x1 E2 (\x. E3 x))) W

    (case csd ([ ] C1) of 
    [ ] result D1 (<< (<< C2 st_match1_z) st_return)   : 
	       (eval_step E1 (c K  (\x1. match1 x1 E2 (\x. (E3 x)))) W)[ ] 
	=> 
      let [ ] result D2 C' = csd ([ ] C2) in 
        [ ] result (ev_match_z D2 D1) C' 

   % % Encountered unsolved constraint:
   % % ?X37[?Y36[^0] . ^0]  =   match1 (s_val ?X33[^0]) ?Z33[^0] (\x . ?Y34[x . ^1]) 
   % % when trying to abstract over pattern
   % % (same reason as in above case); the definition of 
   % % st_return : step (st (c K (\v. C v)) (return V)) (st K  (C V))
   % % introduces a non-higher order pattern problem (C V) which cannot be easily solved.

   | [ ] result D1 (<< (<< C3 st_match1_s)  st_return) : 
         (eval_step E1 (c K  (\x1. match1 x1 E2 (\x. (E3 x)))) W)[ ]  => 
       let [ ] result D3 C' = csd ([ ] C3) in 
        [ ] result (ev_match_s D3 D1) C'			     
   )

 | [ ] (<< C1 st_pair) => 
    let [ ] result D1 (<< (<< C2 st_pair1) st_return) : 
            (eval_step E1 (c K  (\x1. pair1 x1 E2)) W)[ ] = csd ([ ] C1) in 
    let [ ] result D2 (<< C' st_return):                 
            (eval_step E1 (c K (\x2. return (pair_val V1 x2))) W)[ ]  = csd ([ ] C2) in 
      [ ] result (ev_pair D2 D1) C'							
								

 | [ ] (<< C1 st_fst) => 
    let [ ] result D1 (<< (<< C' st_fst1) st_return) : 
            (eval_step E1 (c K  (\x. fst1 x)) W)[ ]    = csd ([ ] C1) in 
      [ ] result (ev_fst D1) C'						       

 |  [ ] (<< C1 st_snd) => 
    let [ ] result D1 (<< (<< C' st_snd1) st_return) : 
	  (eval_step E2  (c K  (\x. snd1 x)) W)[ ]     = csd ([ ] C1) in 
      [ ] result (ev_snd D1) C'						       


 | [ ] (<< C' st_lam) => [ ] result (ev_lam) C'

 | [ ] (<< C1 st_app) =>
   let [ ] result D1 (<< (<< C2 st_app1) st_return) :
        (eval_step E1 (c K  (\x1. app1 x1 E2)) W)[ ]   = csd ([ ] C1) in 
   let [ ] result D2 (<< (<< C3 st_app2) st_return) : 
      (eval_step E2 (c K (\x2. app2 (lam_val (\x. (E1' x))) x2)) W)[ ]  = csd ([ ] C2) in 
   let [ ] result D3 C'  = csd ([ ] C3) in 

    [ ] result (ev_app D3 D2 D1) C'   

 | [ ] (<< C1 st_letv) => 
     let [ ] result D1 (<< C2 st_return) :
       (eval_step E1 (c K  (\x1. ev (E2 x1))) W)[ ]    = csd ([ ] C1) in 
     let [ ] result D2 C'                              = csd ([ ] C2) in 
       [ ] result (ev_letv D2 D1) C'

 | [ ] (<< C1 st_letn) => 
     let [ ] result D2 C' = csd ([ ] C1) in 
       [ ] result (ev_letn D2) C'


 | [ ] (<< C1 st_fix) => 
     let [ ] result D1 C' = csd ([ ] C1) in 
       [ ] result (ev_fix D1) C'

| [ ] (<< C' st_vl) => [ ] result ev_vl C'
;


rec ceval_sound : (ceval E V)[ ] -> (eval E V)[ ] =
fn c => let [ ] cev C = c in 
        let [ ] result D (<< stop st_init) = csd ([ ] C) in 
          [ ] D
;					      
 
