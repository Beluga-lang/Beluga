% Variable counting (see Pientka [POPL'08])
% Author:  Brigitte Pientka
%
% This example only uses weak higher-order abstract syntax.

LF exp : type =
  | letv: exp -> (exp  -> exp) -> exp
;
 --name exp E x.

schema expCtx = exp;
LF nat: type =
  | z: nat
  | s: nat -> nat
;

rec plus : [ |- nat] -> [ |- nat] -> [ |- nat] =
/ total x (plus x y) /
fn x => fn y =>
case x of
| [ |- z]    => y
| [ |- s U]  =>
  let [ |- V] = plus [ |- U] y in [ |- s V];


% G, x:exp T |-  z  ==>  0
% G, x:exp T |-  tt  ==>  0
% G, x:exp T |-  x  ==>  1
% G, x:exp T |-  y  ==>  0   y =/= x
% G, x:exp T |-  s U ==> n   if G, x:exp T |- U  ==> n
% G, x:exp T |-  s U  ==> n   if G, x:exp T |- U  ==> n
% G, x:exp T |-  letv U (\y. V y) ===> n1 + n2
% if  G, x: exp T |-  U ==> n1
% if  G, y:exp _ , x: exp T |-  V  y ==> n2

rec cntV : {g:expCtx}  [g, x:exp |-  exp] -> [ |- nat] =
% / total e (cntV g e) /
mlam g => fn e => case e of
% | [g,x:exp  |-  tt]    => [ |- z]

% | [g,x:exp |-  #p]    => [ |- z]
| [g,x:exp |-  x]       => [ |- s z]
% | [g,x:exp  |-  z]      => [ |- z]
 | [g,x:exp |-  (U )]  => [ |- z]
%   | [g,x:exp |-  s W]  => cntV [g]  [g,x |- W]

  | [g,x:exp |-  letv U1 (\y . U2)] =>
      plus  (cntV [g]         [g,x |- U1])
            (cntV [g, y:exp]  [g,y,x |- U2[..,x,y]])

%{  | [g,x:exp |-  add U W]  =>
     plus (cntV [g] [g,x |- U])
          (cntV [g] [g,x |- W])
}%
;
