datatype tm : type =
| z    : tm
| suc  : (tm) → tm
| app  : tm → tm → tm
| lam  : (tm → tm) → tm
;

schema tctx = tm ;

datatype nat: type =
| zero   : nat
| succ : nat → nat
;

datatype list:type =
| nil: list
| cons: tm -> list -> list
;



%Implicit type/context args e.g.(g:tctx) doesn't work on ctype
datatype LSiz:(g:tctx) [g |- list] -> [ |- nat] -> ctype =
| EmpSiz: LSiz [g |- nil] [ |- zero]
| SucSiz: LSiz [g |- L] [ |- N] -> LSiz [g |- cons X L] [ |- succ N]
;
