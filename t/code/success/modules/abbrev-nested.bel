module Arith = struct
	module Nats = struct
	  nat : type.
	  z : nat.
	  s : nat -> nat.

	  rec suc : [ |- nat ] -> [ |- nat] =
	  fn n => let [ |- N ] = n in [ |- s N];

	  let two = [ |- s (s z)];
	  let three = suc two;
	end;

	rec add : [ |- Nats::nat ] -> [ |- Nats::nat ] -> [ |- Nats::nat ] =
	fn x, y => case x of
	| [ |- Nats::z ] => y
	| [ |- Nats::s N ] =>
		let [ |- N' ] = add [ |- N ] y in
		[ |- Nats::s N'];


	rec mult : [ |- Nats::nat ] -> [ |- Nats::nat ] -> [ |- Nats::nat ] =
	fn x, y => case x of
	| [ |- Nats::z] => [ |- Nats::z]
	| [ |- Nats::s N] =>
		let [ |- N' ] = mult [ |- N ] y in
		add [ |- N' ] y;



	let five = add Nats::two Nats::three;

	let six = mult Nats::two Nats::three;

end;

--abbrev Arith::Nats N.

let x = [ |- N::z ];

let y = [ |- N::s N::z];

let z = N::suc [ |- N::z ];
