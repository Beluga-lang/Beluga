% Source calculus

LF s-tp : type =
| bool : s-tp
| arr : s-tp -> s-tp -> s-tp
;


LF s-tm : s-tp -> type =
| app : s-tm (arr S T) -> s-tm S -> s-tm T
| lam : (s-tm S -> s-tm T) -> s-tm (arr S T)
| tt : s-tm bool
| ff : s-tm bool
| ife : s-tm bool -> s-tm T -> s-tm T -> s-tm T
;

% Target calculus

LF t-tp : type =
| tunit : t-tp
| tsum : t-tp -> t-tp -> t-tp
| tarr : t-tp -> t-tp -> t-tp
;

LF t-tm : t-tp -> type =
| tapp : t-tm (tarr S T) -> t-tm S -> t-tm T
| tlam : (t-tm S -> t-tm T) -> t-tm (tarr S T)
| tone : t-tm tunit
| tinl : t-tm s -> t-tm (tsum S T)
| tinr : t-tm t -> t-tm (tsum S T)
| tcase : t-tm (tsum S T) -> (t-tm S -> t-tm R) -> (t-tm T -> t-tm R) -> t-tm R
;

% Translation

LF tran-tp : s-tp -> t-tp -> type =
| t-bool : tran-tp bool (tsum tunit tunit)
| t-arr : tran-tp S S' -> tran-tp T T' -> tran-tp (arr S T) (tarr S' T')
;

LF ex-tran : s-tp -> type =
| ex : {T : t-tp} tran-tp S T -> ex-tran S
;

% Proof that the translation is defined for all source types
% This holds only for closed contexts -- but you want to use it in g:ctx

rec total-tran-tp : {S : [|- s-tp]} [|- ex-tran S] =
/ total s (total-tran-tp s) /
mlam S => case [|- S] of
| [|- bool] => [|- ex (tsum tunit tunit) t-bool]
| [|- arr S S'] =>
  let [|- ex T TR] = total-tran-tp [|- S] in
  let [|- ex T' TR'] = total-tran-tp [|- S'] in
  [|- ex (tarr T T') (t-arr TR TR')]
;

% Proof that the translation is deterministic

LF eq : t-tp -> t-tp -> type =
| refl : eq T T
;

schema ctx = some [s:s-tp, t:t-tp] block (s: s-tm S, t: t-tm T, tr: tran-tp S T);

rec deterministic-tran'-tp :(g:ctx)  [g|- tran-tp S[] T[]] -> [g |- tran-tp S[] T'[]] -> [|- eq T T'] =
/ total tr (deterministic-tran'-tp g s t t' tr) /
    ? ;
    
rec deterministic-tran-tp : (g:ctx) [g |- tran-tp S[] T[]] -> [|- tran-tp S T'] -> [|- eq T T'] =
/ total tr (deterministic-tran-tp _ _ _ _ tr) /
fn tr1 => fn tr2 => case tr1 of
| [g |- t-bool] =>
  let [|- t-bool] = tr2 in
  [|- refl]
| [g |- t-arr T1 T2] =>
  let [|- t-arr T1' T2'] = tr2 in
  let [|- refl] = deterministic-tran-tp [g |- T1] [|- T1'] in
  let [|- refl] = deterministic-tran-tp [g |- T2] [|- T2'] in
  [|- refl]
| [g |- #p.tr] =>
  ? % and here?
;

% This one case analyses the other argument
rec deterministic-tran-tp-2 : (g:ctx) [g |- tran-tp S[] T[]] -> [|- tran-tp S T'] -> [|- eq T T'] =
% / total tr2 (deterministic-tran-tp-2 g s t t' tr1 tr2) /
fn tr1 => fn tr2 => case tr2 of
| [|- t-bool] =>
  (case tr1 of
   | [g |- t-bool] =>  [|- refl]
   | [g |- #p.3] => ? % What can be put here?
  )
| [|- t-arr T1 T2] =>
  let [g |- t-arr T1' T2'] = tr1 in % this also has a variable case
  let [|- refl] = deterministic-tran-tp-2 [g |- T1'] [|- T1] in
  let [|- refl] = deterministic-tran-tp-2 [g |- T2'] [|- T2] in
  [|- refl]
;

inductive WfCtx : {g:ctx} ctype =
  | Nil : WfCtx [ ]
  | Ext :   [ |- tran-tp S S'] -> WfCtx [g] 
	    -> WfCtx [g, x: block s:s-tm S[], t:t-tm S'[], tr: tran-tp S[] S'[]]
;
		  
% Type preserving translation
rec wfAss : {g:ctx}{#p:[g |- tran-tp S[] T[]]} WfCtx [g] -> [ |- tran-tp S[] T[]] =
/ total w (wfAss g s t p w) /
  mlam g, #p => fn w => case [g] of
  | [ ] => ? % impossible [ |- #p]
  | [g, x: block s:s-tm S[], t:t-tm T[], tr: tran-tp S[] T[]]  =>
    let Ext tr w' = w in 
    (case [g, x: block s:s-tm S[], t:t-tm T[], tr: tran-tp S[] T[] |- #p.tr] of
    | [g, x: block s:s-tm S[], t:t-tm T[], tr: tran-tp S[] T[] |- x] => ? % tr
    | [g, x: block s:s-tm S[], t:t-tm T[], tr: tran-tp S[] T[] |- #q.tr[..] ] => ? % wfAss [g] [g |- #p] w')
)
;
rec tran : (g : ctx)
	   [ |- tran-tp S[] T[]] -> WfCtx [g] -> [g |- s-tm S[]]
	   -> [g |- t-tm T[]] =
/ total e (tran g s t tr wf e) /
fn tr, wf => fn e => case e of
| {M : [g|- s-tm (arr S[] T[])]} [g |- app M N] =>
  let [ |- ex S' TR] = total-tran-tp [|- S] in
  let [ |- TR'] = tr in 
  let [g |- M'] = tran [ |- t-arr TR TR'] wf [g |- M] in
  let [g |- N'] = tran [ |- TR] wf [g |- N] in
  [g |- tapp M' N']

| [g |- lam \x.M] =>
  let [ |- t-arr TS TT] : [ |- tran-tp (arr S[] T[]) (tarr S'[] T'[])] = tr in
  let [g, x: block s:s-tm S[], t:t-tm S'[], tr: tran-tp S[] S'[] |- M'[..,x.t]] =
      tran [ |- TT] (Ext [ |- TS] wf)
	   [g, x: block s:s-tm S[], t:t-tm S'[], tr: tran-tp S[] S'[]  |- M[..,x.s]] in
  [g |- tlam \x.M']

| [g |- tt] =>
  let [|- t-bool] = tr in
  [g |- tinr tone]

| [g |- ff] =>
  let [|- t-bool] = tr in
  [g |- tinl tone]

| [g |- ife C M N] =>
  let [g |- C'] = tran [ |- t-bool] wf [g |- C] in
  let [g |- M'] = tran tr wf [g |- M] in
  let [g |- N'] = tran tr wf [g |- N] in
  [g |- tcase C' (\x. M'[..]) (\x. N'[..])]

| {#p:[g |- block s:s-tm S[], t:t-tm T[], tr: tran-tp S[] T[]] } [g |- #p.s] =>
  let [ |- TR] = wfAss [g] [g |- #p.tr] wf in 
  let [|- refl] = deterministic-tran-tp [ |- TR]  tr in
  [g |- #p.t]
;



