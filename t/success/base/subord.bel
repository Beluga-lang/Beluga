bool : type.

term :type.
z    : term.
suc  : term -> term.
eq : term -> term -> bool.

schema termCtx = term;
schema boolCtx = bool;

% Example showing the need for subordination.
% The pattern  eq U V  covers *all* terms of type `eq' because the context contains
%   only bools, which cannot appear in terms of type `term'.

%{
rec fff : {g:(boolCtx)*} bool[g, xx : bool] -> term[] =
FN g => fn e =>
  case e of
%{
  | [g, xx : bool]  U     => [] z         % Shift(CtxShift _, 1)
  | [g, xx : bool]  U[..]     => [] z      % Shift(NoCtxShift, 1)
  | [g, xx : bool]  Ux     => [] z  % Dot(xx,  Shift(NoCtxShift _, 1))
  | [g, xx : bool]  U xx     => [] z     % Dot(xx,  Shift(CtxShift _, 1))
}%
  | [g, xx : bool |-  eq U V]     => [ |- z]
%  | [g, xx : bool]  eq (U[..]) V     => [] z
%  | [g, xx : bool]  eq (U[..]) (Vx)     => [] z
  | [g, xx : bool |-  #px]   => [ |- z]
;


rec fff2 : {g:termCtx} [g, xx : bool |-  term] -> [ |- term] =
mlam g => fn e =>
  case e of
  | [g, xx : bool |-  z]     => [ |- z]
  | [g, xx : bool |-  suc (U[..])]   => [ |- z]
  | [g, xx : bool |-  #p[..]]   => [ |- z]
;
}%

rec fff2Wrong : {g:termCtx} [g, xx : bool |-  term] -> [ |- term] =
mlam g => fn e =>
  case e of --not
  | [g, xx : bool |-  z]      => [ |- z]
  | [g, xx : bool |-  suc U]  => [ |- z]
  | [g, xx : bool |-  #p[..]]  => [ |- z]
;

% let crash = fff2Wrong [y:term] ([y:term, xx:bool] suc (suc y))
% ;
