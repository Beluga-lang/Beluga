tp: type. --name tp T.
nat: tp.
bool:tp.
arr: tp -> tp -> tp.

exp: tp -> type.  --name exp E.
z : exp nat.
s : exp nat -> exp nat.
tt: exp bool.
match: exp T -> exp S -> (exp nat -> exp S) -> exp S.

lam: (exp T1 -> exp T2) -> exp (arr T1 T2).
app: exp (arr T1 T2) -> exp T1 -> exp T2.

tExp: type.

exS : exp S â†’ tExp.

rec test4 : [ |- exp T] -> [ |- tExp] =
fn e => case [ |- z] of [ |- U] => [ |- exS U] ;
