% Author: Brigitte Pientka
% Translating system F into deBruijn representation
% We keep higher-order abstract syntax for the types
% since types are thrown away during runtime.
%

nat: type.
z: nat.
s: nat -> nat.

% Types
tp  : type.                %name tp T.
o   : tp.
arr : tp -> tp -> tp.
all : (tp -> tp) -> tp.
% Intrinsically well-typed expressions
exp   : tp -> type.        %name exp E.
value : tp -> type.
app   : exp (arr A B) -> exp A -> exp B.
lam   : {A:tp}(value A -> exp B) -> value (arr A B).
ret   : value A -> exp A.
tapp   : exp (all A)  -> {T:tp}exp (A T).
tlam   : ({a:tp}exp (A a)) -> value (all A).

% Translating to untyped deBruijn terms

exp'   : tp -> type.

one    : {A:tp}exp' A.
shift  : {A:tp}exp' A -> exp' A.  % ^
lam'   : {A:tp}exp' B  -> exp' (arr A B).
app'   : exp' (arr A B) -> exp' A -> exp' B.
tapp'  : exp' (all A)  -> {T:tp}exp' (A T).
tlam'   : ({a:tp}exp' (A a)) -> exp' (all A).


schema ctx = value T + tp;
schema tctx = tp;

rec vhoas2db : {g:ctx}[g |- value (S ..)] ->  [g |- exp' (S ..)] =
mlam g => fn v =>  case v of
 | [h,x:value (T ..)  |-  x] => [h, x:value (T ..) |-  one (T ..)]

 |  {#p:[h |- value (S' ..)]}
   [h,x:value (T ..)  |-  #p ..] =>
   let [g |- Db ..] = vhoas2db [h] [h |- #p ..] in
     [g,x:value (T ..)  |-  shift (S' ..)  (Db ..)]

| [h,a:tp |-  #p ..] =>
   let [g |- Db ..] = vhoas2db [h] [h |- #p ..] in
     [g,a:tp |-  Db ..]

 | [g |- lam (T ..) (\x. E .. x)] =>
   let [g,x:value (T ..) |-  F ..] =  hoas2db [g,x:value (T ..) ] [g,x |- E .. x ] in
     [g |- lam' (T ..) (F ..)]

 | [g |- tlam \a. E .. a] =>
   let [g,a:tp |-  F .. a] = hoas2db [g,a:tp] [g,a |- E .. a] in
     [g |- tlam' \a. F .. a]


and hoas2db : {g:ctx} [g |- exp (T ..)] ->  [g |- exp' (T ..) ] =
mlam g => fn e =>  case e of
 | [g |- app (E1 .. ) (E2 .. )] =>
   let [g |- F1 ..] = hoas2db [g] [g |- E1 ..]  in
   let [g |- F2 ..] = hoas2db [g] [g |- E2 ..]  in
     [g |- app' (F1 ..) (F2 ..)]
 | [g |- ret (V ..)] =>
   vhoas2db [g] [g |- V .. ]
 | [g |- tapp (E .. ) (T ..)] =>
     let [g |- F ..] = hoas2db [g] [g |- E .. ] in
     [g |- tapp' (F .. ) (T .. )]
;

rec todbruijn : {g':tctx}[g' |-  exp (S .. )] -> [g' |-  exp' (S ..)] =
mlam g' => fn e =>  hoas2db [g'] e ;


