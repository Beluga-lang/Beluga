LF tp : type =
| b :  tp
| arr : tp -> tp -> tp
| prod : tp -> tp -> tp
;
--name tp T.

tm : type.          --name tm E.
app : tm -> tm -> tm.
lam : (tm -> tm) -> tm.
fst : tm -> tm.
snd : tm -> tm.
pair : tm -> tm -> tm.
c : tm.

step : tm → tm → type.
beta : step (app (lam M) N) (M N).
stepapp : step M M' -> step (app M N) (app M' N).
stepfst : step M M' -> step (fst M) (fst M').
stepsnd : step M M' -> step (snd M) (snd M').
prod1 : step (fst (pair M N)) M.
prod2 : step (snd (pair M N)) N.
steppair1 : step M M' -> step (pair M N) (pair M' N).
steppair2 : step N N' -> step (pair M N) (pair M N').

mstep : tm -> tm -> type.  --name mstep S.
refl : mstep M M.
onestep : step M M' -> mstep M' M'' -> mstep M M''.

val : tm -> type. --name val V.
val/c : val c.
val/lam : val (lam M).
val/pair : val M -> val N -> val (pair M N).

halts : tm -> type.  --name halts H.
halts/m : mstep M M' -> val M' -> halts M.

stratified Reduce : {A:[⊢ tp]}{M:[ |- tm]} ctype =
| I : [ |- halts M] -> Reduce [ ⊢ b ] [ |- M]
| Arr :  [ |- halts M] ->
    ({N:[ |- tm]} Reduce [ ⊢ A ] [ |- N] -> Reduce [ ⊢ B ] [ |- app M N])
  -> Reduce [ ⊢ arr A B ] [ |- M]
| Prod : [ |- halts M ] -> Reduce [|- A ] [|- fst M] -> Reduce [|- B] [|- snd M] -> Reduce [|- prod A B] [|- M]
;

rec halts_step : {S:[ |- step M M']} [ |- halts M'] -> [ |- halts M] =
mlam S ⇒ fn h =>
let [ |- halts/m MS' V] = h in
 [ |- halts/m (onestep S MS') V]
;

rec bwd_closed : {S:[ |- step M M']} Reduce [|- T] [ |- M'] -> Reduce [|- T] [ |- M] =
mlam MS => fn r => case r of
| I ha => I (halts_step [ |- MS] ha)
| Arr ha f => Arr (halts_step [ |- MS] ha)
  (mlam N => fn rn =>
   bwd_closed [ |- stepapp MS] (f [ |- N] rn))
| Prod ha r1 r2 => Prod (halts_step [|- MS] ha) (bwd_closed [|- stepfst MS] r1) (bwd_closed [|-stepsnd MS] r2)
;

rec reduce_halts : Reduce [|- T] [ |- M] -> [ |- halts M] =
fn r => case r of
| I h => h
| Arr h f => h
| Prod h r1 r2 => h
;
schema ctx = tm;

tctx : type.
nil : tctx.
snoc : tctx -> tp -> tctx.

% Typing
inductive Lookup : (gamma:ctx){G:[|-tctx]}{M:[gamma |- tm]}{A : [ |- tp]} ctype =
| Top : Lookup [|- snoc G A] [gamma,x:tm |- x] [|- A]
| Pop : Lookup [|- G] [gamma |- #p] [|- A] -> Lookup [|- snoc G B] [gamma,x:tm |- #p[..]] [|- A]
;

inductive Oft : (gamma:ctx){G:[|-tctx]}{M:[gamma |- tm]}{A:[ |- tp]} ctype =
| Lam : Oft [|- snoc G A] [gamma,x:tm |- M] [ |- B ] -> Oft [|- G ] [gamma |- lam (\x. M)] [|- arr A B]
| App : Oft [|- G ] [gamma |- M ] [|- arr A B] -> Oft [|- G ] [gamma |- N] [|- A] -> Oft [|- G] [gamma |- app M N] [|- B]
| Var : Lookup [|- G ] [gamma |- #p] [|- A] -> Oft [|- G] [gamma |- #p] [|- A]
| Fst : Oft [|- G] [gamma |- M] [|- prod A B] -> Oft [|- G] [gamma |- fst M] [|- A]
| Snd : Oft [|- G] [gamma |- M] [|- prod A B] -> Oft [|- G] [gamma |- snd M] [|- B]
| Pair : Oft [|- G] [gamma |- M] [|- A] -> Oft [|- G] [gamma |- N] [|- B] -> Oft [|- G] [gamma |- pair M N] [|- prod A B]
| C : Oft [|- G] [gamma |- c] [|- b]
;

inductive RedSub : {g:ctx}{G:[|-tctx]}{$S:[ |- g]} ctype =
| Nil : RedSub  [ ] [|- nil] [ |- ^ ]
| Dot : RedSub  [g] [|- G] [ |- $S[^] ] → Reduce [|- A] [ |- M]
     → RedSub [g, x:tm] [|- snoc G A] [ |- $S[^] , M ]
;

rec lookup : Lookup [|- G] [gamma |- M] [|- A] -> RedSub [gamma] [|- G] [ |- $S[^]] -> Reduce [|- A] [ |- M[$S[^]]] =
fn v => fn rs => case v of
 | Top =>   let (Dot rs' rN) = rs in rN
 | Pop x => let Dot rs' rN = rs in lookup x rs'
;

rec pair_mstep1 : {M2:[|-tm]}[|- mstep M1 V1] -> [|- mstep (pair M1 M2) (pair V1 M2)] =
mlam M2 => fn ms1 => case ms1 of
| [|- refl] => [|- refl]
| [|- onestep S MS] =>
  let [|- MS'] = pair_mstep1 [|- M2] [|- MS] in
     [ |- onestep (steppair1 S) MS']
;

rec pair_mstep2 : {M1:[|-tm]}[|- mstep M2 V2] -> [|- mstep (pair M1 M2) (pair M1 V2)] =
mlam M1 => fn ms1 => case ms1 of
| [|- refl] => [|- refl]
| [|- onestep S MS] =>
  let [|- MS'] = pair_mstep2 [|- M1] [|- MS] in
     [ |- onestep (steppair2 S) MS']
;

rec mstep_trans : [|- mstep M1 M2] -> [|- mstep M2 M3] -> [|- mstep M1 M3] =
fn d1 , d2 => case d1 of
| [|- refl] => d2
| [|- onestep S MS] =>
  let [|- MS'] = mstep_trans [|- MS ] d2 in
  [|- onestep S MS']
;

rec pair_halts: [|- halts M1] -> [|- halts M2] ->
               [|- halts (pair M1 M2)] =
fn d1, d2 =>
  let [|- halts/m MS1 V1] = d1 in
  let [|- halts/m MS2 V2] = d2 in
  let [|- MS'] = mstep_trans (pair_mstep1 [|-_] [|-MS1]) (pair_mstep2 [|-_] [|- MS2]) in
  [|- halts/m MS' (val/pair V1 V2)]
;

rec main : {g:ctx} Oft [|- G] [gamma |- M] [|- A] -> RedSub [gamma] [|- G] [ |- $S[^]] -> Reduce [|- A] [ |- M[$S[^]]] =
mlam g => fn d => fn s => case d of
| Var v => lookup v s
| Lam d1 =>
  Arr [ |- halts/m refl val/lam ]
      (mlam N => fn r => bwd_closed [ |- beta ] (main [g,x:tm] d1 (Dot s r)))
| App d1 d2 =>
  let Arr h f = main [g] d1 s in
  f _ (main [g] d2 s)
| C => I [|- halts/m refl val/c ]
| Fst d => let Prod h r1 r2 = main [g] d s in r1
| Snd d => let Prod h r1 r2 = main [g] d s in r2
| Pair d1 d2 =>
  let r1 = main [g] d1 s in
  let r2 = main [g] d2 s in
  Prod (pair_halts (reduce_halts r1) (reduce_halts r2)) (bwd_closed [|- prod1] r1) (bwd_closed [|- prod2] r2)
;

rec weakNorm : Oft [|- nil] [|- M] [ |- A] -> [ |- halts M] =
fn d => reduce_halts (main [] d Nil)
;
