% Value soundness 
% Author: Brigitte Pientka
%

exp  : type.  
z    : exp.
suc  : exp -> exp.
letv : exp -> (exp -> exp) -> exp.
lam  : (exp -> exp) -> exp.
app  : exp -> exp -> exp.

tp   : type.
nat  : tp.
arrow  : tp -> tp -> tp.


% Evaluation 
eval : exp -> exp -> type.
ev_z : eval z z.

ev_s : eval E V -> eval (suc E) (suc V).

ev_l : eval (E2 V1) V  -> eval E1 V1 -> eval (letv E1 (\x. E2 x)) V.

ev_lam: eval (lam (\x. E x)) (lam (\x. E x)).

ev_app: eval E1 (lam (\x. E x)) -> eval E2 V2 -> eval (E V2) V 
     -> eval (app E1 E2) V.


% Typing 

oft : exp -> tp -> type.

tp_z     : oft z nat.
tp_s     : oft E nat -> 
	   oft (suc E) nat.

tp_lam :   ({x:exp} oft x T1 -> oft (E x) T2) 
        -> oft (lam (\ x . E x)) (arrow T1 T2).

tp_app : oft E2 T2 -> 
         oft E1 (arrow T2 T1)
	 -> oft (app E1 E2) T1.

tp_letv : ({x:exp} oft x T1 -> oft (E2 x) T2) -> 
	   oft E1 T1  
        -> oft (letv E1 (\ x . E2 x)) T2.



% Type preservation proof
rec tps :  (eval E![.]! V![.]!)[.] -> (oft E![.]! T![.]!)[.]
        -> (oft V![.]! T![.]!)[.]  = 
fn e => fn d => 

  case e of 
    box(. . ev_z) => 
      (case d of box(. . tp_z) => box(. tp_z))


  | box(. . ev_s E1![.]!)  =>
    (case d of  box(. . tp_s D1![.]!)  =>    
       (case (tps box(. E1![.]!) box(. D1![.]!)) of 
	   box(. .  F1![.]!) => box(. tp_s F1![.]!)
       )
    )

  | box(. . ev_lam) =>  
    (case d of box (. . tp_lam (\x. \u. D![. , x, u]!)) => d)     


  | box(. . ev_app E1![.]! E2![.]! E3![.]!) => 
     (case d of box (. . tp_app D2![.]! D1![.]!) => 

         (case (tps box(. E1![.]!) box( . D1![.]!)) of 

           box(. . tp_lam (\x. \u. D![.,x,u]!)) => 
            
              (case (tps box( . E2![.]!) box( . D2![.]!)) of 
	         box(. . F2![.]!) =>  
                    
                      tps box( . E3![.]!) box( . D![. ; _ ; F2![.]!]!) 

	      )
          )
      )



;