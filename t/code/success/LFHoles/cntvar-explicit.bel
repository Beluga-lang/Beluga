% Variable counting (see Pientka [POPL'08])
% Author:  Brigitte Pientka
%
% This example only uses weak higher-order abstract syntax.

tp  : type.   --name tp T.
nat : tp.
bool: tp.

exp : tp -> type.  --name exp E.
z   : exp nat.
s   : exp nat -> exp nat.

tt  : exp bool.

% add : exp nat -> exp nat -> exp nat.
% letv: {T1:tp} {T2:tp} exp T1 -> (exp T1 -> exp T2) -> exp T2.

schema expCtx = some [t:tp] exp t;


rec plus : [ |- exp nat] -> [ |- exp nat] -> [ |- exp nat] =
fn x => fn y =>
 (case x of
    [ |- z]                           : [ |- (exp nat)] => y

  | {U:[ |- exp nat]}
    [ |- s U]                         : [ |- (exp nat)] =>
    (case (plus [ |- U] y) of
       {V:[ |- exp nat]}
        [ |- V] : [ |- (exp nat)]     =>  [ |- s V])
  | {U:[ |- exp nat]}
     [ |- U]    => y
)
;


rec cntV : {g:expCtx} {T:[ |- tp]} {S:[ |- tp]} [g, x:(exp (T[])) |-  exp (S[])] -> [ |- exp nat] =

mlam g => mlam T => mlam TT => fn e =>
 case e of
     {T1:[ |- tp]} {T2:[ |- tp]} {#p:[g |- exp (T1[])]}
     [g,x: exp (T2[]) |-  (#p[..])]      : [g,x: exp (T2[]) |-  (exp (T1[]))]   => [ |- z]

   | {T':[ |- tp]}
     [g,x: exp (T'[]) |-  x]            : [g,x: exp (T'[]) |-  (exp (T'[]))]   => [ |- s z]

   | {T':[ |- tp]}
     [g,x: exp (T'[]) |-  tt]           : [g,x: exp (T'[]) |-  (exp bool)] => [ |- z]

   | {T':[ |- tp]}
     [g,x: exp (T'[]) |-  z]            : [g,x: exp (T'[]) |-  (exp nat)] => [ |- z]

   | {T':[ |- tp]} {U:[g, x:exp (T'[]) |-  exp nat]}
      [g,x: exp (T'[]) |-  s (U)]  : [g,x: exp (T'[]) |-  (exp nat)] =>
          cntV [g] [ |- T' ]  [ |- nat ]   [g,x |- ?]

%{   | {T'::tp[ ]} {T1::tp[ ]} {T2::tp[ ]}
     {U1::(exp T1)[g, x:exp T']} {U2::(exp T2)[g, x:exp T', y:exp T1]}

      [g,x: exp T'] letv T1 T2 (U1) (\y . (U2 y)) : (exp T2)[g, x:exp T'] =>

          plus (cntV [g]           < . T' >    < . T1 >    ([g,x]   (U1)))
               (cntV [g, y:exp T1] < . T' >    < . T2 >    ([g,y,x] (U2 y)))

   | {T'::tp[ ]} {U::(exp nat)[g, x:exp T']} {W::(exp nat)[g, x:exp T']}
     [g,x : exp T'] add (U) (W)                   : (exp nat)[g, x: exp T'] =>
          plus (cntV [g] < . T' > < . nat > ([g,x] (U)))
               (cntV [g] < . T' > < . nat > ([g,x] (W)))
}%
;
