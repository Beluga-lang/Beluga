tp : type.
base : tp.
arr : tp → tp → tp.
--name tp A.

tm : type.
c : tm.
lam : (tm → tm) → tm.
app : tm → tm → tm.
--name tm M.

oft : tm → tp → type.
t_c : oft c base.
t_lam : ({x : tm} oft x A → oft (M x) B) → oft (lam M) (arr A B).
t_app : oft M (arr A B) → oft N A → oft (app M N) B.
--name oft D.

eval : tm → tm → type.
e_c : eval c c.
% e_app : eval M (lam M') → eval (app M N) (M' N).
e_lam : eval (lam M) (lam M).
e_app : eval M (lam M') → eval (M' N) V → eval (app M N) V.
--name eval E.

schema ctx = some [t:tp] block x : tm, u : oft x t;

proof tps : [⊢ oft M A] → [⊢ eval M M'] → [⊢ oft M' A] =
intros
{ M : ( |- tm), A : ( |- tp), M' : ( |- tm)
| z6 : [ |- oft M A], y7 : [ |- eval M M']
; split y7 as
  case e_app:
  { M1 : ( |- tm),
    M3 : ( |- tm),
    A : ( |- tp),
    M' : ( |- tm),
    M2 : (y6 : tm |- tm),
    E : ( |- eval M1 (lam (\y1. M2))),
    E1 : ( |- eval (M2[M3]) M')
  | z6 : [ |- oft (app M1 M3) A], y7 : [ |- eval (app M1 M3) M']
  ; split z6 as
    case t_app:
    { M1 : ( |- tm),
      M3 : ( |- tm),
      A : ( |- tp),
      M' : ( |- tm),
      M2 : (y6 : tm |- tm),
      E : ( |- eval M1 (lam (\y1. M2))),
      E1 : ( |- eval (M2[M3]) M'),
      A1 : ( |- tp),
      D : ( |- oft M1 (arr A1 A)),
      D1 : ( |- oft M3 A1)
    | z6 : [ |- oft (app M1 M3) A], y7 : [ |- eval (app M1 M3) M']
    ; by tps [ |- D] [ |- E] as ih0 ;
      split ih0 as
      case t_lam:
      { M1 : ( |- tm),
        M3 : ( |- tm),
        A : ( |- tp),
        M' : ( |- tm),
        M2 : (y6 : tm |- tm),
        E : ( |- eval M1 (lam (\y1. M2))),
        E1 : ( |- eval (M2[M3]) M'),
        A1 : ( |- tp),
        D : ( |- oft M1 (arr A1 A)),
        D1 : ( |- oft M3 A1),
        D2 : (x : tm, y3 : oft x A1[] |- oft (M2[x]) A[])
      | z6 : [ |- oft (app M1 M3) A],
        y7 : [ |- eval (app M1 M3) M'],
        ih0 : [ |- oft (lam (\y1. M2)) (arr A1 A)]
      ; by tps [ |- D2[M3, D1]] [ |- E1] as ih1 ;
        solve ih1
      }

    }

  }
  case e_lam:
  { M1 : (y5 : tm |- tm), A : ( |- tp)
  | z6 : [ |- oft (lam (\y1. M1)) A],
    y7 : [ |- eval (lam (\y1. M1)) (lam (\y1. M1))]
  ; solve z6
  }
  case e_c:
  { A : ( |- tp)
  | z6 : [ |- oft c A], y7 : [ |- eval c c]
  ; solve z6
  }

}
;
