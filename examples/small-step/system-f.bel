% Progress and preservation for System F with natural numbers.

tp : type.
tm : type.

% Types
nat : tp.
arr : tp -> tp -> tp.  % infix left 5 =>.
forall : (tp -> tp) -> tp.

% Terms
z : tm.
s : tm -> tm.
app : tm -> tm -> tm.  % infix left 5 @.
lam : tp -> (tm -> tm) -> tm.
lAM : (tp -> tm) -> tm.
ann : tm -> tp -> tm.  % infix left 5 #.

% Typing
has : tm -> tp -> type. % infix left 5 is.

is_z   :
       % ----------
         has z nat.

is_s   : has E nat ->
         % -----------
         has (s E) nat.

is_@   : has E1 (arr T1 T2) ->
         has E2 T1 ->
       % -------------------
         has (app E1 E2)  T2.

is_lam : ({x:tm} has x T1 -> has (E x) T2) ->
       % -----------------------------------
         has (lam T1 (\x. E x)) (arr T1 T2).

is_lAM : ({a:tp} has (E a) (T a)) ->
       % -----------------------------------
         (has (lAM (\a. E a))  (forall (\a. T a))).

is_#   : has E  (forall (\a. T1 a)) ->
       % ----------------------------
         (has (ann E T2) (T1 T2)).

% Values
value : tm -> type.

value_z : value z.

value_s : value V ->
        % -----------
          value (s V).

value_lam : value (lam T (\x. E x)).

value_lAM : value (lAM (\a. E a)).

% Operational semantics

step : tm -> tm -> type. % infix left 5 step.

step_s : step E E' ->
     % ---------------
       step (s E) (s E').

step_@1 : (step  E1 E1') ->
      % --------------------------
        (step  (app E1 E2) (app E1' E2)).

step_@2 : value E1 ->
        (step  E2 E2') ->
      % --------------------------
        (step  (app E1 E2) (app E1 E2')).

step_@3 : value E2 ->
      % --------------------------
        (step  (app (lam T (\x. E1 x)) E2)  (E1 E2)).

step_#1 : (step  E E') ->
      % --------------------------
        (step (ann E T)  (ann E' T)).

step_#2 :
      % --------------------------
        step (ann (lAM (\a. E a)) T)  (E T).


% Preservation


rec pres : [ |- has E T] -> [ |- step E E'] -> [ |- has E' T] =
/ total ev (pres e t e' d ev)/
fn d => fn ev => case ev of
| [ |- step_s EV] =>
 (let [ |- is_s D] = d in
  let [ |- D']      = pres [ |- D] [ |- EV] in
    [ |- is_s D']
)
| [ |- step_@1 EV1] =>
 (let [ |- is_@ D1 D2] = d in
  let [ |- D1']       = pres [ |- D1] [ |- EV1] in
    [ |- is_@ D1' D2]
 )
| [ |- step_@2 V EV2]  =>
 (let [ |- is_@ D1 D2] = d in
  let [ |- D2']       = pres [ |- D2] [ |- EV2] in
    [ |- is_@ D1 D2']
 )
| [ |- step_@3 V] =>
  let  [ |- is_@ (is_lam (\x. (\d. (D1')))) D2] = d in  [ |- D1'[_,D2]]

| [ |- (step_#1 EV)] =>
 (let [ |- is_# D]  = d in
  let [ |- D']         = pres [ |- D] [ |- EV] in
    [ |- is_# D']
 )
| [ |- step_#2] =>
  let {D':[a:tp |-  has E T] }
     [ |- is_# (is_lAM (\a. D'))]  : [ |- has (ann _ T2) T[T2]] = d in [ |- D'[T2]]
;

% Progress

% Introduce a new type family to distinguish between the case where a term can
% take a step and it is a value.
step_or_val : tm -> type.

step : (step E E') -> step_or_val E.
val : (value E) -> step_or_val E.

rec progress : [ |- has E T] -> [ |- step_or_val E] =
/ total d (progress e t d)/
fn d => case d of
 | [ |- is_z] => [ |- val value_z]
 | [ |- is_s D] =>
   (case    progress [ |- D]   of
    | [ |- step EV] => [ |- step (step_s EV)]
    | [ |- val VL]  => [ |- val (value_s VL)]
   )
 | [ |- is_@ D1 D2] =>
   (case   progress [ |- D1]   of
    | [ |- step EV] => [ |- step (step_@1 EV)]
    | [ |- val value_lam]  =>  % needs a canonical forms lemma
      (case  progress [ |- D2]   of
        | [ |- step EV] => [ |- step (step_@2 value_lam EV)]
        | [ |- val VL2] => [ |- step (step_@3 VL2)]
       )
    | [ |- val value_z]      => impossible [ |- D1]
    | [ |- val (value_s _ )] => impossible [ |- D1]
    | [ |- val (value_lAM )] => impossible [ |- D1] )
 | [ |- is_lam (\x.\d. D1)] => [ |- val value_lam]

| [ |- is_lAM (\a. D)]       => [ |- val value_lAM]

| [ |- is_# D] =>
  (case   progress [ |- D]   of
   | [ |- step EV] => [ |- step (step_#1 EV)]
   | [ |- val value_lAM]  => [ |- step (step_#2)]
   | [ |- val value_z]      => impossible [ |- D]
   | [ |- val (value_s _ )] => impossible [ |- D]
   | [ |- val value_lam]    => impossible [ |- D] )
;
