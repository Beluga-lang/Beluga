
term :  type.
lam  : (term -> term) -> term.

schema tctx = some [] term;

rec copy' : term [ ] -> term [ ] = 
 fn t =>  case t of [ ] lam (\x . x) : term[ ] => t
;

rec copy : {g:(tctx)*} term[g] -> term[g] =
FN g => fn e =>
 (case e of
    {#p::term [g]}
     [g] (#p ..) : term [g] => [g] (#p ..)

  | {U::term [g, x : term]}
    [g] lam (\x. (U .. x)) : term [g] => 

       (case (copy [g, x:term]  ([g,x] (U .. x))) of

          {V:: term[g, x : term ]}

           [g,x:term ] (V .. x) : term [g,x:term] =>
             [g] lam (\x. (V .. x)))
);
