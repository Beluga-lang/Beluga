
term :  type.
app  : term -> term -> term.    
lam  : (term -> term) -> term.

schema W = some [] block (term);

rec copy' : term [.] -> (term) [.] = 
 fn t =>  case t of box(. . lam (\ x . x)) => t
;

rec copy : {g:(W)*} term[g] -> term[g] =
FN g => fn e =>
 (case e of
     box(g . #p[..]) 
     => box(g . #p[..])

  | box(g . lam (\ x. U[.., x])) => 

       (case (copy [g, x:term]  (box(g,x . U[.., x]))) of
               box(g,x : term. V[.., x]) : term [g,x:term] =>
	                    box(g . lam (\ x. V[.. , x])))

  | box (g . app U[..] V[..])  => 
    (case (copy [g] (box (g. U[..]))) of

      box (g. U'[..]) : term [g] => 

      (case (copy [g] (box(g. V[..]))) of

        box (g. V'[..]) : term [g] =>  box (g. app U'[..] V'[..])))


);
