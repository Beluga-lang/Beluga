% The substitution property - Illustrating the need for exchange
% Author: Brigitte Pientka

% ---------------------------------------------------------------------------
% Definition of lambda-terms
tm: type. --name tm M x.
app: tm -> tm -> tm.
lam: (tm -> tm) -> tm.

% Definition of types and expressions
tp: type. --name tp T.
arr: tp -> tp -> tp.
nat: tp.

% ---------------------------------------------------------------------------
% Parallel reduction
pr : tm -> tm -> type.

pr_l : ({x:tm}pr x x -> pr (M x) (N x))
       -> pr (lam M) (lam N).
pr_b : ({x:tm} pr x x -> pr (M x) (M' x))
          -> pr N N'
          -> pr (app (lam M) N) (M' N').
pr_a : pr M M' -> pr N N'
       -> pr (app M N) (app M' N').

% ---------------------------------------------------------------------------
% Context schemas
schema rCtx = block x:tm, pr_v: pr x x;

% ---------------------------------------------------------------------------
% Typing judgment
oft: tm -> tp -> type. --name oft H.
of_lam: ({x:tm}oft x T1 -> oft (M x) T2)
-> oft (lam M) (arr T1 T2).

of_app: oft M1 (arr T2 T) -> oft M2 T2
       -> oft (app M1 M2) T.

% ---------------------------------------------------------------------------
% Context schemas
schema tCtx = some [t:tp] block x:tm, of_v: oft x t;

% ---------------------------------------------------------------------------
% Substitution lemma - for free, direct
rec subst : (g:tCtx)
            [g,b: block x:tm, of_v: oft x T[] |- oft M[..,b.1] S[]]
-> [g |-  oft N T[]]
-> [g |-  oft M[..,N] S[]] =
fn d1 => fn d2 =>
let [g, b: block x:tm, of_v: oft x T |- D1[..,b.1,b.2]] = d1 in
let [g |-  D2[..]] = d2 in
  [g |-  D1[..,_,D2]]
;

% ---------------------------------------------------------------------------
% Generalized context schemas
schema trCtx = some [t:tp] block x:tm, of_v: oft x t, pr_v: pr x x;

% ---------------------------------------------------------------------------
% Type preservation for parallel reduction
%{<h3>Substitution</h3>
Beluga enjoys the usual substitution property for parametric and hypothetical derivations for free. Consider the proof of type preservation for the simply-typed lambda-calculus with parallel reductions: when <code>M</code> steps to <code>N</code> and <code>M</code> has type <code>A</code> then <code>N</code> has the same type <code>A</code>. Since we allow reductions underneath an abstraction, we may step terms containing variables. We therefore allow expressions to depend on the context <code>g</code>}%

rec tps : (g:trCtx)
            [g |-  pr (M[..]) (N[..])] -> [g |-  oft (M[..]) A]
          -> [g |-  oft (N[..]) A] =
fn r => fn d => case r of
| [g |-  #p.3[..] ] => d
| [g |-  pr_b (\x.\pr_v. R1) R2 ] =>
    let [g |-  of_app (of_lam (\x.\of_v. D1)) (D2[..]) ] = d in
    let [g, b: block x:tm, of_v: oft x T, pr_v: pr x x |- F1[..,b.1,b.2]] =
        tps [g, b: block x:tm, of_v: oft x _, pr_v: pr x x |- R1[..,b.1,b.3]]
[g, b |- D1[..,b.1,b.2]] in
    let [g |-  F2[..] ] = tps [g |-  R2[..]] [g |-  D2[..]] in
    [g |-  F1[..,_,F2]] % use substitution lemma directly

| [g |-  pr_l \x.\pr_v. R] =>
    let [g |-  of_lam \x.\of_v. D] = d in
    let [g, b: block x:tm, of_v: oft x T, pr_v: pr x x |- F[..,b.1,b.2]] =
        tps [g, b: block x:tm, of_v: oft x _, pr_v: pr x x |- R[..,b.1,b.3]]
[g, b |- D[..,b.1,b.2]] in
    [g |-  of_lam \x.\of_v. F]

| [g |-  pr_a (R1[..]) (R2[..]) ] =>
    let [g |-  of_app (D1[..]) (D2[..])] = d in
    let [g |-  F1[..] ] = tps [g |-  R1[..]] [g |- D1[..]] in
    let [g |-  F2[..] ] = tps [g |-  R2[..]] [g |- D2[..]] in
    [g |-  of_app (F1[..]) (F2[..])]
;
%{Consider the clause <code>pr_b: pr (app (lam \x.M[..]x) (N[..])) (M[..] (N[..]))</code>. Then we have as assumption <code>d:[g |- oft (app (lam A (\x. M[..]x))(N[..])) (arr A B)<\code>. By inversion, we know that <code>d:[g |- of_a (of_l \x. \u. D1[..]x u)(D2[..]) ]</code> where <code>D1</code> stands for <code>oft (M[..]x) B</code> in the extended context <code>g, x:tm , u:oft x A</code>. We also know that <code>D2</code> describes a derivation <code>oft (N[..])A</code>. By the i.h. (recursive call) on <code>D2</code>, we therefore know <code>F2:oft (N'[..])A</code>. By the i.h. (recursive call) on <code>D1</code>, we obtain a derivation <code/>F1:oft (M'[..]x) B</code> in <code>g, b:block (x:tm , of_x:oft x A)</code>. We now want to substitute for <code>x</code> the term <code>N'</code>, and for the derivation <code>oft x A</code> the derivation <code>F2</code>. This is achieved by applying to <code>F1</code> the substitution <code>.. _ (F2[..])</code>. Since in the program above we do not have the name <code>N</code> available, we write an underscore and let Beluga's type reconstruction algorithm infer the appropriate name.}%
