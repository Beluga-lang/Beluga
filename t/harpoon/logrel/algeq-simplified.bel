% Completeness of algorithmic equality for declarative equality for simply typed lambda calculus
% Accompanies Mechanizing Logical Relations using Contextual Type Theory
% by Andrew Cave and Brigitte Pientka

tp : type.         --name tp T.
i :  tp.
arr: tp -> tp -> tp.

tm : type.          --name tm E.
app : tm -> tm -> tm.
lam : (tm -> tm) -> tm.

step : tm -> tm -> type.  --name step S.
beta : step (app (lam M) N) (M N).
stepapp : step M M' -> step (app M N) (app M' N).

mstep : tm -> tm -> type.  --name mstep S.
refl : mstep M M.
trans1 : step M M' -> mstep M' M'' -> mstep M M''.

algeq : tm -> tm -> tp -> type.
algeqNeu : tm -> tm -> tp -> type.
alg_base : mstep M P -> mstep N Q -> algeqNeu P Q i -> algeq M N i.
alg_arr : ({x:tm}{p:algeqNeu x x T} algeq (app M x) (app N x) S) -> algeq M N (arr T S).
alg_app : algeqNeu M1 M2 (arr T S) -> algeq N1 N2 T -> algeqNeu (app M1 N1) (app M2 N2) S.

schema tctx = some [t:tp] block x:tm, y:algeqNeu x x t;

% Logical equivalence. _|-_~~_:_ in the paper

tmpair : type.
sim : tm -> tm -> tmpair.
--infix sim 5 right.

stratified Log : (g:tctx) [g |- tmpair] -> [ |- tp] -> ctype   =
| LogBase : [g |- algeq M N i]
          -> Log [g |- M sim N ] [|- i]
| LogArr  : {M1:[g |- tm]}{M2:[g |- tm]}
             ({h:tctx} {$R:[h |- g]} {N1:[h |- tm]}{N2:[h |- tm]}
                Log [h |- N1 sim N2] [ |- T]
              -> Log [h |- (app M1[$R] N1) sim (app M2[$R] N2)] [|- S])
            -> Log [g |- M1 sim M2] [ |- arr T S]
;

% Monotonicity of logical equivalence
proof logEq_Monotone : {h:tctx}{$W:[h |- g]} Log [g |- M1 sim M2] [ |- A] ->
                       Log [h |- M1[$W] sim M2[$W]] [ |- A] =
/ total 3 /
?
% mlam h,$W => fn e => case e of
% | LogBase [g |- P] => LogBase [h |- P[$W]]
% | LogArr [g |-  M1] [g |-  M2] f =>
%   LogArr [h |-  M1[$W]] [h |-  M2[$W]]
%    (mlam h0,$W2,N1,N2 => fn rn =>
%     f [h0] [h0 |- $W[$W2]] [h0 |-  N1] [h0 |-  N2] rn
%    )
;

% Main lemma to escape logical relation
proof reflect : {A:[ |- tp]} [g |- algeqNeu M1 M2 A[]] -> Log [g |- M1 sim M2] [ |- A] =
/ total 1 /
?
% mlam A => fn r => case [ |- A] of
% | [ |- i] =>
%     let [g |- R ] = r in
%     LogBase [g |- alg_base refl refl (R)]
% | [ |- arr A B] =>
%   let [g |- R] = r in
%   LogArr [g |- _] [g |-  _]
%    (mlam h,$W,N1,N2 => fn rn =>
%     let [h |- S] = reify [|- A] rn in
%     reflect [ |- B] [h |- alg_app R[$W] S]
%    )
and proof reify : {A:[|- tp]}Log [g |- M1 sim M2] [ |- A] -> [g |- algeq M1 M2 A[]] =
/ total 1 /
?
%mlam A => fn e => case [ |- A] of
%| [ |- i ] =>
%  let LogBase a = e in a
%| [ |- arr A B] =>
%  let LogArr [g |-  M1] [g |-  M2] f = e in
%  let [g,b:block x:tm,y:algeqNeu x x A[] |- R]
%      = reify [ |- B ] (f [g,b:block x:tm,y:algeqNeu x x A[]] [g,b |- ..] [g,b |- b.1] [g,b |- b.1]
%        (reflect [ |- A ] [g,b:block x:tm,y:algeqNeu x x A[] |- b.2]))
%  in [g |- alg_arr \x. \y. R[..,<x;y>]]
;

% Transitivity of mstep
rec mstep_trans : (g:tctx) [g |-  mstep M N] -> [g |-  mstep N P] -> [g |-  mstep M P] =
/ total 1 /
fn s1 => fn s2 => case s1 of
| [g |-  refl] => let [g |-  S2] = s2 in [g |-  S2]
| [g |-  trans1 S1 MS1] => let [g |-  MSR] = mstep_trans [g |-  MS1] s2 in
  [g |-  trans1 S1 MSR]
;

% Boxed form of trans1 for convenience
rec trans1' : (g:tctx) [g |-  step M N] -> [g |-  mstep N P] -> [g |-  mstep M P] =
/ total (trans1') /
fn s1 => fn s2 => case (s1,s2) of
| ([g |-  S], [g |-  MS]) => [g |-  trans1 S MS]
; % TODO: Are these actually necessary?

% multi-step reduction under the function position of application
rec mstep_app : (g:tctx) [g |-  mstep M N] -> [g |-  mstep (app M P) (app N P)] =
/ total s1 (mstep_app g m n p s1) /
fn s1 => case s1 of
| [g |-  refl] => [g |-  refl]
| [g |-  trans1 S MS] => trans1' [g |-  stepapp S] (mstep_app [g |-  MS]);



% Logical equality is backward closed under weak head reduction
% Induction is on T. Make T explicit
proof closed : {T:[|- tp]}
               [g |-  mstep N1 M1] -> [g |-  mstep N2 M2] ->
               Log [g |- M1 sim M2] [ |- T] -> Log [g |- N1 sim N2] [ |- T] =
/ total 1 /
?
% mlam T => fn s1,s2,e => case [|- T] of
% | [|- i] =>
%   let LogBase [g |- alg_base S1' S2' A] = e in
%   let [g |- S1''] = mstep_trans s1 [g |- S1'] in
%   let [g |- S2''] = mstep_trans s2 [g |- S2'] in
%   LogBase [g |- alg_base S1'' S2'' A]
%
% | [|- arr T1 T2] =>
%   let LogArr [g |-  M1] [g |-  M2] f = e in
%   let [g |-  S1] = s1 in
%   let [g |-  S2] = s2 in
%   LogArr [g |-  _] [g |-  _] (mlam h,$W,P1,P2 => fn rp =>
%    let q0 = f [h] [h |- $W] [h |-  P1] [h |-  P2] rp in
%    closed [|- T2] (mstep_app [h |-  S1[$W]] ) (mstep_app [h |-  S2[$W]]) q0
%   )
;

% Symmetry of algorithmic equivalence
proof algeqNeuSym : (g:tctx) [g |- algeqNeu N1 N2 T] -> [g |- algeqNeu N2 N1 T] =
/ total 1 /
?
% fn a => case a of
% | [g |- #p.2] => [g |- #p.2]
%
% | [g |- alg_app (R) N] =>
%   let [g |- R'] = algeqNeuSym [g |- R] in
%   let [g |- N'] = algeqSym [g |- N] in
%   [g |- alg_app (R') (N')]
and proof algeqSym :
    (g:tctx)
    [g |- algeq N1 N2 T] ->
    [g |- algeq N2 N1 T] =
/ total 1 /
?
% fn a => case a of
% | [g |- alg_base S1 S2 R] =>
%   let [g |- R'] = algeqNeuSym [g |- R] in
%   [g |- alg_base S2 S1 R']
% | [g |- alg_arr \x.\u.N] =>
%   let [g,b:block x:tm,y:algeqNeu x x _ |- N'[..,b.1,b.2]] = algeqSym [g,b:block x:tm,y:algeqNeu x x _ |- N[..,b.1,b.2]] in
%   [g |- alg_arr \x.\u.N']
;

% Symmetry of logical equivalence
proof logEqSym :
    { T : [|- tp] }
    Log [g |- M1 sim M2] [ |- T] ->
    Log [g |- M2 sim M1] [ |- T] =
/ total 1 /
?
% mlam T => fn e => case [|- T] of
% | [|- i] =>
%   let LogBase a = e in  LogBase (algeqSym a)
% | [|- arr T1 T2] =>
%   let LogArr [g |-  M1] [g |-  M2] f = e in
%   LogArr [g |-  M2] [g |-  M1] (mlam h,$W,N1,N2 => fn rn =>
% 					let e' = logEqSym [|- T1] rn in
% 					logEqSym [|- T2] (f [h] [h |- $W] [h |-  N2] [h |-  N1] e')
% 				       )
;

% Several of the following lemmas are to establish transitivity of algorithmic equivalenc

% Equality on types
eqtp : tp -> tp -> type.
refltp : eqtp T T.

% The types from algorithmic path equivalence are uniquely determined
proof algeqNeuUnique :
    (g:tctx) [g |- algeqNeu N1 N2 T[]] -> [g |- algeqNeu N2 N3 S[]] ->
    [|- eqtp T S] =
/ total 1 /
?
% fn e1 => fn e2 => case e1 of
% | [g |- #p.2] => let [g |- #q.2] = e2 in [|- refltp]
% | [g |- alg_app (R) N] =>
%   let [g |- alg_app (R') (N')] = e2 in
%   let [|- refltp] = algeqNeuUnique [g |- R] [g |- R'] in [|- refltp]
;

eqtm : tm -> tm -> type.
refltm : eqtm M M.

% Determinacy of weak head reduction
proof determinacy :
    (g:tctx)
    [g |- step M N] -> [g |-  step M P] ->
    [g |- eqtm N P] =
/ total 1 /
?
% fn s1 => fn s2 => case s1 of
% | [g |-  beta] => let [g |-  beta] = s2 in [g |- refltm ]
% | [g |-  stepapp S1] =>
%   let [g |-  stepapp S2] = s2 in
%   let [g |- refltm] = determinacy [g |-  S1] [g |-  S2] in [g |- refltm]
;

inductive HasCommonReduct : (g:tctx) [g |-  tm] -> [g |-  tm] -> ctype =
| Common : [g |-  mstep M1 N] -> [g |-  mstep M2 N] -> HasCommonReduct [g |-  M1] [g |-  M2];

% Confluence is trivial because it's deterministic. This is just a convenient
% way to work with determinacy
proof confluence :
    [g |-  mstep M N] -> [g |-  mstep M P] ->
    HasCommonReduct [g |-  N] [g |-  P] =
/ total 1 /
?
% fn s1 => fn s2 => case s1 of
% | [g |-  refl ] => Common s2 [g |-  refl]
% | [g |-  trans1 S1 (MS1)] =>
%   case s2 of
%   | [g |-  refl] => Common [g |-  refl] s1
%   | [g |-  trans1 S2 MS2] =>
%     let [g|- refltm] = determinacy [g |-  S1] [g |-  S2] in
%     confluence [g |-  MS1] [g |-  MS2]
;

LF empty : type = ;

% Terms in algorithmic path equivalence cannot step
proof neutral_doesnt_step :
    (g:tctx) [g |-  step M N] -> [g |- algeqNeu M P T] ->
    [ |- empty] =
/ total 1 /
?
% fn s => fn e => case s of
% | [g |- beta] => let [g |- alg_app R N] = e in impossible [g |- R]
% | [g |- stepapp S] => let [g |- alg_app R N] = e in neutral_doesnt_step [g |- S] [g |- R]
;

% Similarly for multi-step reduction
proof neutral_mstep :
    (g:tctx) [g |-  mstep M N] -> [g |- algeqNeu M P T] ->
    [g |- eqtm M N] =
/ total /
?
% fn s => fn e => case s of
% | [g |-  refl] => [g |- refltm]
% | [g |-  trans1 S1 (MS)] => impossible (neutral_doesnt_step [g |-  S1] e)
;

% Corollary of determinacy
proof determinacy' :
    (g:tctx)
    [g |- mstep M M1] -> [g |- mstep M M2] ->
    [g |- algeqNeu N1 M1 T] -> [g |- algeqNeu M2 N2 T] ->
    [g |- eqtm M1 M2] =
/ total /
?
% fn s1 => fn s2 => fn e1 => fn e2 => case (confluence s1 s2) of
% | Common s1' s2' =>
%   let [g|-refltm] = neutral_mstep s1' (algeqNeuSym e1) in
%   let [g|-refltm] = neutral_mstep s2' e2 in
%   [g|-refltm]
;

% Transitivity of algorithmic equivalence
proof algeqNeuTrans :
    (g:tctx)
    [g |- algeqNeu N1 N2 T] -> [g |- algeqNeu N2 N3 T] ->
    [g |- algeqNeu N1 N3 T] =
/ total 1 /
?
% fn a1 => fn a2 => case a1 of
% | [g |- #p.2] => let [g |- #q.2] = a2 in [g |- #q.2]
% | [g |- alg_app (A1') (B1)] =>
%   let [g |- alg_app (A2') (B2)] = a2 in
%   let [|- refltp] = algeqNeuUnique [g |- A1'] [g |- A2'] in
%   let [g |- R1] = algeqNeuTrans [g |- A1'] [g |- A2'] in
%   let [g |- R2] = algeqTrans [g |- B1] [g |- B2] in
%   [g |- alg_app (R1) (R2)]
and proof algeqTrans :
    (g:tctx)
    [g |- algeq N1 N2 T] -> [g |- algeq N2 N3 T] ->
    [g |- algeq N1 N3 T] =
/ total 1 /
?
% fn a1 => fn a2 => case a1 of
% | [g |- alg_base (S1) (S2) (A1')] =>
%   let [g |- alg_base (S2') (S3) (A2')] = a2 in
%   let [g |- refltm] = determinacy' [g |- S2] [g |- S2'] [g |- A1'] [g |- A2'] in
%   let [g |- R] = algeqNeuTrans [g |- A1'] [g |- A2'] in
%   [g |- alg_base (S1) (S3) (R)]
% | [g |- alg_arr (\x.\u.A1')] =>
%   let [g |- alg_arr (\x.\u.A2')] = a2 in
%   let [g,b:block x:tm,y:algeqNeu x x T |- R[..,b.1,b.2]]
%       = algeqTrans [g,b:block x:tm,y:algeqNeu x x _ |- A1'[..,b.1,b.2]]
% 		    [g,b:block x:tm,y:algeqNeu x x _ |- A2'[..,b.1,b.2]] in
%   [g |- alg_arr (\x.\u.R)]
;

% Transitivity of logical equivalence
proof logEqTrans : {T:[|- tp]}
   Log [g |- M sim N] [ |- T]
 -> Log [g |- N sim P] [ |- T]
 -> Log [g |- M sim P] [ |- T] =
/ total 1 /
?
% mlam T => fn e1 => fn e2 => case [|- T] of
% | [|- i] =>
%   let LogBase a1 = e1 in
%   let LogBase a2 = e2 in LogBase (algeqTrans a1 a2)
% | [|- arr T1 T2] =>
%   let LogArr [g |-  M] [g |-  N] f1 = e1 in
%   let LogArr [g |-  N] [g |-  P] f2 = e2 in
%   LogArr [g |-  M] [g |-  P] (mlam h,$W,V1,V2 => fn v =>
%    logEqTrans [|- T2] (f1 [h] [h |- $W] [h |-  V1] [h |-  V2] v)
%                       (f2 [h] [h |- $W] [h |-  V2] [h |-  V2]
%                       (logEqTrans [|- T1] (logEqSym _ v) v)))
;

schema ctx = tm;

dctx : type.
nil : dctx.
with : dctx -> tp -> dctx.

--infix with 5 right.

inductive Lookup : {G:[|-dctx]}(g:ctx)[g |-  tm] -> [ |- tp] -> ctype  =
| Top : Lookup [|- G with T] [g,x:tm |-  x] [ |- T]
| Pop : Lookup [|- G] [g |- #p] [ |- T]
      -> Lookup [|- G with S] [g,x:tm |- #p[..]] [ |- T];

inductive Decl : {G:[|-dctx]}(g:ctx) [g |- tmpair ] -> [ |- tp] -> ctype
 =
| DecBeta : Decl [|- G with T] [g,x:tm |- M2 sim N2] [ |- S]
          -> Decl [|-G] [g |- M1 sim N1] [ |- T]
          -> Decl [|-G] [g |- (app (lam (\x. M2)) M1) sim N2[..,N1]] [ |- S]
| DecLam :  Decl [|- G with T] [g,x:tm |- M sim N] [ |- S]
          -> Decl [|-G] [g |- (lam (\x. M)) sim (lam (\x. N))] [ |- arr T S]
| DecExt :  Decl [|- G with T] [g,x:tm |- (app M[..] x) sim (app N[..] x)] [ |- S]
          -> Decl [|-G] [g |- M sim N] [ |- arr T S]
| DecVar : Lookup [|-G] [g |- #p] [ |- T]
         -> Decl [|-G] [g |- (#p) sim (#p)] [ |- T]
| DecApp : Decl [|-G] [g |- M1 sim M2] [ |- arr T S]
         -> Decl [|-G] [g |- N1 sim N2] [ |- T]
         -> Decl [|-G] [g |- (app M1 N1) sim (app M2 N2)] [ |- S]
| DecSym : Decl [|-G] [g |- M sim N] [ |- T]
         -> Decl [|-G] [g |- N sim M] [ |- T]
| DecTrans : Decl [|-G] [g |- M sim N] [ |- T]
           -> Decl [|-G] [g |- N sim O] [ |- T]
           -> Decl [|-G] [g |- M sim O] [ |- T]
;

% Logical equivalence of substitutions. Written _|-s_simsim_:_ in the paper
% Two substitutions are logically related if their terms are pairwise
% logically related.
inductive LogSub :
    {g0:ctx} (h:tctx) {$S1: [h |- g0]} {$S2: [h |- g0]} {G:[|-dctx]}
    ctype =
| Nil : LogSub [] [h |- ^] [h |- ^] [|-nil]
| Dot : LogSub [g0] [h |- $S1] [h |- $S2] [|- G]
       -> Log [h |- M1 sim M2] [ |- T]
       -> LogSub [g0,x:tm] [h |- $S1, M1] [h |- $S2, M2] [|- G with T]
;

% Looking up a variable in logically equivalence substitutions gives a logical equivalence
proof lookup :
    Lookup [|-G] [g |- X] [ |- T] -> LogSub [g] [h |- $S1] [h |- $S2] [|- G] ->
    Log [h |- X[$S1] sim X[$S2]] [ |- T] =
/ total 1 /
?
% fn v => fn s => case v of
% | Top =>    let Dot s' e = s in e
% | Pop v' => let Dot s' e = s in lookup v' s'
;

% Monotonicity of logical equivalence on substitutions
proof wknLogSub :
    {h0:tctx} {h:tctx} {$W:[h0 |- h]}
    LogSub [g] [h |- $S1] [h |- $S2] [|- G] ->
    LogSub [g] [h0 |- $S1[$W]] [h0 |- $S2[$W]] [|- G]=
 / total 4 /
?
% mlam h0,h,$W => fn es => case es of
% | Nil => Nil
% | Dot rs' rN  => Dot (wknLogSub [h0] [h] [h0 |- $W] rs') (logEq_Monotone [h0] [h0 |- $W] rN)
;

% % Symmetry of logical equivalence on substitutions
proof logEqSubSym :
    LogSub [g] [h |- $S1] [h |- $S2] [|-G] ->
    LogSub [g] [h |- $S2] [h |- $S1] [|-G] =
/ total 1 /
?
% fn e => case e of
% | Nil => Nil
% | Dot e' e1 => Dot (logEqSubSym e') (logEqSym _ e1)
;

% % Transitivity of logical equivalence on substitutions
proof logEqSubTrans :
    LogSub [g] [h |- $S1] [h |- $S2] [|-G] ->
    LogSub [g] [h |- $S2] [h |- $S3] [|-G] ->
    LogSub [g] [h |- $S1] [h |- $S3] [|-G] =
/ total 1 /
?
% fn e1 => fn e2 => case e1 of
% | Nil => let Nil = e2 in Nil
% | Dot e1' x1 => let Dot e2' x2 = e2 in Dot (logEqSubTrans e1' e2') (logEqTrans _ x1 x2)
;

% Fundamental theorem
proof thm :
    Decl [|-G] [g |- M1 sim M2] [|- T ] ->
    LogSub [g] [h |- $S1] [h |- $S2] [|-G] ->
    Log [h |- M1[$S1] sim M2[$S2]] [|- T] =
/ total 1 /
?
% fn d , s =>
% let s : LogSub [g] [h |- $S1] [h |- $S2] [|-G] = s in
% case d of
% | DecVar v => lookup v s
% | DecApp d1 d2 => let LogArr [h |-  M1] [h |-  M2] f = thm d1 s in
%     f [h] [h |- ..] [h |-  _] [h |-  _] (thm d2 s)
% | (DecLam d1) : Decl [|-G] [g |- (lam (\x. M1)) sim (lam (\x. M2))] [ |- arr T S] =>
%    LogArr [h |-  lam (\x. M1[$S1[..], x])] [h |-  lam (\x. M2[$S2[..], x])]
%      (mlam h0, $W, N1, N2 => fn rn =>
%      let q2 = thm d1 (Dot (wknLogSub [h0] [h] [h0 |- $W] s) rn) in
%      closed _ [h0 |-  trans1 beta refl] [h0 |-  trans1 beta refl] q2
%    )
% | DecExt d1 =>
%   LogArr [h |-  _] [h |-  _] (mlam h0,$W,N1,N2 => fn rn =>
%    thm d1 (Dot (wknLogSub [h0] [h] [h0 |- $W] s) rn)
%   )
% | DecBeta d1 d2 =>
%    closed _ [h |-  trans1 beta refl] [h |-  refl] (thm d1 (Dot s (thm d2 s)))
% | DecSym d1 => logEqSym _ (thm d1 (logEqSubSym s))
% | DecTrans d1 d2 => logEqTrans _ (thm d1 s) (thm d2 (logEqSubTrans (logEqSubSym s) s))
;

inductive IdSub : {G:[|-dctx]}{g:ctx}(g':tctx){$Id:[g' |- g]} ctype =
| INil : IdSub [|-nil] [] [|- ^]
| ISnoc : IdSub [|-G] [g] [g' |- $Id]
       -> IdSub [|- G with T] [g,x:tm] [g',b:block x:tm,y:algeqNeu x x T[] |- $Id[..], b.1]
;

% % The identity substitution is logically related to itself
proof idLogSub :
    IdSub [|-G] [g] [g' |- $Id] ->
    LogSub [g] [g' |- $Id] [g' |- $Id] [|-G] =
/ total 1 /
?
%fn r => case r of
%| INil => Nil
%| ISnoc (r' : IdSub [|- G] [g] [g' |- $Id]) =>
%  let q = idLogSub r' in
%  Dot (wknLogSub [g',b:block x:tm,a:algeqNeu x x _] [g'] [g',b |-..] (idLogSub r'))
%      (reflect _ [g',b:block x:tm,y:algeqNeu x x _ |- b.2])
;

proof completeness :
    IdSub [|-G] [g] [g' |- $Id] ->
    Decl [|-G] [g |- M1 sim M2] [ |- T] ->
    [g' |- algeq M1[$Id] M2[$Id] T[]] =
/ total /
?
%fn r => fn e => reify _ (thm e (idLogSub r))
;
