% Progress and preservation for System F with natural numbers and iso-recursive types.

tp : type.
tm : type.

% Types
nat : tp.
arr : tp -> tp -> tp.  % infix left 5 =>.
forall : (tp -> tp) -> tp.
mu : (tp -> tp) -> tp.

% Terms
z : tm.
s : tm -> tm.
app  : tm -> tm -> tm.  % infix left 5 @.
roll : tm -> tp -> tm.
unroll : tm -> tp -> tm.
lam : tp -> (tm -> tm) -> tm.
tlam : (tp -> tm) -> tm.
ann   : tm -> tp -> tm.  % infix left 5 #.

% Typing
has : tm -> tp -> type. % infix left 5 is.

 is_z   :
       % ----------
         has z  nat.

is_s   : has E nat ->
         % -----------
         has (s E) nat.


is_roll : has E (T (mu \a. T a)) ->
        % -----------------------------------------------
          has (roll E (mu \a. T a))  (mu \a. T a).

is_unroll : has E  (mu (\a. T a)) ->
        % ----------------------------------------------------
          has (unroll E (mu \a. T a))  (T (mu \a. T a)).

is_@   : has E1  (arr T1 T2) ->
         has E2 T1 ->
       % -------------------
         has (app E1 E2)  T2.

is_lam : ({x:tm} has x T1 -> has (E x) T2) ->
       % -----------------------------------
         (has (lam T1 (\x. E x))  (arr T1 T2)).

is_tlam : ({a:tp}has (E a) (T a)) ->
       % -----------------------------------
         (has (tlam (\a. E a))  (forall (\a. T a))).

is_#   : has E  (forall (\a. T1 a)) ->
       % ----------------------------
         (has (ann E T2) (T1 T2)).

% Values
value : tm -> type.

value_z : value z.

value_s : value V ->
        % -----------
          value (s V).

value_roll : value E ->
           % --------------------
             value (roll E T).

value_lam : value (lam T (\x. E x)).

value_tlam : value (tlam (\a. E a)).


% Operational semantics

step : tm -> tm -> type. % infix left 5 step.

step_s : step E E' ->
     % ---------------
       step (s E) (s E').

step_@1 : step E1 E1' ->
      % --------------------------
        (step (app E1 E2)  (app E1' E2)).

step_@2 : value E1 ->
        (step E2 E2') ->
      % --------------------------
        (step (app E1 E2) (app E1 E2')).

step_@3 : value E2 ->
      % --------------------------
        (step (app (lam T (\x. E1 x)) E2) (E1 E2)).

step_#1 : (step E E') ->
      % --------------------------
        (step (ann E T) (ann E' T)).

step_#2 :
      % ------------------------------
        step (ann (tlam (\a. E a)) T) (E T).

step_unroll1 : step E E' ->
           % -----------------------------
            step (unroll E T)  (unroll E' T).

step_unroll2 : value E ->
           % -----------------------------
            step (unroll (roll E T1) T2) E.

step_roll : step E E' ->
        % -------------------------
          step (roll E T) (roll E' T).



% Preservation

rec pres : [ |- has E T] -> [ |- step E E'] -> [ |- has E' T] =
 / total ev (pres e t e' d ev)/
fn d => fn ev => case ev of
| [ |- step_s EV] =>
 (let [ |- is_s D] = d in
  let [ |- D']      = pres [ |- D] [ |- EV] in
    [ |- is_s D']
)
| [ |- step_@1 EV1] =>
 (let [ |- is_@ D1 D2] = d in
  let [ |- D1']       = pres [ |- D1] [ |- EV1] in
    [ |- is_@ D1' D2]
 )
| [ |- step_@2 V EV2]  =>
 (let [ |- is_@ D1 D2] = d in
  let [ |- D2']       = pres [ |- D2] [ |- EV2] in
    [ |- is_@ D1 D2']
 )

| [ |- step_@3 V] =>
  let [ |- is_@ (is_lam (\x. (\d. D1'))) D2] = d in  [ |- D1'[_,D2]]

| [ |- (step_#1 EV)] =>
 (let [ |- is_# D]  = d in
  let [ |- D']         = pres [ |- D] [ |- EV] in
    [ |- is_# D']
 )
| [ |- step_#2] =>
  let  {D':[a:tp |-  has E T] }
     [ |- is_# (is_tlam (\a. D'))]  : [ |- has (ann _ T2) (T[T2])] = d in [ |- D'[T2]]

| [ |- step_unroll2 VL] =>
  let [ |- is_unroll (is_roll D)]  = d in  [ |- D]

| [ |- step_unroll1 EV] =>
  (let [ |- is_unroll D] = d in
  let [ |- D']            = pres [ |- D] [ |- EV] in
    [ |- is_unroll D']
  )
| [ |- step_roll EV] =>
  let [ |- is_roll D] = d in
  let [ |- D']         = pres [ |- D] [ |- EV] in
    [ |- is_roll D']

;






% Progress

% Introduce a new type family to distinguish between the case where a term can
% take a step and it is a value.
step_or_val : tm -> type.

step : (step E E') -> step_or_val E.
val : (value E) -> step_or_val E.




rec progress : [ |- has E T] -> [ |- step_or_val E] =
 / total d (progress e t d)/
fn d => case d of
 | [ |- is_z] => [ |- val value_z]
 | [ |- is_s D] =>
   (case    progress [ |- D]   of
    | [ |- step EV] => [ |- step (step_s EV)]
    | [ |- val VL]  => [ |- val (value_s VL)]
   )
 | [ |- is_@ D1 D2] =>
   (case   progress [ |- D1]   of
    | [ |- step EV] => [ |- step (step_@1 EV)]
    | [ |- val value_lam]  =>
      (case  progress [ |- D2]   of
        | [ |- step EV] => [ |- step (step_@2 value_lam EV)]
        | [ |- val VL2] => [ |- step (step_@3 VL2)]
       )
    | [ |- val value_z]      => impossible [ |- D1]
    | [ |- val (value_s _ )] => impossible [ |- D1]
    | [ |- val value_tlam]      => impossible [ |- D1]
    | [ |- val (value_roll _ )] => impossible [ |- D1] )
| [ |- is_lam (\x.\d. D1)] => [ |- val value_lam]

| [ |- is_tlam (\a. D)]       => [ |- val value_tlam]

| [ |- is_# D] =>
  (case   progress [ |- D]   of
    | [ |- step EV] => [ |- step (step_#1 EV)]
    | [ |- val value_tlam]  => [ |- step (step_#2)]
    | [ |- val value_z]         => impossible [ |- D]
   | [ |- val (value_s _ )]    => impossible [ |- D]
   | [ |- val value_lam]       => impossible [ |- D]
   | [ |- val (value_roll _ )] => impossible [ |- D] )
| [ |- is_roll D] =>
  (case    progress [ |- D]  of
   | [ |- step EV] => [ |- step (step_roll EV)]
   | [ |- val VL]  => [ |- val (value_roll VL)]
  )

| [ |- is_unroll D] =>
  (case    progress [ |- D]  of
   | [ |- step EV] => [ |- step (step_unroll1 EV)]
   | [ |- val (value_roll VL)] => [ |- step (step_unroll2 VL)]
   | [ |- val value_z]         => impossible [ |- D]
   | [ |- val (value_s _ )]    => impossible [ |- D]
   | [ |- val value_lam]       => impossible [ |- D]
   | [ |- val value_tlam]      => impossible [ |- D] )
;

%{

% Corresponding proof in Twelf

prog_@_lemma :  (has E1 (arr T1 T2)) -> step_or_val E1 -> step_or_val E2 ->
                step_or_val (app E1 E2) -> type.
% mode prog_@_lemma +D +SV1 +SV2 -SV3.

prog_@_lemma_s  : prog_@_lemma _ (step EV) _ (step (step_@1 EV)).
prog_@_lemma_vs : prog_@_lemma _ (val VL) (step EV) (step (step_@2 VL EV)).
prog_@_lemma_vs : prog_@_lemma _ (val VL1) (val VL2) (step (step_@3 VL2)).

% worlds () (prog_@_lemma D SV1 SV2 SV3).
% total {SV1 SV2} (prog_@_lemma _ SV1 SV2 _).


prog_roll_lemma :  {T:tp} step_or_val E ->
                   step_or_val (roll E T) -> type.
% mode prog_roll_lemma +T +SV1 -SV2.

prog_roll_lemma_s : prog_roll_lemma _ (step EV) (step (step_roll EV)).
prog_roll_lemma_v : prog_roll_lemma _ (val VL) (val (value_roll VL)).

% worlds () (prog_roll_lemma T SV1 SV2).
% total {SV1} (prog_roll_lemma _ SV1 _).

prog_unroll_lemma :  has E  (mu (\a. T a)) ->
                     step_or_val E ->
                     step_or_val (unroll E (mu (\a. T a))) -> type.
% mode prog_unroll_lemma +D +SV1 -SV2.

prog_unroll_lemma_s : prog_unroll_lemma _ (step EV) (step (step_unroll1 EV)).
prog_unroll_lemma_v : prog_unroll_lemma _ (val (value_roll VL)) (step (step_unroll2 VL)).

% worlds () (prog_unroll_lemma D SV1 SV2).
% total {SV1} (prog_unroll_lemma _ SV1 _).


prog_#_lemma :  {T2:tp} (has E (forall (\a. T1 a))) -> step_or_val E ->
                step_or_val (ann E T2) -> type.
% mode prog_#_lemma +T2 +D +SV1 -SV2.

prog_#_lemma_s : prog_#_lemma _ _ (step EV) (step (step_#1 EV)).
prog_#_lemma_v : prog_#_lemma _ _ (val VL) (step (step_#2)).

% worlds () (prog_#_lemma T2 D SV1 SV2).
% total {SV1} (prog_#_lemma _ _ SV1 _).

prog_s_lemma :  step_or_val E -> step_or_val (s E) -> type.
% mode prog_s_lemma +SV1 -SV2.

prog_s_lemma_s  : prog_s_lemma (step EV) (step (step_s EV)).
prog_s_lemma_v  : prog_s_lemma (val VL) (val (value_s VL)).

% worlds () (prog_s_lemma SV1 SV2).
% total (SV1) (prog_s_lemma SV1 _).

% Now we can prove progress by simply using the lemma

prog : (has E T) -> step_or_val E -> type.
% mode prog +D -SV.

prog_z   : prog (is_z) (val value_z).

prog_s   : prog_s_lemma SV SV' ->
           prog D SV ->
         % ---------------------------
           prog (is_s D) SV'.

prog_@   : prog_@_lemma D1 SV1 SV2 SV3 ->
           prog D1 SV1 ->
           prog D2 SV2 ->
         % ------------------------------
           prog (is_@ D1 D2) SV3.

prog_#   : prog_#_lemma _ D SV SV' ->
           prog D SV ->
         % ------------------------------
           prog (is_# D) SV'.

prog_roll : prog_roll_lemma (mu (\a. T a)) SV SV' ->
            prog D SV ->
          % -----------------------
            prog (is_roll D) SV'.
%            prog ((is_roll D) : (roll E (mu ([a:tp] T a)) is (mu ([a:tp] T a)))) SV'.

prog_unroll : prog_unroll_lemma D SV SV' ->
              prog D SV ->
            % -----------------------
              prog (is_unroll D) SV'.

prog_lam :
         % --------------------------------------------------------
           prog (is_lam (\x.\d. D1 x d)) (val value_lam).

prog_tlam :
         % -------------------------------------------
           prog (is_tlam (\a. D a)) (val value_tlam).

% worlds () (prog D SV).
% total D (prog D _).

% QED
}%
