tp: type.
nat: tp.
arr: tp -> tp -> tp.

exp : tp -> type.

z : exp nat.
s  : exp nat -> exp nat.
lam : (exp T1 -> exp T2) -> exp (arr T1 T2).
coe : exp T -> exp T.

schema w = some [t:tp] exp t;

rec test : (g:w) [g |- exp T] -> [g |- exp T] =
  fn e => case e of
    | [g |- coe (E[..,x])] => [g |- coe (E[..,x])]
;
