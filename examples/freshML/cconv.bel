term: type.
lam   : (term -> term) -> term.
app   : term -> term -> term.


target: type.

tunit: target.
tfst: target -> target.
tsnd: target -> target.
tpair: target -> target -> target.
tapp : target -> target -> target ->  target.
tabs : (target -> target -> target) -> target.
tlet :  target -> (target -> target) -> target.

nat: type.
z: nat.
s: nat -> nat.
plus: nat -> nat -> nat.
mult: nat -> nat -> nat.

env:type.
enil : env.
econs:  term -> env -> env.


schema tctx =  term  ;

rec genTVar :(g:tctx){#p:[g |- term]} [g |- env] -> [arg':target, xve:target |-  target] =
mlam #p => fn env => case env  of
| [g |- enil] => [arg', xve |-  tfst xve]
| [g |- econs (H ..) (T ..)]  =>
  if [g |- H ..] == [g |- #p ..] then
     [arg', xve |-  arg']
  else
     (let [arg':target, xve:target |-  U arg' xve] = genTVar [g |- #p .. ] [g |- T .. ]  in
     [arg', xve |-  U \ arg' (tsnd xve)])
;


rec build: (g:tctx)[g |- env] -> [g |- env] -> [arg':target, xve:target |-  target] =
fn lorig => fn l => case l of
| [g |- enil] => [arg', xve |-  tunit]
| [g |- econs (#p .. ) (Xs .. )] =>
  let [arg':target, xve:target |-  U arg' xve] = genTVar [g |- #p .. ] lorig in
  let [arg':target, xve:target |-  V arg' xve] = build lorig [g |- Xs .. ] in
    [arg',xve |-  tpair (U arg' xve) (V arg' xve)]
;


rec convert:(g:tctx)[g |- env] -> [g,x:term |-  term]
	    -> [arg':target, xve:target |-  target] =
fn env => fn t => case t of
| [g,x:term |-  x] =>      [arg', xve |-  arg']
| [g,x:term |-  #p ..] =>
    let [g |- L ..] = env in
    genTVar [g |- #p .. ] [g |- L .. ]

| [g,y:term |-  lam \x. E .. y x] =>
  let [g |- L ..] = env in
  let [arg':target, xve:target |-  Ve arg' xve] =
    build [g |- L ..] [g |- L ..] in

  let [arg':target, xve:target |-  T arg' xve] =
    convert [g,y:term |-  econs y (L .. )] [g,y,x |-  E .. y x] in
% or should this be ...
%     convert [g,x:term] ([g,x] econs x (L .. )) ([g,x,y] E .. y x) in

   [arg',xve |-  tpair (tabs \arg'. \xve. T arg' xve ) (Ve arg' xve)]

| [g, x:term |-  app (E1 .. x) (E2 .. x)] =>
  let [g |- L ..] = env in
  let [arg':target,xve:target |-  T1 arg' xve] =
        convert [g |- L .. ] [g,x |- E1 .. x] in
  let [arg':target, xve:target |-  T2 arg' xve] =
        convert [g |- L .. ] [g,x |- E2 .. x] in

   [arg',xve |-  tlet  (T1 arg' xve)
                \closure .  tapp (tfst closure) (tsnd closure)  (T2 arg' xve)]


;


%{ rec cc : [ |- term] ->  [ |- target] =
fn e =>
 let [ |- E] = e in
 let [arg':target, xve:target |-  T] =
     convert [ |- enil] [x |- E] in
   [ |- T]
;



let t1 = cc [ |- lam (\x. (lam (\y. app x y)))] ;
let t2 = cc [ |- lam (\x. (lam (\y. app y x)))] ;
 }%


%{

let a = 2
    b = 5
    f = x . y . a * x + b * y
in f 7 3

is equivalent to

(lam a. (let b = 5 f = \x.\y. a * x + b * y))  2
(lam a. (lam b. let f = \x.\y. a * x + b * y) 5)  2
(lam a. (lam b. (lam f. f 7 3) (\x.\y. a * x + b * y)) 5)  2



let v = cc ([ ] app (lam \a. (app (lam \b. (app  (lam \f. app (app f (s z)) (s s s z))   (lam \x.\y. plus (mult a x) (mult b y)))
                                (s s s s s z)))
                      (s s z)))

;

}%

%{
pos: nat -> type.
p_z: pos z.
p_s : pos N -> pos (s N).

schema ctx = some [n:nat] block x:term .  pos n ;

rec genTVar : nat[] -> target[arg':target, xve:target] =
fn n => case n of
| [ ] z => [arg', xve] tfst xve
| [ ] s N =>
   let [arg':target, xve:target] U xve = genTVar ([ ] N )   in
     [arg', xve] U (tsnd xve)
;

% rec str : {env:(ctx)*}

rec convert : {env:(ctx)*} term[env,arg:term]
	      -> target[arg':target, xve:target] =
FN env => fn t => case t of
| [env, arg:term] arg => [arg', xve] arg'

| {#p::(block x:term. pos N)[env]}
  [env, arg:term] #p.1 ..  =>  genTVar ([ ] N)

| [env, arg:term] lam \x. Body .. x =>
  % should strengthen env to env' to only capture
  % the free variables in \x. Body .. x






;
}%
