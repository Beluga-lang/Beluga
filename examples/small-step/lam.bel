% Progress and preservation for the Church-style simply-typed lambda calculus

tp : type.  --name tp T.
tm : type.  --name tm M.

% Types
arr : tp -> tp -> tp.

% Terms
app : tm -> tm -> tm.
lam : tp -> (tm -> tm) -> tm.

% Typing
has_type : tm -> tp -> type.  --name has_type D.

is_app : has_type E1 (arr T1 T2) ->
         has_type E2 T1 ->
       % -------------------
         has_type (app E1 E2) T2.

is_lam : ({x:tm} has_type x T1 -> has_type (E x) T2) ->
       % -----------------------------------
         has_type (lam T1 (\x. E x)) (arr T1 T2).

% Values
value : tm -> type.  --name value V.

value_lam : value (lam T (\x. E x)).

% Operational semantics

step: tm -> tm -> type.  --name step S.

s_app1 : step E1 E1' ->
      % --------------------------
        step (app E1 E2) (app E1' E2).

s_app2 : value E1 ->
         step E2 E2' ->
      % --------------------------
        step (app E1 E2) (app E1 E2').

s_app3 : value E2 ->
      % --------------------------
        step (app (lam T (\x. E1 x))  E2)  (E1 E2).


% Preservation
rec pres : [ |- has_type E T] -> [ |- step E E'] -> [ |- has_type E' T] =
/ total s (pres e t e' d s) /
fn d => fn s =>
case s of
  [ |- s_app1 S1] =>
    let [ |- is_app D1 D2] = d in
    let [ |- D1']          = pres [ |- D1] [ |- S1] in
      [ |- is_app D1' D2]

 | [ |- s_app2 V S2] =>
    let [ |- is_app D1 D2] = d in
    let [ |- D2']            = pres [ |- D2] [ |- S2] in
      [ |- is_app D1 D2']

 | [ |- s_app3 V] =>
   let [ |- is_app (is_lam (\x. (\d. D1))) D2] = d in
     [ |- D1[_,D2]]

;


% Progress

% Introduce a new type family to distinguish between the case where a term can
% take a step and it is a value.

step_or_val : tm -> type.

step_to : step E E' -> step_or_val E.
val     :  value E   -> step_or_val E.


% The usual declarative proof of progress will not work because it
% requires Twelf to perform output splitting when it attempts to coverage
% check the application case. This is the Beluga implementation.


rec prog : [ |- has_type E T] -> [ |- step_or_val E] =
/ total d (prog e t d) /
fn d =>
 case d of
  [ |- is_app D1 D2]  =>
    (case   (prog [ |- D1])    of
        [ |- step_to EV]    =>  [ |- step_to (s_app1 EV)]
      | [ |- val VL1]       =>
         (case   (prog [ |- D2])   of
            [ |- step_to EV]   =>  [ |- step_to (s_app2 VL1 EV)]
          | [ |- val VL2]      =>
            let [ |- value_lam]	= [ |- VL1] in
	    [ |- step_to (s_app3 VL2)]
	 )
       )
| [ |- is_lam (\x. (\d. D1))]  =>  [ |- val value_lam]
;


rec prog' : [ |- has_type E T] -> [ |- step_or_val E] =
/ total d (prog' e t d)/
fn d =>  case d of
| [ |- is_app D1 D2]  =>
    (case   (prog' [ |- D1])    of
        [ |- step_to EV]     =>  [ |- step_to (s_app1 EV)]
      | [ |- val value_lam]  =>
         (case   (prog' [ |- D2])   of
            [ |- step_to EV]   =>  [ |- step_to (s_app2 value_lam EV)]

           | [ |- val VL2]     =>  [ |- step_to (s_app3 VL2)]
	    )
%      | [ ] {}  % Prove explicitely that the other cases are impossible
       )
| [ |- is_lam (\x. (\d. D1))]  =>  [ |- val value_lam]
;
