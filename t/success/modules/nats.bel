module Nats = struct
  nat : type.
  z : nat.
  s : nat -> nat.

  rec suc : [ |- nat ] -> [ |- nat] =
  fn n => let [ |- N ] = n in [ |- s N];

  let two = [ |- s (s z)];
  let three = suc two;
end;

let x = [ |- Nats.z ];

let y = [ |- Nats.s Nats.z];

let z = Nats.suc [ |- Nats.z ];

list : Nats.nat -> type.

nil : list Nats.z.

cons : Nats.nat -> list N -> list (Nats.s N).


let l1 = [ |- cons Nats.z (cons (Nats.s Nats.z) nil)];

module Arith = struct
	#open Nats

	rec add : [ |- nat ] -> [ |- nat ] -> [ |- nat ] =
	fn x, y => case x of
	| [ |- z ] => y
	| [ |- s N ] => 
		let [ |- N' ] = add [ |- N ] y in
		[ |- s N'];

	let five = add two three;
end;


let two' = Nats.two;


#open Nats
let l2 = [ |- cons z nil];