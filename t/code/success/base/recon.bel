% The following are a bunch of test-case raising errors (correctly!)

tp: type. --name tp T.
nat: tp.
bool:tp.
arr: tp -> tp -> tp.

exp: tp -> type.  --name exp E.
z : exp nat.
s : exp nat -> exp nat.
tt: exp bool.
match: exp T -> exp S -> (exp nat -> exp S) -> exp S.


lam: (exp T1 -> exp T2) -> exp (arr T1 T2).
app: exp (arr T1 T2) -> exp T1 -> exp T2.


% rec test  : (exp T)[ ] -> (exp T)[ ] =
% fn e => case e of
%   [ ] lam (\x. x)      => [ ] lam (\x. x)
% | [ ] lam (\x. F)  => [ ] lam (\x. F)
% | [ ] lam (\x. (F x))  => [ ] lam (\x. (F x))
% ;

%{
rec test0 : (exp T)[ ] -> (exp T)[ ] =
 fn e => case e of
  [ ] lam (\x. (E x)) =>
     case test0 ([ ] lam (\x. (E x))) of
       [ ] lam (\x. x) => [ ] lam (\x. x)
     | [ ] lam (\x. F) => [ ] lam (\x. F)
;

}%
tExp: type.

exS : exp S â†’ tExp.

%{
rec test1 : (exp T)[ ] -> tExp[ ] =
fn e => case e of
 [ ] lam (\x. (E x)) =>
   test1 ([ ] lam (\x. (E x)))
;


 rec test2 : (exp T)[ ] -> tExp[ ] =
  fn e => case e of
   [ ] lam (\x. (E x)) =>
     let [ ] exS F = test2 ([ ] lam (\x. (E x))) in
	[ ] exS F
;

rec test3 :  (exp T)[ ] -> tExp[ ] =
  fn e => case e of
   [ ] lam (\x. (E x)) =>
	let [ ] exS (lam (\x. x)) = test3 ([ ] lam (\x. (E x))) in
          [ ] exS z
  ;

% Not working:
% rec test :  (exp T)[ ] -> tExp[ ] =
%   fn e => case e of
%    [ ] lam (\x. (E x)) =>
% 	let [ ] exS (lam (\x. x)) = test ([ ] lam (\x. (E x))) in
%           [ ] exS (lam (\x. x)) % Error free uninstantiated variables left.
%   ;


}%
rec test4 : [ |- exp T] -> [ |- tExp] =
fn e => case [ |- z] of [ |- U] => [ |- exS U] ;
