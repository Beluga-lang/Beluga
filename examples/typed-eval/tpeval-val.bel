% Type-preserving substitution-based interpreter
%
% Author: Brigitte Pientka
%
% TODO extend with functions and function application

tp   : type. --name tp T.
nat  : tp.
bool : tp.

exp  : tp -> type.  --name exp E.
val   : tp -> type. --name val V.

tt   : exp bool.
ff   : exp bool.

z    : exp nat.
suc  : exp nat -> exp nat.
eq   : exp nat -> exp nat -> exp bool.

iff  : exp bool -> exp T -> exp T -> exp T.
letv :  exp T1 -> (val T1 -> exp T2) -> exp T2.
value: val T -> exp T.


v_tt  : val bool.
v_ff  : val bool.
v_z   : val nat.
v_suc : val nat -> val nat.


rec equal : [ |- val nat] -> [ |- val nat] -> [ |- val bool] =
/ total x (equal x)/
fn x => fn y =>
  case x of
    [ |- v_z]  =>
      (case y of
          [ |- v_z]     => [ |- v_tt]
        | [ |- v_suc E] => [ |- v_ff])

  | [ |- v_suc E] =>
      (case y of
         [ |- v_z]      => [ |- v_ff]
      |  [ |- v_suc V]  => equal [ |- E] [ |- V])
;




rec eval : [ |- exp T] -> [ |- val T] =
% / total e (eval e)/
 fn e => case e of
  | [ |- tt] => [ |- v_tt]

  | [ |- ff] => [ |- v_ff]

  | [ |- z]  => [ |- v_z]

  | [ |- suc E] =>
    let [ |- V]  = eval [ |- E] in [ |- v_suc V]

  | [ |- eq E1 E2] =>
    equal (eval [ |- E1])  (eval  [ |- E2])

  | [ |- iff  E E1 E2]  =>
    (case eval [ |- E] of
       [ |- v_tt] => eval [ |- E1]
     | [ |- v_ff] => eval [ |- E2]
     )

   | [ |- letv  E (\x . E1)]  =>
   let [ |- V] = eval [ |- E] in eval [ |- E1[V]]

   | [ |- value V] => [ |- V]
;

let y1 = eval [ |- suc z] ;

let x1 = eval [ |- z] ;



let y2 = eval [ |- tt];

let y3 = eval [ |- iff tt (suc z) z] ;

let a1 = equal [ |- v_suc v_z] [ |- v_suc v_z] ;
let a2 = equal (eval [ |- suc z]) (eval [ |- suc z]) ;

let a2 = (equal y1) y1;

let y4 = eval [ |- eq (suc z) (suc z)] ;

let y5 = eval [ |- letv (iff tt (suc z) z) (\y. iff (eq (value y) (suc z)) (suc (value y)) (value y))] ;
