% #opts +strengthen;
% Weak normalization for STLC that doesn't go under binders
% Author: Andrew Cave

LF tp : type =
| i :  tp
| arr: tp -> tp -> tp;
 --name tp T.

LF tm : tp -> type =
| app : tm (arr T S) -> tm T -> tm S
| lam : (tm T -> tm S) -> tm (arr T S)
| c : tm i;
--name tm E.

schema ctx = tm T;

LF mstep : tm A -> tm A -> type =
| beta  : mstep (app (lam M) N) (M N)
| stepapp : mstep M M' -> mstep N N' -> mstep (app M N) (app M' N')
| refl : mstep M M
| trans : mstep M M' -> mstep M' M'' -> mstep M M'';
--name mstep S.

LF val : tm A -> type =
| val/c : val c
| val/lam : val (lam M);
--name val V.

LF halts : tm A -> type =
halts/m : mstep M M' -> val M' -> halts M;
--name halts H.

stratified Reduce : {A:[ |- tp]} {M:[ |- tm A]} ctype  =
| I : [ |- halts M] -> Reduce [ |- i] [ |- M]
| Arr :  [ |- halts M] ->
    ({N:[ |- tm A]} Reduce [ |- A] [ |- N] -> Reduce [ |- B] [ |- app M N])
  -> Reduce [ |- arr A B] [ |- M]
;

rec haltsMstep : [ |- mstep M M'] -> [ |- halts M'] -> [ |- halts M] =
/ total (haltsMstep) /
fn s => fn h => let [ |- MS] = s in let [ |- halts/m MS' V] = h in
 [ |- halts/m (trans MS MS') V]

;

% CR1
rec cr1 : Reduce [ |- A] [ |- M] -> [ |- halts M] =
/ total (cr1) /
fn r => case r of
| I h => h
| Arr h f => h;

% CR2
rec closed :{A:[|- tp]}{M: [|- tm A]}{M':[|- tm A]}
            [ |- mstep M M'] -> Reduce [ |- A] [ |- M'] -> Reduce [ |- A] [ |- M] =
/ total a (closed a m m' s r) /
mlam A => mlam M => mlam M' => fn s => fn r => case [ |- A] of
| [ |- i ] =>
  let I ha = r in I (haltsMstep s ha)
| [ |- arr A B] =>
  let Arr ha f = r in
    Arr (haltsMstep s ha)
        (mlam N => fn rn =>
         let [ |- MS] = s in
         closed [ |- B] [ |- app M N]  [ |- app M' N]
                [ |- stepapp MS refl] (f [ |- N] rn))
;

%  h |- #s : g

inductive RedSub : {g:ctx}{$S:[ |- g]} ctype =
| Nil : RedSub  [ ] [ |- ^ ]
| Dot :     RedSub  [g] [ |- $S[^] ]  % $S : g[]
          -> Reduce [|- A] [ |- M]              % A:[ |- tp], M:[ |- tm A]
          -> RedSub [g, x:tm A[]] [ |- $S[^], M ]   %  M : [ |- tm (A ^ [^CtxShift g $S[ |- .] ]
;


rec lookup : {g:ctx}{#p:[g |- tm A[]]}RedSub [g] [ |- $S[^]] -> Reduce [|- A] [ |- #p[$S[^]]] =
 / total p (lookup g a s p) /
mlam g => mlam #p => fn rs => case [g |- #p] of
 | [g',x:tm A |-  x] =>   let (Dot rs' rN) = rs in rN
 | [g',x:tm A |-  #q[..]] => let Dot rs' rN = rs in
                      lookup [g'] [g' |-  #q] rs'
;

rec eval : {g:ctx}{M:[g |- tm A[]]} RedSub [g] [ |- $S[^]] -> Reduce [|- A]  [ |- M[$S[^]]] =
/ total m (eval g a s m) /
 mlam g => mlam M => fn rs => case [g |- M] of
| [g |- #p] => lookup [g] [g |- #p] rs
| [g |- lam (\x. M1)] =>
 Arr [ |- halts/m refl val/lam]
   (mlam N => fn rN =>
    closed _ _ _
           [ |- beta] (eval [g,x:tm _] [g,x |- M1] (Dot rs rN)))
 | [g |- app M1 M2] =>
  let Arr ha f = eval [g] [g |- M1] rs in
  f _ (eval [g] [g |- M2] rs)
| [g' |-  c] => I [ |- halts/m refl val/c]
;

rec weakNorm : {M:[ |- tm A]} [ |- halts M] =
/ total (weakNorm) /
mlam M => cr1 (eval [] [ |- M] Nil)
;
