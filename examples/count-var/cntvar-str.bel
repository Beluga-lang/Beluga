% Variable counting (see Pientka [POPL'08])
% Author:  Brigitte Pientka

LF tp  : type =
  | nat : tp
  | bool: tp
;
--name tp T.

LF exp : tp -> type =
  | z   : exp nat
  | s   : exp nat -> exp nat
  | tt  : exp bool
  | add : exp nat -> exp nat -> exp nat
  | letv: {T1:tp}exp T1 -> (exp T1 -> exp T2) -> exp T2
;
--name exp E x.

schema expCtx = some [t:tp] exp t;

rec plus : [ |- exp nat] -> [ |- exp nat] -> [ |- exp nat] =
fn x => fn y => case x of
| [ |- z]    => y
| [ |- s U]  =>
  (let [ |- V] = plus [ |- U] y in [ |- s V])
| [ |- U]    => y
;

% G, x:exp T |-  z  ==>  0
% G, x:exp T |-  tt  ==>  0
% G, x:exp T |-  x  ==>  1
% G, x:exp T |-  y  ==>  0   y =/= x
% G, x:exp T |-  s U ==> n   if G, x:exp T |- U  ==> n
% G, x:exp T |-  s U  ==> n   if G, x:exp T |- U  ==> n
% G, x:exp T |-  letv U (\y. V y) ===> n1 + n2
% if  G, x: exp T |-  U ==> n1
% if  G, y:exp _ , x: exp T |-  V  y ==> n2

rec cntV : (g:expCtx)  [g, x:exp (T[]) |-  exp (S[])] -> [ |- exp nat] =
fn e => case e of
 | [g,x : exp _  |-  tt]        => [ |- z]
  | [g,x : exp _  |-  (#p )]    => [ |- z]
  | [g,x : exp _  |-  x]         => [ |- s z]
  | [g,x : exp _  |-  z]         => [ |- z]
%  | [g,x : exp _  |-  U ]     => [ |- z]
 | [g,x : exp _  |-  s W]  => cntV [g,x |- W]
 | [g,x : exp _  |-  letv (T1[])  U1 (\y . U2)] =>
   plus  (cntV [g,x |- U1])
         (cntV [g,y:exp _ ,x:exp _ |-  U2[..,x,y]])

| [g,x: exp _  |-  add U W]  =>
   plus (cntV [g,x |- U])
        (cntV [g,x |- W])

;
