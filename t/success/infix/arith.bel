nat :  type.     %name nat N x.
z : nat.
s : nat -> nat.  #postfix s 1.


rec plus : [ |- nat] -> [ |- nat] -> [ |- nat] =
fn x => fn y =>  case x of
| [ |- z]  => y
| [ |- U s]  =>
  let [ |- V] = plus [ |- U ] y in
    [ |- V s]
;

rec plus' : [ |- nat] -> [ |- nat] -> [ |- nat] =
fn x => case x of
| [ |- z]  => (fn y => y)
| [ |- U s] =>
  fn y =>
   let [ |- V] = plus' [ |- U] y in
     [ |- V s]
;


rec mult : [ |- nat] -> [ |- nat] -> [ |- nat] =
fn x => fn y =>  case x of
| [ |- z]  => y
| [ |- U s]  =>
  let [ |- V] = mult [ |- U ] y  in
    plus [ |- V] y
;


rec mult : [ |- nat] -> [ |- nat] -> [ |- nat] =
fn x => fn y => case x of
| [ |- z] => [ |- z]
| [ |- U s] =>
  let [ |- V] = mult [ |- U] y in
    plus [ |- V] y
;


rec fact : [ |- nat] -> [ |- nat] =
fn x => case x of
| [ |- z] => [ |- z s]
| [ |- U s] =>
  let [ |- V] = fact [ |- U]  in
     mult [ |- V] x
;

let x = plus [ |- z] [ |- z s] ;
let y = fact [ |- (z s) s];
let w = fact [ |- ((z s) s) s];

