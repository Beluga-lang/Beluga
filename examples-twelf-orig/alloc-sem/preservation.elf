%%% Simply Typed Lambda Calculus w/ small-step, allocation semantics
%%% Author: Matthew Fluet (June 2005)
%%% preservation.elf

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Preservation: If M1 ==> M2 and |- M1, then |- M2.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pres           : step S1 E1 S2 E2 ->
                 stwf_judg S1 ST1 ->
                 exp_judg ST1 E1 T
                  -> sttp_extend ST1 ST2 ->
                     stwf_judg S2 ST2 ->
                     exp_judg ST2 E2 T -> type.
%mode pres +DStep +DStTcWf1 +DExpTc1 -DStExtend -DStTcWf2 -DExpTc2.

-lam_alloc     : pres (lam_alloc_step DStAlloc)
                      DStTcWf
                      (exp_judg_lam ([x][u] DExpTcF x u))
                      DSttpExtend
                      DStTcWf'
                      DExpTcL
		  <- pres_alloc DStTcWf
		                (val_judg_lam ([x] [u] DExpTcF x u))
		                DStAlloc
		                DSttpExtend
                                DStTcWf'
                                DExpTcL.
-app_ctxt1     : pres (app_ctxt1_step DStep)
                      DStTcWf
                      (exp_judg_app DExpTcE2 DExpTcE1)
                      DSttpExtend
                      DStTcWf'
                      (exp_judg_app DExpTcE2' DExpTcE1')
		  <- pres DStep
                          DStTcWf
                          DExpTcE1
                          DSttpExtend
		          DStTcWf'
                          DExpTcE1'
		  <- sttp_weak_exp_judg DExpTcE2 DSttpExtend DExpTcE2'.
-app_ctxt2   : pres (app_ctxt2_step DStep)
                      DStTcWf
                      (exp_judg_app DExpTcE2 DExpTcE1)
                      DSttpExtend
                      DStTcWf'
                      (exp_judg_app DExpTcE2' DExpTcE1')
		  <- pres DStep
                          DStTcWf
                          DExpTcE2
                          DSttpExtend
		          DStTcWf'
                          DExpTcE2'
		  <- sttp_weak_exp_judg DExpTcE1 DSttpExtend DExpTcE1'.

%% Church-style
-app_beta      : pres (app_beta_step DStLookupL1) DStTcWf
                      (exp_judg_app DExpTcL2 (exp_judg_loc (loc_judg_ DSttpLookupL1)))
                      DSttpExtend
                      DStTcWf
                      DExpTcF1'L2
		  <- sttp_extend_refl _ DSttpExtend
		  <- pres_st_judg_inversion DStTcWf
                                         DSttpLookupL1
                                         DStLookupL1
                                         DExpTcLam
		  <- pres_val_judg_lam_inversion DExpTcLam ([x] [v] DExpTcF1' x v)
 		  <- pres_var ([z][vd] DExpTcF1' z vd) DExpTcL2 DExpTcF1'L2.



%% Curry-style
% -app_beta      : pres (app_beta_step DStLookupL1)
%                       DStTcWf
%                       (exp_judg_app DExpTcL2
%                                  (exp_judg_loc (loc_judg_ DSttpLookupL1)))
%                       DSttpExtend
%                       DStTcWf
%                       DExpTcF1'L2
%                   <- sttp_extend_refl _ DSttpExtend
%                   <- pres_st_judg_inversion DStTcWf
%                                          DSttpLookupL1
%                                          DStLookupL1
%                                          (val_judg_lam DExpTcF1'*)
%                   <- pres_var DExpTcF1'* DExpTcL2 DExpTcF1'L2.



-unit_alloc    : pres (unit_alloc_step DStAlloc)
                      DStTcWf
                      (exp_judg_unit)
                      DSttpExtend
                      DStTcWf'
                      DExpTcL
		  <- pres_alloc DStTcWf
		                (val_judg_unit)
		                DStAlloc
		                DSttpExtend
                                DStTcWf'
                                DExpTcL.
-letunit_ctxt  : pres (letunit_ctxt_step DStep)
                      DStTcWf
                      (exp_judg_letunit DExpTcE2 DExpTcE1)
                      DSttpExtend
                      DStTcWf'
                      (exp_judg_letunit DExpTcE2' DExpTcE1')
		  <- pres DStep
                          DStTcWf
                          DExpTcE1
                          DSttpExtend
		          DStTcWf'
                          DExpTcE1'
		  <- sttp_weak_exp_judg DExpTcE2 DSttpExtend DExpTcE2'.
-letunit_beta  : pres (letunit_beta_step _)
                      DStTcWf
                      (exp_judg_letunit DExpTcE2 DExpTcE1)
                      DSttpExtend
                      DStTcWf
                      DExpTcE2
		  <- sttp_extend_refl _ DSttpExtend.
-pair_ctxt1    : pres (pair_ctxt1_step DStep)
                      DStTcWf
                      (exp_judg_pair DExpTcE2 DExpTcE1)
                      DSttpExtend
                      DStTcWf'
                      (exp_judg_pair DExpTcE2' DExpTcE1')
		  <- pres DStep
                          DStTcWf
                          DExpTcE1
                          DSttpExtend
		          DStTcWf'
                          DExpTcE1'
		  <- sttp_weak_exp_judg DExpTcE2 DSttpExtend DExpTcE2'.
-pair_ctxt2    : pres (pair_ctxt2_step DStep)
                      DStTcWf
                      (exp_judg_pair DExpTcE2 DExpTcE1)
                      DSttpExtend
                      DStTcWf'
                      (exp_judg_pair DExpTcE2' DExpTcE1')
		  <- pres DStep
                          DStTcWf
                          DExpTcE2
                          DSttpExtend
		          DStTcWf'
                          DExpTcE2'
		  <- sttp_weak_exp_judg DExpTcE1 DSttpExtend DExpTcE1'.
-pair_alloc    : pres (pair_alloc_step DStAlloc)
                      DStTcWf
                      (exp_judg_pair (exp_judg_loc DLocTcL2) (exp_judg_loc DLocTcL1))
		      DSttpExtend
                      DStTcWf'
                      DExpTcL
		  <- pres_alloc DStTcWf
		                (val_judg_pair DLocTcL2 DLocTcL1)
                                DStAlloc
                                DSttpExtend
                                DStTcWf'
                                DExpTcL.



-letpair_ctxt  : pres (letpair_ctxt_step DStep)
                      DStTcWf
                      (exp_judg_letpair ([x][dx] [y][dy] DExpTcF2 x dx y dy) DExpTcE1)
                      DSttpExtend
                      DStTcWf'
                      (exp_judg_letpair ([x][dx] [y][dy]DExpTcF2' x dx y dy) DExpTcE1')
 		  <- pres DStep
                           DStTcWf
                           DExpTcE1
                           DSttpExtend
 		          DStTcWf'
                           DExpTcE1'
 		  <- ({x:exp}{dVarTcX: var_judg x Tx}
                       {y:exp}{dVarTcY: var_judg y Ty}
 			sttp_weak_exp_judg (DExpTcF2 x dVarTcX y dVarTcY)
                                         DSttpExtend
 			                (DExpTcF2' x dVarTcX y dVarTcY)).

-letpair_beta  : pres (letpair_beta_step DStLookup)
                      DStTcWf
                      (exp_judg_letpair ([x] [dx] [y][dy] DExpTcF2'' x dx y dy)
                                     (exp_judg_loc (loc_judg_ DSttpLookup)))
                      DSttpExtend
                      DStTcWf
                      DExpTcF2LxLy
		  <- sttp_extend_refl _ DSttpExtend
		  <- pres_st_judg_inversion DStTcWf
                                         DSttpLookup
                                         DStLookup
                                         (val_judg_pair DLocTcLy DLocTcLx)
		  <- ({x:exp}{dVarTcX: var_judg x Tx}
			pres_var ([z] [dz] DExpTcF2'' x dVarTcX z dz)
                                 (exp_judg_loc DLocTcLy)
                                 (DExpTcF2-Ly x dVarTcX))
		  <- pres_var ([x][d] DExpTcF2-Ly x d) (exp_judg_loc DLocTcLx) DExpTcF2LxLy.

%terminates DStep (pres DStep _ _ _ _ _).
%worlds () (pres _ _ _ _ _ _).
%covers pres +DStep +DSt1TcWf +DE1Tc -DStEx -DSt2TcWf -DE2Tc.
%total DStep (pres DStep _ _ _ _ _).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Preservation: If M1 ==>* M2 and |- M1, then |- M2.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pres_mstep          : mstep S1 E1 S2 E2 ->
                 stwf_judg S1 ST1 ->
                 exp_judg ST1 E1 T
                  -> sttp_extend ST1 ST2 ->
                     stwf_judg S2 ST2 ->
                     exp_judg ST2 E2 T -> type.
%mode pres_mstep +DSteps +DStTcWf1 +DExpTc1 -DStExtend -DStTcWf2 -DExpTc2.

-refl          : pres_mstep (refl_mstep)
                       DStTcWf
                       DExpTc
                       DSttpExtend
                       DStTcWf
                       DExpTc
		  <- sttp_extend_refl _ DSttpExtend.
-trans         : pres_mstep (trans_mstep DSteps23 DSteps12)
                       DStTcWf1
		       DExpTc1
                       DSttpExtend13
                       DStTcWf3
                       DExpTc3
		  <- pres_mstep DSteps12 DStTcWf1 DExpTc1 DSttpExtend12 DStTcWf2 DExpTc2
		  <- pres_mstep DSteps23 DStTcWf2 DExpTc2 DSttpExtend23 DStTcWf3 DExpTc3
		  <- sttp_extend_trans DSttpExtend12 DSttpExtend23 DSttpExtend13.
-step          : pres_mstep (step_mstep DStep)
                       DStTcWf
                       DExpTc
                       DSttpExtend'
                       DStTcWf'
                       DExpTc'
		  <- pres DStep DStTcWf DExpTc DSttpExtend' DStTcWf' DExpTc'.

%terminates DSteps (pres_mstep DSteps _ _ _ _ _).
%worlds () (pres_mstep _ _ _ _ _ _).
%covers pres_mstep +DSteps +DSt1TcWf +DE1Tc -DStEx -DSt2TcWf -DE2Tc.
%total DSteps (pres_mstep DSteps _ _ _ _ _).
