#opts -strengthen;
% Variable counting (see Pientka [POPL'08])
% Author:  Brigitte Pientka
%
% This example only uses weak higher-order abstract syntax.

tp  : type.   %name tp T.
nat : tp.
bool: tp.

exp : tp -> type.   %name exp E x.
z   : exp nat.
s   : exp nat -> exp nat.

tt  : exp bool.

add : exp nat -> exp nat -> exp nat.
letv: {T1:tp}exp T1 -> (exp T1 -> exp T2) -> exp T2.
% letv: exp T1 -> (exp T1 -> exp T2) -> exp T2.


schema expCtx = some [t:tp] exp t;


rec plus : [ |- exp nat] -> [ |- exp nat] -> [ |- exp nat] =
fn x => fn y =>
case x of
  [ |- z]    => y

| [ |- s U]  =>
  let [ |- V] = plus [ |- U] y in [ |- s V]

| [ |- add U V] => plus [ |- U] [ |- V]
| [ |- W] => let [ |- V] = y in [ |- add W V]
;

% G, x:exp T |-  z  ==>  0
% G, x:exp T |-  tt  ==>  0
% G, x:exp T |-  x  ==>  1
% G, x:exp T |-  y  ==>  0   y =/= x
% G, x:exp T |-  s (U .. x) ==> n   if G, x:exp T |- U  ==> n
% G, x:exp T |-  s U  ==> n   if G, x:exp T |- U  ==> n
% G, x:exp T |-  letv (U .. x) (\y. V .. x y) ===> n1 + n2
% if  G, x: exp T |-  U .. x ==> n1
% if  G, y:exp _ , x: exp T |-  V .. x  y ==> n2

rec cntV : {g:expCtx}  [g, x:exp (T ..) |-  exp (S .. x)] -> [ |- exp nat] =
mlam g =>
 fn e =>
  case e of  % e : exp (S .. x) [g, x:exp (T ..)]

   | % {T':[g |- tp]}
     [g,x : exp (T' ..)  |-  tt]
     => [ |- z]

  | [g,x : exp _  |-  (#p .. )]    => [ |- z]

  | [g,x : exp _  |-  x]           => [ |- s z]


  | [g,x : exp _  |-  z]           => [ |- z]

  | [g,x : exp _  |-  (U .. )]  => [ |- z]

  | [g,x : exp _  |-  s (W .. x)]  => cntV [g] [g,x |- (W .. x)]

  | [g,x : exp _  |- letv (T1 ..) (U1 .. x) (\y . (U2 ..  x y))] =>
             plus (cntV [g]  [g,x |- U1 .. x])
                  (cntV [g, y:exp _ ]  [g,y,x |- U2 .. x y])

   | [g,x: exp _  |-  add (U .. x) (W .. x)]  =>
     plus (cntV [g] [g,x |- (U .. x)])
          (cntV [g] [g,x |- (W .. x)])
;
