tp: type.
nat: tp.
arr: tp -> tp -> tp.

exp : tp -> type.

z : exp nat.
s  : exp nat -> exp nat.
lam : (exp T1 -> exp T2) -> exp (arr T1 T2).
coe : exp T -> exp T.

schema w = some [t:tp] exp t;

rec test : {g:(w)*} (exp (T ..))[g] -> (exp (T ..)) [g] =
FN g =>  
 fn x => 
  case x of

    [g] z          => [g] z

  | [g] (#p ..)    => [g] (#p ..)

  | [g] s (U ..)   => [g] s (U ..)

  | [g] coe (E ..) =>  [g] coe (E ..)

  | [g] lam (\x. (E .. x))  =>  
      [g] lam (\x. (E .. x))   


;
