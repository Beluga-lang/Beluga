terminals z s lambda unit value app compo

syntax 

e ::=  x
| lambda \x . e[x]
| compo \x . e[x] . e[x]
 | z
| s e 
| app e e 
| let e = x in e[x] 
/*
*/
judgment value : e value ;
/*
-------- val-z
z value; 

e1 value ;
------------ val-s
(s e1) value ;
*/
--------------------------- val-lam
(lambda \x . E1[x]) value;

--------------------------- val-l
(let E1 = x in E2[x]) value;


---------------------------------- val-compo
(compo \x . E1[x] . E2[x]) value;
/*
judgment eval : eval e e ;

------------- ev-z
eval z z ;

eval e1 e2 ;
------------------ ev-s
eval (s e1) (s e2) ;

eval (E2[e1])  e1' ;
eval (e1) (e1') ;
------------------------------------------- ev-let 
eval (let e1 = x in lambda \x . E2[x] )  (e1') ;

----------------------------------------------------- ev-lam
eval (lambda \ x . e1[x])  (lambda \x . e1[x]) ;

eval (e1) (lambda \x . e[x]) ;
eval e2 e2' ;
eval e[e2'] e1' ;
------------------------------------- ev-app
eval (app e1 e2) e1' ;
*/
