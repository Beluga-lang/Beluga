datatype tm : type =
| z    : tm
| suc  : (tm) → tm
| app  : tm → tm → tm
| lam  : (tm → tm) → tm
;


datatype nat: type =
| zero   : nat
| succ : nat → nat
;
 
datatype nlist: nat → type =
| nnil : nlist zero
| ncons : tm  → nlist N → nlist (succ N)
;

schema tctx = tm ;

% Not_found (the context schema for g must be specified)
rec tail: [g. nlist (succ M)] -> [g.nlist M] =
   fn l => case l of
       | [g. ncons T (L'..)] => [g.(L'..)]
;
