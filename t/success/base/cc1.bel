term :  type.
z    : term.
suc  : term -> term.
% app  : term -> term -> term.
% lam  : (term -> term) -> term.

schema termCtx = some [] term;


rec fff : {g:termCtx} [g |- term] -> [g |- term] =
mlam g => fn e =>
  case e of
  | [g |- z]     => [g |- z]

  | [g |- suc (U[..])]   => [g |- z]

  | [g |- #p[..]]   => [g |- z]
;

rec fffForgotConcreteVarCase : {g:termCtx} [g, x:term |-  term] -> [g |- term] =
mlam g => fn e =>
  case e of --not
  | [g, x:term |-  z]     => [g |- z]
  | [g, x:term |-  suc (U)]   => [g |- z]
  | [g, x:term |-  #p[..]]   => [g |- z]
;

rec fffConcreteOK : {g:termCtx} [g, x:term |-  term] -> [g |- term] =
mlam g => fn e =>
  case e of
  | [g, x:term |-  z]     => [g |- z]
  | [g, x:term |-  suc (U)]   => [g |- z]
  | [g, x:term |-  #p[..]]   => [g |- z]
  | [g, x:term |-  x]   => [g |- z]
;


rec fffConcreteIncludedInMVar : {g:termCtx} [g, x:term |-  term] -> [g |- term] =
mlam g => fn e =>
  case e of
  | [g, x:term |-  U] => [g |- z]
;


rec fffNo-g-MVar : {g:termCtx} [g, x:term |-  term] -> [g |- term] =
mlam g => fn e =>
  case e of
  | [g, x:term |-  U[x]] => [g |- z]       % x could refer to vars in g, so this is effectively like U
;


rec fffEmptyMVar : {g:termCtx} [g, x:term |-  term] -> [g |- term] =
mlam g => fn e =>
  case e of --not
  | [g, x:term |-  U] => [g |- z]
;


rec fffConcreteOmittedFromMVar : {g:termCtx} [g, x:term |-  term] -> [g |- term] =
mlam g => fn e =>
  case e of --not
  | [g, x:term |-  U[..]] => [g |- z]
;


rec fffSplitCasesBad : {g:termCtx} [g, x:term |-  term] -> [g |- term] =
mlam g => fn e =>
  case e of --not
  | [g, x:term |-  U[..]]   => [g |- z]
  | [g, x:term |-  x]      => [g |- z]
  % Doesn't cover suc (suc x)
;

rec fffSplitCasesOK : {g:termCtx} [g, x:term |-  term] -> [g |- term] =
mlam g => fn e =>
  case e of
  | [g, x:term |-  U[..]]   => [g |- z]
  | [g, x:term |-  x]      => [g |- z]
  | [g, x:term |-  suc (U)] => [g |- z]
;


rec fffForgotParamVarCase : {g:termCtx} [g |- term] -> [g |- term] =
mlam g => fn e =>
  case e of --not
  | [g |- z]     => [g |- z]

  | [g |- suc (U[..])]   => [g |- z]
;


%{
    rec fff : {g:(termCtx)*} term[g, x:term, y:term] -> term[g] =
    FN g => fn e =>
      case e of
      | [g, x:term, y:term]  z     => [g] z

      | [g, x:term, y:term]  suc (U[..])   => [g] z

      | [g, x:term, y:term]  #p[..]   => [g] z

    %{
      | [g] app (U[..]) (V[..])  =>
          let [g] (U'[..])  = fff [g] ([g] (U[..])) in
          let [g] (V'[..])  = fff [g] ([g] (V[..])) in
            [g] app (U'[..]) (V'[..])
    }%
    ;
}%
