
term :  type.
lam  : (term -> term) -> term.

schema W = some [] block term;

rec copy' : (term) [.] -> (term) [.] = 
 fn t =>  case t of box(. lam (\ x . x)) : term[.] => t
;

rec copy : {g:(W)*} (term) [g] -> (term) [g] =
FN g => fn e =>
 (case e of
    {#p::term [g]}
     box(g . #p![id]!) : term [g] => box(g . #p![id]!)

  | {U::term [g, x : term]}
    box(g . lam (\ x. U![id, x]!)) : term [g] => 

       (case (copy [g, x:term]  (box(g,x . U![id, x]!))) of

          {V:: term[g, x : term ]}

           box(g,x . V![id, x]!) : term [g,x:term] =>
             box(g . lam (\ x. V![id , x]!))));
