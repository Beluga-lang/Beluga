tp: type.
nat: tp.
bool: tp.

exp : tp -> type.
z   : exp nat.
suc : exp nat -> exp nat.
and : exp bool -> exp bool -> exp bool.
tt  : exp bool.
ff  : exp bool.

opt: type.
NONE: opt.
SOME: {T:tp} exp T -> opt.

schema w = some [T:tp] block exp T;

rec FVnat : {g:(w)*} (exp T![.]!)[g] -> (opt)[g] =
FN g  => % mlam T  => 
 fn e => 
 (case e of
    box(g . z)             => box(g . NONE)
  | box(g . tt)            => box(g . NONE)
  | box(g . ff)            => box(g . NONE)

  | box(g . #p![id]!)   : (exp T'![.]!)[g] 
    => box(g . SOME T'![.]! #p![id]!)

  | box(g . suc U![id]!)  => FVnat [g] (box(g . U![id]!))

  | box(g . and U![id]! V![id]!)  => 
       (case FVnat [g] (box(g . U![id]!)) of
          box(g . NONE)   => FVnat [g] (box(g . V![id]!))

  | box(g . SOME T'![.]! #p![id]!)  => box(g . SOME T'![.]! #p![id]!))
);
