LF tp: type =
  | nat: tp
  | bool: tp
;


LF exp : tp -> type =
  | z   : exp nat
  | suc : exp nat -> exp nat
  | land : exp bool -> exp bool -> exp bool
  | tt  : exp bool
  | ff  : exp bool
;

LF  opt: type =
  | nothing: opt
  | something: {T:tp} exp T -> opt
;

schema expCtx = some [t:tp] exp t;
