exp: type.
lam: (exp -> exp) -> exp.
app: exp -> exp -> exp.

tp: type.
arrow: tp -> tp -> tp.

eval: exp -> exp -> type.

ev_lam: eval (lam (\ x . E x)) (lam (\ x . E x)).

ev_app: eval E2 V2 -> eval E1 (lam (\ x . E1' x)) -> eval (E1' V2) V -> eval (app E1 E2) V.

oft: exp -> tp -> type.

tp_lam: ({x: exp} oft x T1 -> oft (E x) T2) -> oft (lam (\ x . E x)) (arrow T1 T2).

tp_app: oft E2 T1 -> oft E1 (arrow T1 T2) -> oft (app E1 E2) T2.

value: exp -> type.

val_lam: value (lam (\ x . E x)).

vs: eval E V -> value V -> type.

vs_lam: vs ev_lam val_lam.

vs_app: vs D3 P3 -> vs (ev_app D1 D2 D3) P3.
