%%% Ordinary reduction for the untyped lambda-calculus
%%% Author: Frank Pfenning

LF  step : term -> term -> type =
  | beta1 : step (app (lam M1) M2) (M1 M2)
  | lm1   : ({x:term} step (M x) (M' x)) -> step  (lam M) (lam M')
  | apl1  : step M1 M1' -> step (app M1 M2) (app M1' M2)
  | apr1  : step M2 M2' -> step (app M1 M2) (app M1 M2')
;

% Multi-step reduction

LF step* : term -> term -> type =
  | id1   : step* M  M
  | step1 : step M M' -> step* M' M'' -> step* M M''
;


% Conversion

LF conv : term -> term -> type =
  | refl :     conv M M
  | sym  : conv M' M ->     conv M M'
  | trans: conv M' M'' -> conv M  M' ->     conv M  M''
  | red  : step* M M' ->     conv M M'
;
