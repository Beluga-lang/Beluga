tp  : type.
nat : tp.
bool: tp.

exp : tp -> type.
z   : exp nat.

exp': type.
z': exp'.

oft: exp' -> tp -> type.

of_z: oft z' nat.

has: exp T -> tp -> type.

has_z: has z nat.

eval: exp T -> exp T -> type.

ev_z: eval z z.

schema evCtx2 = some [] eval E E;

schema evTpCtx2 = some [] {x:exp T} has x T -> has z T;

schema evTpCtx3 = some [s:tp, t:tp, e:exp s -> exp s] {x:exp s} has x t -> has (e x) t;

schema evTpCtx4 = {x:exp'}oft x T -> oft F S;
schema evTpCtx5 = {x:exp'}oft x T -> oft (E x) S;

schema evCtx = some [ t:tp, e:exp t] eval e e;

typist : {TT:tp} exp nat.

tt  : exp bool.

schema expCtx = some [t:tp] exp t;

rec expnatter : {g:expCtx} [g |- exp nat] -> [ |- exp nat] =
   mlam g => fn e => [ |- z]
;

rec cntV : {g:expCtx} [g |- exp nat] -> [ |- exp nat] =
mlam g => fn e =>
 case e of --not
   {T1:[ |- tp]}
   [g |- typist (T1[])] : [g |- (exp nat)] =>
      expnatter [g, x:exp (T1[])] [g, x |-  typist (T1[])]
;
