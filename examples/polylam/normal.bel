%
% Lambda calculus
%

tp: type.
nat: tp.
arr: tp -> tp -> tp.
exp: tp -> type.

lam: (exp T1 -> exp T2) -> exp (arr T1 T2).
app: exp (arr T2 T) -> exp T2 -> exp T.

% Normal form representation

normal: tp -> type.  % normal forms
neutral: tp -> type. % terms with no abstractions

lam': (neutral T1 -> normal T2) -> normal (arr T1 T2).


% normal form applications take a neutral (a variable) form

app': neutral (arr T1 T2) -> normal T1 -> neutral T2.

% we need a way to coerce neutral values into normal forms
% basically a way to say that neutral values are normal forms

neut: neutral T -> normal T.

% as an example lam' x.x = lam' \x.neut x to coerce x to be a neutral form

schema ctx = some [t:tp] block x:exp t, _t:neutral t; % Q: why small T?

%


% normal2exp: convert a normal form to a regular expression
%             also in the normal form


rec normal2exp : (g: ctx) [g |- normal T] -> [g |- exp T] =
/ total e (normal2exp g t e) /
fn e => case e of
| [g |- neut M] => neutral2exp [g |- M]

| {S : [g,x:neutral (T2[]) |-  normal (T1[])]} % we specify the type of S to help the type-checker
  [g |- lam' \x. S] => let {M : [g,x:exp (T[]) |- exp (T1[])]}
                        [g,b: block x:exp (T[]), _t:neutral (T[]) |-  M[..,b.1]] =
                       normal2exp[g,b: block x:exp (T2[]), _t:neutral (T2[]) |-  S[..,b.2]]
                     in
                       [g |- lam \y.M[..,y]]

and rec neutral2exp : (g: ctx) [g |- neutral T] -> [g |- exp T] =
/ total e (neutral2exp g t e) /
fn e => case e of
|[g |- app' R S] => let [g |- M] = neutral2exp [g |- R] in
                       let [g |- N] = normal2exp [g |- S] in
                         [g |- app M N]
|[g |- #p.2] => [g |- #p.1]

;



% Normalization
rec norm : (g: ctx) [g |- exp T] -> [g |- normal T] =
% / total e (norm g t e)/
fn e => case e of
| [g |- app M N] =>
  (case norm [g |- M] of
  |  {S : [h, x:neutral (T2[]) |-  normal (T1[])]}
    [h |- lam' \x. S] =>
    let {M': [h,x:exp (T[]) |- exp (T1[])]}
        [h,b: block x: exp (T[]), _t:neutral (T[]) |-  M'[..,b.1]] =
      normal2exp [h, b: block x:exp (T2[]), _t:neutral (T2[]) |-  S[..,b.2]]
%     normal2exp [g, b: block (x:exp _, _t:neutral _) |-  S..b.2]
    in
      norm [h |- M'[..,N]]
)
%{  | [g |- neut(R..)] =>
   (let [g |- S..] = norm [g |- N..] in [g |- neut (app' (R..) (S..))]))
}%
%{
| [g |- #p.1] => [g |- neut(#p.2)] % #p means variable p from the context

| {M : [g, x:exp T2 |-  exp T1]}
  [g |- lam \x.M..,x] =>
  let [g, b: block x:exp T, _t:neutral T |-  S..b.2]
    = norm [g,b: block x:exp T2, _t:neutral T2 |-  M..b.1]
  in
    [g |- lam' \x.S..,x]
}%
;
