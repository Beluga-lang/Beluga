%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Theorem 4 : A result of cps transformation is var-valid
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cps_vvR : cpsR R R' -> vvalR R' -> type.
cps_vvE : vvalK Xi ([x] Kappa  x) -> cpsE E ([x] Kappa x) E' -> vvalE Xi E' -> type.
cps_vvT : cpsT T T' -> ({xi:stack}vvalT xi T' xi) -> type.

%mode cps_vvR +CR -VVR.
%mode cps_vvE +VVK +CE -VVE.
%mode cps_vvT +CT -VVT.

%name cps_vvR CVVR.
%name cps_vvE CVVE.
%name cps_vvT CVVT.

vval_droot : cps_vvR (cps_droot ([x] CE x)) (vval_klam ([k][vv]VVE k vv))
             <- ({k:ccont}{vVC:vvalC dot k}
                 cps_vvE (vval_kappa ([t] [vvv] vval_cret vVC (vvv dot))
                                     ([v] [vvv] vval_cret vVC (vvv dot)))
                         (CE k)
                         (VVE k vVC)).

% BOTH VERSIONS ARE NOT WORKING -bp
vval_dtriv : cps_vvT CT ([xi] VVT xi)
         -> cps_vvE
               (vval_kappa
                   ([t] [vvt]
                       VVTE t  vvt)
                   ([v] [vvt]
                       VVVE v  vvt))
               (cps_dtriv CT) (VVTE T ([x] VVT x)).


% vval_dtriv : cps_vvT CT ([xi] VVT xi)
%         -> cps_vvE
%               (vval_kappa
%                   ([t] [vvt]
%                       VVTE t [xi'] vvt xi'))
%                   ([v] [vvt]
%                       VVVE v ([xi'] vvt xi')))
%               (cps_dtriv CT) (VVTE T ([x] VVT x)).
%


% vval_dapp : cps_vvE (vval_kappa ([t][vvt] VVTE t ([xi] vvt xi)) ([v][vvt] VVVE v ([xi] vvt xi))) (cps_dapp CE0 ([x] CE1 x)) VE
%            <- ({t0:ctriv}{vVt0:{xi':stack}vvalT xi' t0 xi'}
%                cps_vvE (vval_kappa ([t1] [vvt1]
%                                       (vval_capp (vval_vlam ([v] [vvt] VVVE v ([xi] vvt xi)))
%                                                  (vVt0 Xi)
%                                                  (vvt1 Xi)))
%                                    ([v1]
%                                      [vvv1]
%                                       (vval_capp (vval_vlam ([v] [vvt] VVVE v ([xi] vvt xi)))
%                                                  (vVt0 Xi)
%                                                  (vvv1 Xi))))
%                        (CE1 t0)
%                        (VVTE' t0 VVt0))
%            <- ({v0:ctriv}{vVv0:{xi':stack}vvalT (cons Xi'  v0) v0 xi'}
%                cps_vvE (vval_kappa ([t1]
%                                      [vvt1]
%                                       (vval_capp (vval_vlam ([v] [vvt] VVVE v ([xi] vvt xi)))
%                                                  (vVv0 Xi)
%                                                  (vvt1 (cons Xi  v0))))
%                                    ([v1]
%                                      [vvv1]
%                                       (vval_capp (vval_vlam ([v][vvt] VVVE v ([xi] vvt xi)))
%                                                  (vVv0 Xi)
%                                                  (vvv1 (cons Xi v0)))))
%                        (CE1 v0)
%                        (VVVE' v0 ([x] vVv0 x)))
%            <- cps_vvE (vval_kappa ([t] [vvt] VVTE' t ([x1] vvt xi)) ([v][vv] VVVE' v ([xi] vv xi))) CE0 VE.
%


vval_dapp : cps_vvE (vval_kappa ([t][vvt] VVTE t vvt) ([v][vvt] VVVE v vvt)) (cps_dapp CE0 ([x] CE1 x)) VE
            <- ({t0:ctriv}{vVt0:{xi':stack}vvalT xi' t0 xi'}
                cps_vvE (vval_kappa ([t1] [vvt1]
                                       (vval_capp (vval_vlam ([v] [vvt] VVVE v  vvt))
                                                  (vVt0 Xi)
                                                  (vvt1 Xi)))
                                    ([v1]
                                      [vvv1]
                                       (vval_capp (vval_vlam ([v] [vvt] VVVE v  vvt))
                                                  (vVt0 Xi)
                                                  (vvv1 Xi))))
                        (CE1 t0)
                        (VVTE' t0 vVt0))
            <- ({v0:ctriv}{vVv0:{xi':stack}vvalT (cons xi'  v0) v0 xi'}
                cps_vvE (vval_kappa ([t1]
                                      [vvt1]
                                       (vval_capp (vval_vlam ([v] [vvt] VVVE v vvt))
                                                  (vVv0 Xi)
                                                  (vvt1 (cons Xi v0))))
                                    ([v1]
                                      [vvv1]
                                       (vval_capp (vval_vlam ([v][vvt] VVVE v vvt))
                                                  (vVv0 Xi)
                                                  (vvv1 (cons Xi v0)))))
                        (CE1 v0)
                        (VVVE' v0 ([x] vVv0 x)))
            <- cps_vvE (vval_kappa ([t] [vvt] VVTE' t vvt) ([v][vv] VVVE' v vv)) CE0 VE.

vval_dlam : cps_vvT (cps_dlam ([x][x'][cps] CR x x' cps)) ([xi] (vval_xlam ([x][vvx] VVR x vvx)))
            <- ({x:dtriv}{x':ctriv}{cX:cpsT x x'}{vVX:{xi:stack}vvalT xi x' xi}
                cps_vvT cX vVX -> cps_vvR (CR x x' cX) (VVR x' vVX)).

%terminates (CR CE CT)  (cps_vvR CR _)  (cps_vvE _ CE _)  (cps_vvT CT _).
