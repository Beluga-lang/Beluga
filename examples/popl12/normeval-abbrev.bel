atomic_tp : type.

LF tp : type =
| atomic : atomic_tp -> tp
| arr: tp -> tp -> tp;

--name tp T.

LF tm : tp -> type =
| app : tm (arr T S) -> tm T -> tm S
| lam : (tm T -> tm S) -> tm (arr T S);

--name tm E.

schema tctx = some [t:tp] tm t;

LF neut : tp -> type =
| rapp : neut (arr T S) -> norm T -> neut S
and norm : tp -> type =
| nlam : (neut T -> norm S) -> norm (arr T S)
| embed : neut (atomic P) -> norm (atomic P);
--name neut R.
--name norm M.
schema ctx = neut T;

inductive NeutVar : {g:ctx} [ |- tp] -> ctype =
| NeutVar : {#p:[g |- neut T[]]} NeutVar [g] [ |- T]
;

inductive TmVar : {g:tctx} [ |- tp] -> ctype =
| TmVar : {#p:[g |- tm T[]]} TmVar [g] [ |- T]
;

typedef Sub : {g:ctx} {h:ctx} ctype =
{T:[ |- tp]} NeutVar [g] [ |- T] ->  NeutVar [h] [ |- T];

stratified Sem : {g:ctx} [ |- tp] -> ctype =
| Syn :  [g |- neut (atomic P[])] -> Sem [g] [ |- atomic P]
| Slam : ({h:ctx}  Sub [g] [h] -> Sem [h] [ |- A] -> Sem [h] [ |- B])
           -> Sem [g] [ |- arr A B]
;



rec extendSub : (g:ctx)(h:ctx)
                 Sub [g] [h] -> Sub [g,x:neut S[]] [h, x:neut S[]]
 =
fn s => let (s : {T:[ |- tp]} NeutVar [g] [ |- T] ->  NeutVar [h] [ |- T]) = s in
(mlam T => fn y => case y of
              | NeutVar [g,x:neut Tx[] |-  x ] => NeutVar [h,x:neut Tx[] |-  x]
              | NeutVar [g,x:neut Tx[] |-  #p[..] ] =>
                 let NeutVar [h |- #q] = s [ |- T] (NeutVar [g |- #p]) in
                   NeutVar [h,x:neut Tx[] |-  #q[..]])
;

rec nsubst :  (g:ctx)(h:ctx)
             Sub [g] [h]
           -> [g |- neut S[]]
           -> [h |- neut S[]] =
fn s => fn e => case e of
| {#p: [g |- neut T[]]}
  [g |- #p ] => let NeutVar [h |- #q] = s [ |- T] (NeutVar [g |- #p ]) in [h |- #q]
| {R:[g |- neut (arr T[] S[])]}
  [g |- rapp R N] =>
  let [h |- R' ] = nsubst s [g |- R ] in
  let {N':[h |- norm T[]]} [h |- N' ] = nosubst s [g |- N ] in
    [h |- rapp (R') (N' ) ]

and rec nosubst : (g:ctx)(h:ctx)
              Sub [g] [h]
	    -> [g |- norm S[]]
            -> [h |- norm S[]] =
fn s => fn n =>
let (s : {T:[ |- tp]} NeutVar [g] [ |- T] ->  NeutVar [h] [ |- T]) = s in
case n of
| {R:[g |- neut (atomic P[])]} [g |- embed R ] =>
  let [h |- R' ] = nsubst s [g |- R ] in [h |- embed (R' )]

 | {N:[g,x:neut S[] |-  norm S'[]]}
   [g |- nlam (\x. N) ]  =>
   let [h,x:neut S[] |-  N'] =
    nosubst (extendSub s) [g ,x:neut S[] |-  N]
  in
   [h |- nlam (\x. N')]
;

rec subst : (g:ctx)(h:ctx)
	    Sub [g] [h]
          -> Sem [g] [ |- A]
          -> Sem [h] [ |- A] =
fn s => fn e =>
let (s : Sub [g] [h])  = s in
case e of
| Syn [g |- R] => Syn (nsubst s [g |- R])
| Slam  f =>
    Slam (mlam h' => fn s' => fn e => f [h'] (mlam T => fn y => s' [ |- T] (s [ |- T] y)) e)
;

rec weaken : (g :ctx) {T:[ |- tp]} NeutVar [g] [ |- T] -> NeutVar [g,x:neut S[]] [ |- T] =
mlam T => fn x => let NeutVar [g |- #p] = x in NeutVar [g,x:neut _ |-  #p[..]]
;


typedef Map : {g:tctx} {h:ctx} ctype = ({T:[ |- tp]} TmVar [g] [ |- T] -> Sem [h] [ |- T]);

rec extend : (g:tctx)(h:ctx)
             Map [g] [h] -> Sem [h] [ |- S]
             ->  Map [g, x:tm S[]] [h]  =
fn s => fn e => mlam T => fn x => case x of
| TmVar [g,x:tm S[] |-  x] => e
| TmVar [g,x:tm S[] |-  #q[..] ] => s [ |- T ] (TmVar [g |- #q])
;

rec id : (g:ctx)  Sub [g] [g] =
mlam T => fn y => y ;

rec eval : (g:tctx)(h:ctx)
              Map [g] [h]
           -> [g |- tm S[]] -> Sem [h] [ |- S]  =
fn s => fn t =>
let (s : Map [g] [h]) = s in
case t of
| [g |- #p ]           : [g |- tm S[]] =>  s [ |- S] (TmVar [g |- #p ])
| [g |- lam (\x. E) ] : [g |- tm (arr A[] B[])] =>
  Slam  (mlam h' => fn s' => fn e =>
         eval (extend (mlam T => fn x => subst s' (s [ |- T] x))  e)
              [g,x:tm A[] |-  E])

| [g |- app E1 E2 ] =>
  let (Slam f ) : Sem [h] [ |- arr A B] =  eval s [g |- E1] in
    f [h] id (eval s [g |- E2])
;


rec reflect : (g:ctx) [g |- neut A[]] ->  Sem [g] [ |- A] =
fn r => let [g |- R ] : [g |- neut A[]] = r in
case [ |- A] of
| [ |- atomic P ] => Syn [g |- R]
| [ |- arr T S ] =>  Slam (extendSem r)

% Lesson: FACTORIZATION OF CODE HELPS TYPE RECONSTRUCTION!!!
and rec extendSem : [g |- neut (arr A[] B[])] ->
                ({h:ctx} Sub [g] [h]  -> Sem [h] [ |- A] -> Sem [h] [ |- B])
=
fn r => mlam h => fn s => fn e =>
let [h |- N ] = reify e in
let [h |- R' ] = nsubst s r in
  reflect [h |- rapp (R') N]

and rec reify : Sem [g] [ |- A] -> [g |- norm A[]] =
fn e => let (e : Sem [g] [ |- A]) = e in case [ |- A] of
| [ |- atomic P ] =>  (case e of Syn [g |- R] => [g |- embed R])
| [ |- arr T S ] =>
  (case e of
   | (Slam f)  =>
     let s = (f [g,x:neut T[] ] weaken (reflect [g ,x:neut T[] |-  x])) in
     let [g,x:neut T[] |-  E] = reify s
     in [g |- nlam (\x. E)])
;

rec initialMap :  {T:[ |- tp]} TmVar [ ] [ |- T] -> Sem [ ] [ |- T] =
mlam T => fn y => let TmVar [ |- #p] = y in impossible [ |- #p] ;

rec nbe : [ |- tm A] -> [ |- norm A] =
fn t => reify  (eval initialMap t)
;
