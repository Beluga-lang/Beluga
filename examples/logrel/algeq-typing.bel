% Completeness of algorithmic equality for declarative equality for simply typed lambda calculus
% Accompanies Mechanizing Logical Relations using Contextual Type Theory
% by Andrew Cave and Brigitte Pientka

tp : type.         --name tp T.
i :  tp.
arr: tp -> tp -> tp.

tm : type.          --name tm E.
app : tm -> tm -> tm.
lam : (tm -> tm) -> tm.

step : tm -> tm -> type.  --name step S.
beta : step (app (lam M) N) (M N).
stepapp : step M M' -> step (app M N) (app M' N).

oft : tm -> tp -> type.
t_app : oft M (arr T S) -> oft N T -> oft (app M N) S.
t_lam : ({x:tm} oft x T -> oft (M x) S) -> oft (lam (\x. M x)) (arr T S).

mstep : tm -> tm -> type.  --name mstep S.
refl : mstep M M.
trans1 : step M M' -> mstep M' M'' -> mstep M M''.

algeqn : tm -> tm -> tp -> type.
algeqr : tm -> tm -> tp -> type.
algbase : mstep M P -> mstep N Q -> algeqr P Q i -> algeqn M N i.
algarr : ({x:tm}{p:algeqr x x T} algeqn (app M x) (app N x) S) -> algeqn M N (arr T S).
algapp : algeqr M1 M2 (arr T S) -> algeqn N1 N2 T -> algeqr (app M1 N1) (app M2 N2) S.

schema tctx = some [t:tp] block x:tm, y:oft x t, z:algeqr x x t;

% Logical equivalence. _|-_~~_:_ in the paper

tmpair : type.
sim : tm -> tm -> tmpair.
--infix sim 5 right.

stratified Log : (g:tctx) [g |- tmpair] -> [ |- tp] -> ctype   =
| LogBase : [g |- algeqn M N i]
          -> Log [g |- M sim N ] [|- i]
| LogArr  : {M1:[g |- tm]}{M2:[g |- tm]}
             ({h:tctx} {$R:[h |- g]} {N1:[h |- tm]}{D1:[h |- oft N1 T[]]}{N2:[h |- tm]}{D2:[h |- oft N2 T[]]}
                Log [h |- N1 sim N2] [ |- T]
              -> Log [h |- (app M1[$R] N1) sim (app M2[$R] N2)] [|- S])
            -> Log [g |- M1 sim M2] [ |- arr T S]
;


% Monotonicity of logical equivalence
rec logEq_Monotone : {h:tctx}{$W:[h |- g]} Log [g |- M1 sim M2] [ |- A]
                   -> Log [h |- M1[$W] sim M2[$W]] [ |- A] =
/ total e (logEq_Monotone g h m1 m2 a iv e) /
mlam h,$W => fn e => case e of
| LogBase [g |- P] => LogBase [h |- P[$W]]
| LogArr [g |-  M1] [g |-  M2] f =>
  LogArr [h |-  M1[$W]] [h |-  M2[$W]]
   (mlam h0,$W2,N1,D1,N2,D2 => fn rn =>
    f [h0] [h0 |- $W[$W2]] [h0 |-  N1] [_ |- D1] [h0 |-  N2] [_ |- D2] rn
   )
;

% Main lemma to escape logical relation
rec reflect : {A:[ |- tp]} [g |- algeqr M1 M2 A[]] -> Log [g |- M1 sim M2] [ |- A] =
/ total a (reflect g m1 m2 a) /
mlam A => fn r => case [ |- A] of
| [ |- i] =>
    let [g |- R ] = r in
    LogBase [g |- algbase refl refl R]
| [ |- arr A B] =>
  let [g |- R] = r in
  LogArr [g |- _] [g |-  _]
   (mlam h,$W,N1,D1,N2,D2 => fn rn =>
    let [h |- S] = reify [|- A] rn in
    reflect [ |- B] [h |- algapp R[$W] S]
   )
and rec reify : {A:[|- tp]}Log [g |- M1 sim M2] [ |- A] -> [g |- algeqn M1 M2 A[]] =
 / total a (reify g m1 m2 a) /
mlam A => fn e => case [ |- A] of
| [ |- i ] =>
  let LogBase a = e in a
| [ |- arr A B] =>
  let LogArr [g |-  M1] [g |-  M2] f = e in
  let [g,b:block x:tm,y:oft x A[],z:algeqr x x A[] |- R[..,b.1,b.3]]
      = reify [ |- B ] (f [g,b:block x:tm,y:oft x A[],z:algeqr x x A[]] [g,b |- ..] [g,b |- b.1] [g,b |- b.2] [g,b |- b.1] [g,b |- b.2]
        (reflect [ |- A ] [g,b:block x:tm,y:oft x A[],z:algeqr x x A[] |- b.3]))
  in [g |- algarr (\x. \y. R)]
;

% Transitivity of mstep
rec mstep_trans : (g:tctx) [g |-  mstep M N] -> [g |-  mstep N P] -> [g |-  mstep M P] =
/ total s1 (mstep_trans g m n p s1 s2) /
fn s1 => fn s2 => case s1 of
| [g |-  refl] => let [g |-  S2] = s2 in [g |-  S2]
| [g |-  trans1 S1 (MS1)] => let [g |-  MSR] = mstep_trans [g |-  MS1] s2 in
  [g |-  trans1 S1 (MSR)]
;

% Boxed form of trans1 for convenience
rec trans1' : (g:tctx) [g |-  step M N] -> [g |-  mstep N P] -> [g |-  mstep M P] =
/ total (trans1') /
fn s1 => fn s2 => case (s1,s2) of
| ([g |-  S], [g |-  MS]) => [g |-  trans1 S (MS)]
; % TODO: Are these actually necessary?

% multi-step reduction under the function position of application
rec mstep_app : (g:tctx) [g |-  mstep M N] -> [g |-  mstep (app M P) (app N P)] =
/ total s1 (mstep_app g m n p s1) /
fn s1 => case s1 of
| [g |-  refl] => [g |-  refl]
| [g |-  trans1 S (MS)] => trans1' [g |-  stepapp S] (mstep_app [g |-  MS]);



% Logical equality is backward closed under weak head reduction
% Induction is on T. Make T explicit
rec closed : {T:[|- tp]}
     [g |-  mstep N1 M1] -> [g |-  mstep N2 M2]
  -> Log [g |- M1 sim M2] [ |- T]
  -> Log [g |- N1 sim N2] [ |- T] =
 / total t (closed g n1 m1 n2 m2 t) /
mlam T => fn s1,s2,e => case [|- T] of
| [|- i] =>
  let LogBase [g |- algbase (S1') (S2') A] = e in
  let [g |- S1''] = mstep_trans s1 [g |- S1'] in
  let [g |- S2''] = mstep_trans s2 [g |- S2'] in
  LogBase [g |- algbase (S1'') (S2'') A]
| [|- arr T1 T2] =>
  let LogArr [g |-  M1] [g |-  M2] f = e in
  let [g |-  S1] = s1 in
  let [g |-  S2] = s2 in
  LogArr [g |-  _] [g |-  _] (mlam h,$W,P1,D1,P2,D2 => fn rp =>
   let q0 = f [h] [h |- $W] [h |-  P1] [h |- D1] [h |-  P2] [h |- D2] rp in
   closed [|- T2] (mstep_app [h |-  S1[$W]] ) (mstep_app [h |-  S2[$W]]) q0
  )
;


% Symmetry of algorithmic equivalence
rec algEqRSym : (g:tctx)
  [g |- algeqr N1 N2 T]
-> [g |- algeqr N2 N1 T] =
/ total a (algEqRSym g n1 n2 t a) /
fn a => case a of
| [g |- #p.3] => [g |- #p.3]
| [g |- algapp R N] =>
  let [g |- R'] = algEqRSym [g |- R] in
  let [g |- N'] = algEqNSym [g |- N] in
  [g |- algapp (R') (N')]
and rec algEqNSym : (g:tctx)
  [g |- algeqn N1 N2 T]
-> [g |- algeqn N2 N1 T] =
/ total a (algEqNSym g n1 n2 t a) /
fn a => case a of
| [g |- algbase S1 S2 R] =>
  let [g |- R'] = algEqRSym [g |- R] in
  [g |- algbase S2 S1 (R')]
| [g |- algarr \x.\u.N] =>
  let (a : [g |- algeqn _ _ (arr T[] S[])]) = a in
  let [g,b:block x:tm,y:oft x T[],z:algeqr x x T[] |- N'[..,b.1,b.3]] = algEqNSym [g,b:block x:tm,y:oft x T[],z:algeqr x x T[] |- N[..,b.1,b.3]] in
   [g |- algarr (\x.\u.N')]
;

% % Symmetry of logical equivalence
rec logEqSym :
   {T:[|- tp]}Log [g |- M1 sim M2] [ |- T]
 -> Log [g |- M2 sim M1] [ |- T] =
/ total t (logEqSym g m1 m2 t) /
mlam T => fn e => case [|- T] of
| [|- i] =>
  let LogBase a = e in  LogBase (algEqNSym a)
| [|- arr T1 T2] =>
  let LogArr [g |-  M1] [g |-  M2] f = e in
  LogArr [g |-  M2] [g |-  M1] (mlam h,$W,N1,D1,N2,D2 => fn rn =>
					let e' = logEqSym [|- T1] rn in
					logEqSym [|- T2] (f [h] [h |- $W] [h |-  N2] [h |- D2] [h |-  N1] [h |- D1] e')
				       );
% % Several of the following lemmas are to establish transitivity of algorithmic equivalenc

% Equality on types
eqtp : tp -> tp -> type.
refltp : eqtp T T.

% The types from algorithmic path equivalence are uniquely determined
rec algEqRUnique : (g:tctx)
  [g |- algeqr N1 N2 T[]]
-> [g |- algeqr N2 N3 S[]]
-> [|- eqtp T S] =
/ total e1 (algEqRUnique g n1 n2 n3 t s e1) /
fn e1 => fn e2 => case e1 of
| [g |- #p.3] => let [g |- #q.3] = e2 in [|- refltp]
| [g |- algapp R N] =>
  let [g |- algapp (R') (N')] = e2 in
  let [|- refltp] = algEqRUnique [g |- R] [g |- R'] in [|- refltp]
;

eqtm : tm -> tm -> type.
refltm : eqtm M M.

% Determinacy of weak head reduction
rec determinacy : (g:tctx) [g |- step M N] -> [g |-  step M P] -> [g |- eqtm N P] =
/ total s1 (determinacy g m n p s1) /
fn s1 => fn s2 => case s1 of
| [g |-  beta] => let [g |-  beta] = s2 in [g |- refltm ]
| [g |-  stepapp S1] =>
  let [g |-  stepapp S2] = s2 in
  let [g |- refltm] = determinacy [g |-  S1] [g |-  S2] in [g |- refltm]
;

inductive HasCommonReduct : (g:tctx) [g |-  tm] -> [g |-  tm] -> ctype =
| Common : [g |-  mstep M1 N] -> [g |-  mstep M2 N] -> HasCommonReduct [g |-  M1] [g |-  M2];

% Confluence is trivial because it's deterministic. This is just a convenient
% way to work with determinacy
rec confluence : [g |-  mstep M N] -> [g |-  mstep M P] ->
                 HasCommonReduct [g |-  N] [g |-  P] =
/ total s1 (confluence g m n p s1) /
fn s1 => fn s2 => case s1 of
| [g |-  refl ] => Common s2 [g |-  refl]
| [g |-  trans1 S1 (MS1)] =>
  case s2 of
  | [g |-  refl] => Common [g |-  refl] s1
  | [g |-  trans1 S2 (MS2)] =>
    let [g|- refltm] = determinacy [g |-  S1] [g |-  S2] in
    confluence [g |-  MS1] [g |-  MS2]
;

LF empty : type = ;

% Terms in algorithmic path equivalence cannot step
rec neutral_doesnt_step : (g:tctx)
  [g |-  step M N]
-> [g |- algeqr M P T]
-> [ |- empty] =
/ total s (neutral_doesnt_step g m n p t s ) /
fn s => fn e => case s of
| [g |- beta] => let [g |- algapp R N] = e in impossible [g |- R]
| [g |- stepapp S] => let [g |- algapp R N] = e in neutral_doesnt_step [g |- S] [g |- R]
;

% Similarly for multi-step reduction
rec neutral_mstep : (g:tctx)
  [g |-  mstep M N]
-> [g |- algeqr M P T]
-> [g |- eqtm M N] =
/ total  (neutral_mstep) /
fn s => fn e => case s of
| [g |-  refl] => [g |- refltm]
| [g |-  trans1 S1 (MS)] => impossible (neutral_doesnt_step [g |-  S1] e) ;

% Corollary of determinacy
rec determinacy' : (g:tctx)
  [g |-  mstep M M1] -> [g |-  mstep M M2]
-> [g |- algeqr N1 M1 T]
-> [g |- algeqr M2 N2 T]
-> [g |- eqtm M1 M2] =
/ total (determinacy') /
fn s1 => fn s2 => fn e1 => fn e2 => case (confluence s1 s2) of
| Common s1' s2' =>
  let [g|-refltm] = neutral_mstep s1' (algEqRSym e1) in
  let [g|-refltm] = neutral_mstep s2' e2 in
  [g|-refltm]
;

% Transitivity of algorithmic equivalence
rec algEqRTrans : (g:tctx)
  [g |- algeqr N1 N2 T]
-> [g |- algeqr N2 N3 T]
-> [g |- algeqr N1 N3 T] =
/ total a1 (algEqRTrans g n1 n2 n3 t a1) /
fn a1 => fn a2 => case a1 of
| [g |- #p.3] => let [g |- #q.3] = a2 in [g |- #q.3]
| [g |- algapp (A1') B1] =>
  let [g |- algapp (A2') B2] = a2 in
  let [|- refltp] = algEqRUnique [g |- A1'] [g |- A2'] in
  let [g |- R1] = algEqRTrans [g |- A1'] [g |- A2'] in
  let [g |- R2] = algEqNTrans [g |- B1] [g |- B2] in
  [g |- algapp R1 R2]
and rec algEqNTrans : (g:tctx)
  [g |- algeqn N1 N2 T]
-> [g |- algeqn N2 N3 T]
-> [g |- algeqn N1 N3 T] =
/ total a1 (algEqNTrans g n1 n2 n3 t a1) /
fn a1 => fn a2 => case a1 of
| [g |- algbase S1 S2 (A1')] =>
  let [g |- algbase (S2') S3 (A2')] = a2 in
  let [g |- refltm] = determinacy' [g |- S2] [g |- S2'] [g |- A1'] [g |- A2'] in
  let [g |- R] = algEqRTrans [g |- A1'] [g |- A2'] in
  [g |- algbase S1 S3 R]
| [g |- algarr (\x.\u.A1')] =>
  let [g |- algarr \x.\u.A2'] = a2 in
  let (a2 : [g |- algeqn _ _ (arr T[] S[])]) = a2 in
   let [g,b:block x:tm, u:oft x _, y:algeqr x x _ |- R[..,b.1,b.3]]
       = algEqNTrans [g,b:block x:tm,y:oft x T[],z:algeqr x x T[] |- A1'[..,b.1,b.3]]
   		     [g,b:block x:tm,y:oft x T[],z:algeqr x x T[] |- A2'[..,b.1,b.3]] in
   [g |- algarr (\x.\u.R)]
;

% % Transitivity of logical equivalence
rec logEqTrans : {T:[|- tp]}
   Log [g |- M sim N] [ |- T]
 -> Log [g |- N sim P] [ |- T]
 -> Log [g |- M sim P] [ |- T] =
/ total t (logEqTrans g m  n p t) /
mlam T => fn e1 => fn e2 => case [|- T] of
| [|- i] =>
  let LogBase a1 = e1 in
  let LogBase a2 = e2 in LogBase (algEqNTrans a1 a2)
| [|- arr T1 T2] =>
  let LogArr [g |-  M] [g |-  N] f1 = e1 in
  let LogArr [g |-  N] [g |-  P] f2 = e2 in
  LogArr [g |-  M] [g |-  P] (mlam h,$W,V1,D1,V2,D2 => fn v =>
   logEqTrans [|- T2] (f1 [h] [h |- $W] [h |-  V1] [h|- D1] [h |-  V2] [h |- D2] v)
                      (f2 [h] [h |- $W] [h |-  V2] [h|- D2] [h |-  V2] [h |- D2]
                      (logEqTrans [|- T1] (logEqSym _ v) v)));


deq : tm -> tm -> tp -> type.
d_beta : ({x:tm} oft x T -> deq (M2 x) (N2 x) S) -> deq M1 N1 T -> deq (app (lam (\x. M2 x)) M1) (N2 N1) S.
d_lam : ({x:tm} oft x T -> deq (M x) (N x) S) -> deq (lam (\x. M x)) (lam (\x. N x)) (arr T S).
d_ext : ({x:tm} oft x T -> deq (app M x) (app N x) S) -> deq M N (arr T S).
d_app : deq M1 M2 (arr T S) -> deq N1 N2 T -> deq (app M1 N1) (app M2 N2) S.
d_refl : oft M T -> deq M M T.
d_sym : deq M N T -> deq N M T.
d_trans : deq M N T -> deq N O T -> deq M O T.


schema ctx = some [t:tp] block x:tm,y:oft x t;

% % Logical equivalence of substitutions. Written _|-s_simsim_:_ in the paper
inductive LogSub : {g0:ctx}(h:tctx){$S1: [h |- g0]}{$S2: [h |- g0]}
ctype  =
| Nil : LogSub [] [h |- ^] [h |- ^]
| Dot : LogSub [g0] [h |- $S1] [h |- $S2]
       -> Log [h |- M1 sim M2] [ |- R]
       -> {D1:[h |- oft M1 R[]]} {D2:[h |- oft M2 R[]]}
         LogSub [g0,b:block x:tm,y:oft x R[]] [h |- $S1, <M1;D1>] [h |- $S2, <M2;D2>]
;

% % Looking up a variable in logically equivalence substitutions gives a logical equivalence
% rec lookup : Lookup [|-G] [g |- X] [ |- T]
%  -> LogSub [g] [h |- $S1] [h |- $S2] [|- G]
%  -> Log [h |- X[$S1] sim X[$S2]] [ |- T] =
% / total v (lookup _ _ _ _ _ _ _ _ v) /
% fn v => fn s => case v of
% | Top =>    let Dot s' e = s in e
% | Pop v' => let Dot s' e = s in lookup v' s'
% ;

% Monotonicity of logical equivalence on substitutions
rec monotoneSub :
    {h0:tctx}{h:tctx}{$W:[h0 |- h]}
    LogSub [g] [h |- $S1] [h |- $S2]
  -> LogSub [g] [h0 |- $S1[$W]] [h0 |- $S2[$W]]=
 / total es (monotoneSub _ _ _ _ _ iv es ) /
mlam h0,h,$W => fn es => case es of
| Nil => Nil
| Dot rs' rN [h |- D1] [h |- D2]  => Dot (monotoneSub [h0] [h] [h0 |- $W] rs') (logEq_Monotone [h0] [h0 |- $W] rN) [h0 |- D1[$W]] [h0 |- D2[$W]]
;


% Symmetry of logical equivalence on substitutions
rec logEqSubSym :
   LogSub [g] [h |- $S1] [h |- $S2]
 -> LogSub [g] [h |- $S2] [h |- $S1] =
 / total e (logEqSubSym g h sigma sigma' e) /
fn e => case e of
| Nil => Nil
| Dot e' e1 [h |- D1] [h |- D2] => Dot (logEqSubSym e') (logEqSym _ e1) [h |- D2] [h |- D1];

% Transitivity of logical equivalence on substitutions
rec logEqSubTrans :
   LogSub [g] [h |- $S1] [h |- $S2]
 -> LogSub [g] [h |- $S2] [h |- $S3]
 -> LogSub [g] [h |- $S1] [h |- $S3] =
/ total e1 (logEqSubTrans g g h s1 s2 s3 e1) /
fn e1 => fn e2 => case e1 of
| Nil => let Nil = e2 in Nil
| Dot e1' x1 [h |- D1] [h |- D2] => let Dot e2' x2 [h |- D3] [h |- D4] = e2 in Dot (logEqSubTrans e1' e2') (logEqTrans _ x1 x2) [h |- D1] [h |- D4];


rec lookup : {g:ctx}{#p:[g |- block (x:tm, u: oft x Q[])]} LogSub [g] [h |- $S1] [h |- $S2]
   -> Log [h |- #p.1[$S1] sim #p.1[$S2]] [|- Q] =
 / total g (lookup g) /
 mlam g, #p => fn s => case [g] of
	 | [] => impossible [ |- #p.1]
	 | [g',b:block x:tm,y:oft x S[]] =>
	   let Dot rs rm [h |- D1] [h |- D2] = s in
	   (case [g', b:block (x:tm, y:oft x S[]) |- #p.2] of
	      |  {#q:[g0 |- block (x:tm, u: oft x P[])]}
                 [g0, b:block (x:tm, y: oft x T[]) |- #q.2[..]] => lookup [g'] [g' |- #q] rs
	      | [g0, b:block (x:tm, u: oft x T[]) |- b.2] => rm
)
 ;

% Tiny fundamental theorem
rec thm' : [g |- oft M T[]] -> LogSub [g] [h |- $S1] [h |- $S2] -> Log [h |- M[$S1] sim M[$S2]] [|- T] =
/ total d (thm' g h m t s1 s2 d) /
fn d, s =>
let s : LogSub [g] [h |- $S1] [h |- $S2] = s in
case d of
| [g |- #p.2] =>  lookup [g] [g |- #p] s
| [g |- t_app D1 D2] =>
  let LogArr [h |- M1] [h |- M2] f = thm' [g |- D1] s in
  f [h] [h |- ..] [h |- _] [h |- D2[$S1]] [h |- _] [h |- D2[$S2]] (thm' [g |- D2] s)

| [g |- t_lam (\x.\y. D0)] =>
  let ([g |- _ ] : [g |- oft (lam \x.M) (arr P[] Q[])]) = d in
  LogArr [h |- lam \x.M[$S1[..],x]] [h |- lam \x.M[$S2[..],x]]
   (mlam h0,$W,N1,D1,N2,D2 => fn rn =>
    let q0 = Dot (monotoneSub [h0] [h] [h0 |- $W] s) rn [h0 |- D1] [h0 |- D2] in
    let q2 = thm' [g,b:block x:tm,y:oft x P[] |- D0[..,b.1,b.2]] q0 in
   closed [|- Q]
         [h0 |- trans1 beta refl]
         [h0 |- trans1 beta refl]
         q2
   )
;

% Perhaps an alternative to this is to explicitly carry around typing derivations in thm
rec dtp1 : (g:ctx) [g |- deq M1 M2 T[]] -> [g |- oft M1 T[]] =
/ total d (dtp1 g m1 m2 t d) /
fn d => case d of
| [g |- d_app D1 D2] =>
  let [g |- E1] = dtp1 [g |- D1] in
  let [g |- E2] = dtp1 [g |- D2] in
  [g |- t_app E1 E2]
| [g |- d_lam (\x.\y. D1)] =>
  let [g,b:block x:tm,y:oft x T[] |- E1] = dtp1 [g,b:block x:tm,y:oft x _ |- D1[..,b.1,b.2]] in
  [g |- t_lam (\x.\y. E1[..,<x;y>])]
| [g |- d_beta (\x.\y. D1) D2] =>
  let [g,b:block x:tm,y:oft x T[] |- E1] = dtp1 [g,b:block x:tm,y:oft x _ |- D1[..,b.1,b.2]] in
  let [g |- E2] = dtp1 [g |- D2] in
  [g |- t_app (t_lam (\x.\y. E1[..,<x;y>])) E2]
| [g |- d_ext (\x.\y. D1)] =>
      % this case is impossible because a form of strengthening
      % unsupported by Beluga is needed.
      % Try to do this case on paper to see what I mean.
      ?
  % let [g,b:block x:tm,y:oft x T[] |- t_app E1[..] b.2] = dtp1 [g,b:block x:tm,y:oft x _ |- D1[..,b.1,b.2]] in
  % [g |- E1]
| [g |- d_refl D1] => [g |- D1]
| [g |- d_sym D1] => dtp2 [g |- D1]
| [g |- d_trans D1 D2] => dtp1 [g |- D1]
and rec dtp2 : (g:ctx) [g |- deq M1 M2 T[]] -> [g |- oft M2 T[]] =
 / total d (dtp2 g m1 m2 t d) /
fn d => case d of
| [g |- d_app D1 D2] =>
  let [g |- E1] = dtp2 [g |- D1] in
  let [g |- E2] = dtp2 [g |- D2] in
  [g |- t_app E1 E2]
| [g |- d_lam (\x.\y. D1)] =>
  let [g,b:block x:tm,y:oft x T[] |- E1] = dtp2 [g,b:block x:tm,y:oft x _ |- D1[..,b.1,b.2]] in
  [g |- t_lam (\x.\y. E1[..,<x;y>])]
| [g |- d_beta (\x.\y. D1) D2] =>
  let [g,b:block x:tm,y:oft x T[] |- E1] = dtp2 [g,b:block x:tm,y:oft x _ |- D1[..,b.1,b.2]] in
  let [g |- E2] = dtp2 [g |- D2] in
  [g |- E1[..,< _ ; E2 >]]
| [g |- d_ext (\x.\y. D1)] =>
      % Again, an unsupported form of strengthening is required to prove this case.
      ?
  % let [g,b:block x:tm,y:oft x T[] |- t_app E1[..] b.2] = dtp2 [g,b:block x:tm,y:oft x _ |- D1[..,b.1,b.2]] in
  % [g |- E1]
| [g |- d_refl D1] => [g |- D1]
| [g |- d_sym D1] => dtp1 [g |- D1]
| [g |- d_trans D1 D2] => dtp2 [g |- D2]
;

% % Fundamental theorem
rec thm : [g |- deq M1 M2 T[]]
        -> LogSub [g] [h |- $S1] [h |- $S2]
        -> Log [h |- M1[$S1] sim M2[$S2]] [|- T] =
 / total d (thm g h m1 m2 t sigma sigma' d) /
fn d , s =>
let s : LogSub [g] [h |- $S1] [h |- $S2] = s in
case d of
| [g |- d_app D1 D2] =>
  let LogArr [h |- M1] [h |- M2] f = thm [g |- D1] s in
  let [g |- E1] = dtp1 [g |- D2] in
  let [g |- E2] = dtp2 [g |- D2] in
  f [h] [h |- ..] [h |- _] [h |- E1[$S1]] [h |- _] [h |- E2[$S2]] (thm [g |- D2] s)
| [g |- d_beta (\x.\y. D1) D2] =>
  let [h |- E1] = dtp1 [h |- D2[$S1]] in
  let [h |- E2] = dtp2 [h |- D2[$S2]] in
   let q0 = thm [g,b:block x:tm,y:oft x _ |- D1[..,b.1,b.2]] (Dot s (thm [g |- D2] s)  [h |- E1] [h |- E2]) in
   closed _ [h |- trans1 beta refl] [h |- refl] q0
| [g |- d_lam \x.\y. E1] =>
  let ([g |- _ ] : [g |- deq (lam \x.M1) (lam \x.M2) (arr P[] Q[])]) = d in
  LogArr [h |- lam (\x. M1[$S1[..],x])] [h |- lam (\x. M2[$S2[..],x])]
   (mlam h0,$W,N1,D1,N2,D2 => fn rn =>
    let q0 = Dot (monotoneSub [h0] [h] [h0 |- $W] s) rn [h0 |- D1] [h0 |- D2] in
    let q2 = thm [g,b:block x:tm,y:oft x _ |- E1[..,b.1,b.2]] q0 in
    closed [|- Q] [h0 |- trans1 beta refl] [h0 |- trans1 beta refl] q2
   )
| [g |- d_ext (\x.\y. D0)] =>
  let ([g |- _ ] : [g |- deq M1 M2 (arr P[] Q[])]) = d in
  LogArr [h |- M1[$S1]] [h |- M2[$S2]] (mlam h0,$W,N1,D1,N2,D2 => fn rn =>
    let q0 = Dot (monotoneSub [h0] [h] [h0 |- $W] s) rn [h0 |- D1] [h0 |- D2] in
    thm [g,b:block x:tm,y:oft x _ |- D0[..,b.1,b.2]] q0
  )
| [g |- d_refl D1] => thm' [g |- D1] s
| [g |- d_sym D1] => logEqSym _ (thm [g |- D1] (logEqSubSym s))
| [g |- d_trans D1 D2] => logEqTrans _ (thm [g |- D1] s) (thm [g |- D2] (logEqSubTrans (logEqSubSym s) s))
;



% $Id is a substitution which moves from a term context to a neutral term context in the obvious way
inductive IdSub : (g':tctx){g:ctx}{$Id:[g' |- g]} ctype =
| INil : IdSub [] [|- ^]
| ISnoc : {T:[|-tp]}IdSub [g] [g' |- $Id]
        -> IdSub [g,b:block (x:tm, u:oft x T[])] [g',b:block (x:tm, u:oft x T[], a:algeqr x x T[]) |- $Id[..], <b.1 ; b.2> ]
;


rec idLogSub : IdSub [g] [g' |- $Id] -> LogSub [g] [g' |- $Id] [g' |- $Id] =
/ total r (idLogSub g g s r) /
fn r => case r of
| INil => Nil
| ISnoc [|- T] r' =>
 let (s : LogSub [g] [h |- $S] [h |- $S]) = idLogSub r' in
  let wkn = monotoneSub
       [h,b:block (x:tm,u: oft x T[], a:algeqr x x T[]) ] [h]
       [h,b:block (x:tm,u: oft x T[], a:algeqr x x T[]) |- ..] s in
  let rx = reflect [|- T] [h,b:block (x:tm , u:oft x T[], a: algeqr x x T[]) |- b.3] in
   Dot wkn rx  [h,b:block (x:tm,u: oft x T[], a:algeqr x x T[]) |- b.2]
               [h,b:block (x:tm,u: oft x T[], a:algeqr x x T[]) |- b.2]
;


rec main : {T:[ |- tp]}[g |- deq M N T[]] -> IdSub [g] [h |- $S] -> [h |- algeqn M[$S] N[$S] T[]] =
mlam T => fn d => fn wk => reify [|- T] (thm d (idLogSub wk)) ;
