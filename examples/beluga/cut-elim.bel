% Cut-admissibility as a function

i : type.  % individuals
o : type.  % formulas

imp    : o -> o -> o.
not    : o -> o.
true   : o.
forall : (i -> o) -> o.

hyp  : o -> type.  % Hypotheses (left)
conc : o -> type.  % Conclusion (right)

axiom   : {A:o} (hyp A -> conc A).
truer   : conc (true).
impr    : {A:o} {B:o} (hyp A -> conc B) -> conc (imp A B).
impl    : {A:o} {B:o} {C:o} conc A -> (hyp B -> conc C) -> (hyp (imp A B) -> conc C).
notr    : {A:o} ({p:o} hyp A -> conc p) -> conc (not A).
notl    : {A:o} {C:o} conc A -> (hyp (not A) -> conc C).
forallr : {A:i -> o} ({a:i} conc (A a)) -> conc (forall A). 
foralll : {A:i -> o} {C:o} {T:i} (hyp (A T) -> conc C) -> (hyp (forall A) -> conc C).

% TODO convert the following (Twelf) proof

% ca : {A:o} conc A -> (hyp A -> conc C) -> conc C -> type.
% %mode ca +A +D +E -F.
% 
% %% Axiom Conversions
% 
% ca_axiom_l : ca A (axiom H) E (E H).
% 
% ca_axiom_r : ca A D ([h:hyp A] axiom h) D.
% ca_imp  : ca (A1 imp A2) (impr D2)
% 	   ([h:hyp (A1 imp A2)] impl (E1 h) (E2 h) h) F
% 	   <- ca (A1 imp A2) (impr D2) E1 E1'
% 	   <- ({h2:hyp A2}
% 		 ca (A1 imp A2) (impr D2)
% 		 ([h:hyp (A1 imp A2)] E2 h h2) (E2' h2))
% 	   <- ca A1 E1' D2 D2'
% 	   <- ca A2 D2' E2' F.
% ca_not  : ca (not A1) (notr D1)
% 	   ([h:hyp (not A1)] notl (E1 h) h) (F2 C)
% 	   <- ca (not A1) (notr D1) E1 F1
% 	   <- ({p:o} ca A1 F1 ([h1:hyp A1] D1 p h1) (F2 p)).
% 
% 
% ca_forall : ca (forall A1) (forallr D1)
% 	     ([h:hyp (forall A1)] foralll T (E1 h) h) F
% 	     <- ({h2:hyp (A1 T)}
% 		   ca (forall A1) (forallr D1)
% 		   ([h:hyp (forall A1)] E1 h h2) (E1' h2))
% 	     <- ca (A1 T) (D1 T) E1' F.
% 
% cal_impl   : ca A (impl D1 D2 H) E (impl D1 D2' H)
% 	      <- ({h2:hyp B2} ca A (D2 h2) E (D2' h2)).
% 
% cal_notl   : ca A (notl D1 H) E (notl D1 H).
% 
% cal_foralll : ca A (foralll T D1 H) E (foralll T D1' H)
% 	       <- ({h} ca A (D1 h) E (D1' h)).
% 
% car_axiom : ca A D ([h:hyp A] axiom H1) (axiom H1).
% 
% car_impr : ca A D ([h:hyp A] impr (E2 h)) (impr E2')
% 	    <- ({h1:hyp B1} ca A D ([h:hyp A] E2 h h1) (E2' h1)).
% 
% car_impl : ca A D ([h:hyp A] impl (E1 h) (E2 h) H) (impl E1' E2' H)
% 	    <- ca A D E1 E1'
% 	    <- ({h2:hyp B2} ca A D ([h:hyp A] E2 h h2) (E2' h2)).
% car_notr : ca A D ([h:hyp A] notr (E1 h)) (notr E1')
% 	    <- ({p:o} {h1:hyp B1} ca A D ([h:hyp A] E1 h p h1) (E1' p h1)).
% 
% car_notl : ca A D ([h:hyp A] notl (E1 h) H) (notl E1' H)
% 	    <- ca A D E1 E1'.
% 
% car_truer: ca A D ([h:hyp A] truer) (truer).
% 
% car_forallr : ca A D ([h:hyp A] forallr (E1 h)) (forallr E1')
% 	       <- ({a:i} ca A D ([h:hyp A] E1 h a) (E1' a)).
% 
% car_foralll: ca A D ([h:hyp A] foralll T (E1 h) H) (foralll T E1' H)
% 	      <- ({h1} ca A D ([h:hyp A] E1 h h1) (E1' h1)).
