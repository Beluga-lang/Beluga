%%% The result of conversion to canonical form is canonical.
%%% Author: Frank Pfenning
%%% Adapted: Brigitte Pientka

schema i_ctx = some [a:o] block u:pf a , ta:toatm a u u , _t:atm u + i;

rec iscan : (g:i_ctx) [g |- tocan A D (D')] -> [g |- can A (D')] =
fn tc => case tc of
|[g |- tc_and (TC2) (TC1)] =>
 let [g |- CN1] = iscan [g |- TC1] in
 let [g |- CN2] = iscan [g |- TC2] in
   [g |- can_andi (CN2) (CN1)]

|[g |- tc_true] => [g |- can_truei]

%{
|[g] tc_imp (\u.\ta. TC1 u ta) =>
 let % {CN1:: (can B (D1 u v))[g,u:pf A, v: atm u]}
     [g, b:block u:pf A, v:toatm u u  |-  atm u] CN1 b.1 b.3 =
     iscan [g, b:block u:pf _ , v:toatm u u  |-  atm u] ([g,b] TC1 b.1 b.2) in
  [g |- can_impi (\u.\at. CN1 u at)]


|[g] tc_forall (\a. TC1 a) =>
 let [g,a:i] CN1 a = iscan [g,a:i] ([g,a] TC1 a) in
   [g] can_foralli (\a. CN1 a)

}%

|[g |- tc_whr (TC1) (WHR)] =>
   iscan [g |- TC1 ]

|[g |- tc_atm (TA1 )] =>
 let [g |- AT1] = isatm [g |- TA1 ] in
   [g |- can_atm (AT1 )]

and rec isatm : (g:i_ctx) [g |- toatm A D (D')]   -> [g |- atm (D')] =
fn ta => case ta of
| [g |- #p.2] => [g |- #p.3]
| [g |- ta_andel (TA1)] =>
 let [g |- AT1] = isatm [g |- TA1] in
   [g |- atm_andel (AT1)]

|[g |- ta_ander (TA1)] =>
 let [g |- AT1] = isatm [g |- TA1] in
  [g |- atm_ander (AT1)]

|[g |- ta_impe (TC2 ) (TA1)] =>
 let [g |- AT1] = isatm [g |- TA1] in
 let [g |- CN2] = iscan [g |- TC2] in
  [g |- atm_impe (CN2) (AT1)]

|[g |- ta_foralle (TA1 )] =>
 let [g |- AT1] = isatm [g |- TA1] in
 [g |- atm_foralle (AT1)]
;

rec iscan_thm : [ |- tocan A D D'] -> [ |- can A D'] =
fn tc => iscan tc ;
