%%% Expression representation using de Bruijn indices
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Hannan & Pfenning 92]

% Expressions

exp'   : type.  %name exp' F.

one      : exp'.
shift    : exp' -> exp'.  %postfix 20 ^.
lam'     : exp' -> exp'.
app'     : exp' -> exp' -> exp'.

% Environments and values

env    : type.  %name env K.
val    : type.  %name val W.

empty  : env.
cons   : env -> val -> env.   %infix left 10 ;.

clo    : env -> exp' -> val.


%%% Mini-ML Natural Semantics for de Buijn version
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Michaylov & Pfenning 92]

feval : env -> exp' -> val -> type.  %name feval D.

% Variables
fev_1 : feval (cons K W) one W.
fev_^ : feval (cons K W') (shift F) W
	   <- feval K F W.

% Functions
fev_lam : feval K (lam' F) (clo K (lam' F)).

fev_app : feval K (app' F1 F2) W
	   <- feval K F1 (clo K' (lam' F1'))
	   <- feval K F2 W2
	   <- feval (cons K' W2) F1' W.

