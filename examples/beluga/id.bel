nat : type.
z : nat.
s : nat -> nat.


rec identity : (nat)[.] -> (nat) [.] =
    fn x =>
      case x of
          box (. . z)   : (nat) [.] => box (. z)
        | {U::nat[.]}box (. . s U ![ . ]!) : nat [.] => box (. s U ![ . ]!);


rec plus : (nat) [.] -> (nat) [.] -> (nat) [.] = 
  fn x => fn y => 
    case x of box (. . z) : nat [.]  => y
            | {U:: nat [.]}box (. . s U ![.]! ) : nat [.] => 
	      (case (plus (box (. U![.]!)) y) of 
 	        {V:: nat [.]} box (. . V![.]!) : nat [.] => box (. s V![.]!));


rec plus' : (nat) [.] -> (nat) [.] -> (nat) [.] = 
  fn x => fn y => 
    case x of box (. . z) : nat [.]  => y
            | {U:: nat [.]}box (. . s U![.]!) : nat [.] => 
	      (case (plus' (box (. U![.]!)) y) of 
 	        {V:: nat [.]} box (. . V![.]!) : nat [.] => box (. s V![.]!));

