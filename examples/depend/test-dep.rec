tp: type.
nat: tp.
arr: tp -> tp -> tp.

exp : tp -> type.

z : exp nat.
s  : exp nat -> exp nat.
lam : (exp T1 -> exp T2) -> exp (arr T1 T2).
coe : exp T -> exp T.

schema w = some [T:tp] block exp T;

rec test : {g:(w)*} (exp T ![id]! )[g] -> (exp T ![id]! ) [g] =
FN g =>  
    fn x => 
      case x of

          box (g. z)   => box (g. z)

        | box (g. s U![id]! )  => 
	   box(g. s U![id]!)

        | box(g . coe E![id]!) =>  box(g . coe E![id]!)

        | box(g . lam (\ x. E![id , x]!))  =>  
            box(g . lam (\ x. E![id , x]!))   


 	| box(g. #p![id]!) => box(g. #p![id]!)
;
