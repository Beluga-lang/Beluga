exp  : type.
z    : exp.
suc  : exp -> exp.

app  : exp -> exp -> exp.
lam  : (exp -> exp) -> exp.

pair : exp -> exp -> exp.
fst  : exp -> exp.
snd  : exp -> exp.

case' : exp -> exp -> (exp -> exp) -> exp.
letv : exp -> (exp -> exp) -> exp.
letn : exp -> (exp -> exp) -> exp.
fix  : (exp -> exp) -> exp.


value : exp -> type.
v_z   : value z.
v_s   : value V -> value (suc V).
v_l   : value (lam (\ x . E x)).
v_p   : value V2 -> value V1 -> value (pair V1 V2).

eval : exp -> exp -> type.
ev_z : eval z z.
ev_s : eval E V -> eval (suc E) (suc V).

ev_lam: eval (lam (\ x . E x)) (lam (\ x . E x)).

ev_app:  eval (E1' V2) V  ->
         eval E2 V2 ->
         eval E1 (lam (\ x . E1' x))
      -> eval (app E1 E2) V.

ev_pair: eval E2 V2 -> eval E1 V1
	 -> eval (pair E1 E2) (pair V1 V2).

ev_fst : eval E (pair V1 V2)
       -> eval (fst E) V1.

ev_snd : eval E (pair V1 V2)
       -> eval (snd E) V2.

ev_case'_z : eval E2 V  ->
 	    eval E1 z
         -> eval (case' E1 E2 (\ x . E3 x)) V.

ev_case'_s :  eval (E3 V1') V ->  eval E1 (suc V1')
	  -> eval (case' E1 E2 (\ x . E3 x)) V.

ev_letv	  : eval (E2 V1) V ->
	    eval E1 V1
         -> eval (letv E1 (\ x . E2 x)) V.

ev_letn :  eval (E2 E1) V
	   -> eval (letn E1 (\ x . E2 x)) V.


ev_fix :    eval (E (fix (\ x . E x))) V
	  -> eval (fix (\ x . E x)) V.


vs: eval E V -> value V -> type.

vs_z    : vs ev_z v_z.

vs_s    : vs D P -> vs (ev_s D) (v_s P).

vs_lam  : vs (ev_lam) (v_lam).

vs_app  : vs D3 P3
       -> vs (ev_app D3 D2 D1) P3.

vs_fst  : vs D' (v_p P2 P1)
	-> vs (ev_fst D') P1.

vs_snd  : vs D' (v_p P2 P1)
       -> vs (ev_snd D') P2.

vs_pair : vs D2 P2 -> vs D1 P1
	-> vs (ev_pair D2 D1) (v_p P2 P1).


vs_case'_z :   vs D2 P2
	   -> vs (ev_case'_z D2 D1) P2.

vs_case'_s :  vs D3 P3
	  -> vs (ev_case'_s D3 D1) P3.


vs_letv :  vs D2 P2
	-> vs (ev_letv D2 D1) P2.

vs_letn :  vs D2 P2
	-> vs (ev_letn D2) P2.


vs_fix :  vs D1 P1
       -> vs (ev_fix D1) P1.
