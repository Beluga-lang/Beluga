%%% Soundness of uniform proofs
%{Comment: In Twelf, we implement the context
	coercion as a separate judgement

        h_sound : assume A -> pf A)[ ] 

}%

% Soundness of uniform proofs
schema s_ctx = some [a:o] assume a;
schema p_ctx = some [a:o] pf a;

coercion s2p : s_ctx --> p_ctx = 
      [a:o] assume a --> pf a ;

rec s_sound : {g:(s_ctx)*} (solve A)[g] -> (pf A)[s2p(g)] = 
fn s => case s of 
 | [g] s_and (S2 ..) (S1 ..) => 
   let [s2p(g)] D1 .. = s_sound ([g] S1 ..) in 
   let [s2p(g)] D2 .. = s_sound ([g] S2 ..) in 
     [s2p(g)] andi (D1 ..) (D2 ..)

 |[g] s_true => [s2p(g)] truei

 | [g] s_atom I2 (#p ..) =>  
 let [s2p(g),u: pf _ ] D2 .. = i_sound ([ ] I2 .. ) in       
   [ ] D2 .. s2p(#p..)

and i_sound : {g:(s_ctx)*}(entail A P)[g]  -> (pf (atom P))[s2p(g),u:pf A] = 
fn d => case d of 
 | [g] i_andl (I1 ..) => 
   let [s2p(g), u: pf _ ] D1 .. u = i_sound ([g] I1 ..) in 
       [s2p(g), u] D1 .. (andel u)

 | [g] i_andr (I2 ..) => 
   let [s2p(g), u: pf _ ] D2 .. u = i_sound ([g] I2 ..) in 
       [s2p(g), u] D2 .. (ander u)

 | [g]s i_imp (S2 ..) (I1 ..)s => 
   let [s2p(g), u:pf _] D1 .. u = i_sound ([g] I1 ..) in 
   let [s2p(g)] D2 ..           = s_sound ([g] S2 ..) in 
     [u] D1 .. (impe u (D2 ..))

 | [g] i_forall T (I1 ..) =>
   let [s2p(g),u: pf _ ] D1 .. u = i_sound ([g] I1 ..) in 
     [s2p(g), u] D1 .. (foralle u T)

 | [g] i_atom => [s2p(g), u] u

 ;
%{
is_andr : i_sound (i_andr I2) (\u. D2 (ander u))
	   <- i_sound I2 D2.

is_imp  : i_sound (i_imp S2 I1) (\u. D1 (impe u D2))
	   <- i_sound I1 D1
	   <- s_sound S2 D2.

is_forall : i_sound (i_forall T I1) (\u. D1 (foralle u T))
	     <- i_sound I1 D1.

is_atom : i_sound (i_atom) (\u. u).



and h_sound : (assume A)[ ] -> (pf A)[ ] = 
}%
