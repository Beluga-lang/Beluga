LF nat: type =
| zero   : nat
| succ : nat â†’ nat
;

LF plus: nat -> nat -> nat -> type =
| pzn: plus zero N N
| psn: plus N M Q -> plus (succ N) M (succ Q)
;

inductive Addup: [ |- nat] -> ctype =
| AddNil: Addup [ |- zero]
| AddSuc: Addup [ |- plus N Y Q]
;
