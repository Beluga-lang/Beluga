%%% Mapping evaluations to evaluations in environments.
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Hannan & Pfenning 92]

% To return a pair: feval K F W * vtrans W V we define the
% following constructor. This avoids not only computation-level pairs
% but also avoids existential types on the computation-level.

% Bisimulation (1)
% If eval E V and trans K F E then there exists a W s.t.
% vtrans V W and feval K F W.

fev_vtr: env -> exp' -> exp  -> type.

fev_vtrans: feval K F W → vtrans W V → fev_vtr K F V.

rec map_eval : [ |- eval E V] -> [ |- trans K F E] -> [ |- fev_vtr K F V] =
% / total c (map_eval e v k f d c)/
fn d => fn c => case c of
| [ |- tr_1 (vtr_lam (tr_lam (\w. \x. \v. C2)))] =>
    let [ |- ev_lam] = d in
    [ |- fev_vtrans (fev_1) (vtr_lam (tr_lam (\w. \x. \v. C2)))]

| [ |- tr_^ C1] =>
  let [ |- fev_vtrans  D1' U1] = (map_eval d) [ |- C1] in
    [ |- fev_vtrans   (fev_^ D1') U1]

| [ |- tr_lam (\w. \x. \u. C1)] =>
  let [ |- ev_lam] = d in
    [ |- fev_vtrans (fev_lam) (vtr_lam (tr_lam (\w.\x.\u. C1)))]

| [ |- tr_app C2 C1] =>
  let [ |- ev_app D3 D2 D1] = d in
  let [ |- fev_vtrans D1' (vtr_lam (tr_lam (\w. \x. \v. C3)))] =
         map_eval [ |- D1] [ |- C1] in
  let [ |- fev_vtrans D2' U2] = (map_eval [ |- D2]) [ |- C2] in
  let [ |- fev_vtrans D3' U3] = (map_eval [ |- D3]) [ |- (C3[_,_,U2])] in
  [ |- fev_vtrans (fev_app D3' D2' D1') U3]
   ;


% Other direction:
% Bisimulation (2)
% If trans K F E and feval K F W then then there exists a value V s.t. eval E V and vtrans W V.
%

ev_vtr: exp -> val  -> type.

ev_vtrans: eval E V → vtrans W V → ev_vtr E W.

rec map_eval' : [ |- trans K F E] -> [ |- feval K F W] -> [ |- ev_vtr E W] =
% / total c (map_eval' k f e w c) /
fn c => fn d => case c of
| [ |- tr_1 (vtr_lam (tr_lam (\w. \x. \v. C2)))] =>
    let [ |- fev_1] = d in
    [ |- ev_vtrans (ev_lam) (vtr_lam (tr_lam (\w. \x. \v. C2)))]

| [ |- tr_lam (\w. \x. \u. C1)] =>
    let [ |- fev_lam] = d in
      [ |- ev_vtrans (ev_lam) (vtr_lam (tr_lam (\w.\x.\u. C1)))]

| [ |- tr_^ C1] =>
     let [ |- fev_^ D1'] = d in map_eval' [ |- C1] [ |- D1']

| [ |- tr_app C2 C1] =>
  let [ |- fev_app D3' D2' D1'] = d in
  let [ |- ev_vtrans D1 (vtr_lam (tr_lam (\w. \x. \v. C3)))] =
      map_eval' [ |- C1] [ |- D1'] in

  let [ |- ev_vtrans D2 U2]  = map_eval' [ |- C2] [ |- D2']  in
  let [ |- ev_vtrans D3 U3]  = map_eval' [ |- (C3[_,_,U2])] [ |- D3'] in
  [ |- ev_vtrans (ev_app D3 D2 D1) U3]

;
