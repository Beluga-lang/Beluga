% Variable counting (see Pientka [POPL'08])
% Author:  Brigitte Pientka
%
% This example only uses weak higher-order abstract syntax.

tp  : type.
nat : tp.
bool: tp.

exp : tp -> type.
z   : exp nat.
s   : exp nat -> exp nat.

tt  : exp bool.

add : exp nat -> exp nat -> exp nat.
letv: {T1:tp}exp T1 -> (exp T1 -> exp T2) -> exp T2.


schema W = some [T:tp] block exp T;


rec plus : (exp nat) [.] -> (exp nat) [.] -> (exp nat) [.] =
fn x => fn y =>
 (case x of
    box(. . z)  => y

  | box(. . s U ![.]!)  =>
    (case (plus box(. U![.]!) y) of
       box(. . V![.]!) : (exp nat)[.] 
       => box(. s V![.]!)));


rec cntV : {g:(W)*} (exp S![.]!)[g, x:(exp T![.]!)] -> (exp nat) [.] =
FN g => 
  fn e =>
  (case e of

      box(g,x : exp T'![.]! . tt)  => box(. z)

%   | box(g,x : exp T2![.]! . #p![id]!)     
%    => box(. z)
%
%   | box(g,x : exp T'![.]! . x)  => box(. s z)
%
%
%   | box(g,x : exp T'![.]! . z)   => box(. z)
%
%   | box(g,x : exp T'![.]! . s W ![id, x]! )  => 
%          cntV [g]   box(g,x . W![id, x]!)
%
%   | box(g,x : exp T'![.]! . letv  T1![.]! U1![id, x]! (\ y . U2![id, x, y]!)) =>
%             plus (cntV [g]  box(g,x . U1![id, x]!)) 
%                  (cntV [g, y:exp T1![.]!]  box(g,y,x . U2![id, x, y]!))
%
%
%   | box(g,x: exp T'![.]! . add U![id, x]! W![id, x]!)  =>
%          plus (cntV [g] box(g,x . U![id, x]!))
%               (cntV [g] box(g,x . W![id, x]!))
%
);


