%%% Lemmas concerning ordinary multi-step reduction
%%% Author: Frank Pfenning
%%% Adapted to Beluga: Brigitte Pientka

% Terms can contain free variables without explicit
% assumptions about them (for multi-step reduction)

% block ltm : block {x:term}.
schema tctx = term;

% Transitivity of multi-step reduction
rec appd: (g:tctx) [g |- step* M M']  ->  [g |- step*  M' M'']
        ->  [g |- step* M M''] =
/ total r (appd g m m' m'' r s) /
fn r => fn s => case r of
| [g |- id1] => s
| [g |- step1 R1 R2*] =>
  let [g |- S2*'] = appd [g |- R2* ] s in
    [g |- step1 R1 S2*']

;

% Multi-step reduction is a congruence
rec lm1* : (g:tctx) [g,x:term |-  step* M M']
      ->  [g |- step* (lam (\x. M)) (lam (\x. M'))] =
/ total r (lm1* g m m' r) /
fn r => case r of
| [g,x:term |-  id1] => [g |- id1]
| [g,x:term |-  step1 R1 R2*] =>
  let [g |- S2*] = lm1* [g,x |- R2*] in
    [g |- step1 (lm1 \x. R1) S2*]
;


rec apl1* :(g:tctx) {M2:[g |- term]} [g |- step* M1 M1']
                 ->  [g |- step*  (app M1 M2) (app M1' M2)] =
/ total r (apl1* g m1 m1' m2 r) /
 mlam M2 => fn r => case r of
| [g |- id1] => [g |- id1]
| [g |- step1 R1 R2*] =>
  let [g |- S2*] = apl1* [g |- M2 ] [g |- R2*] in
    [g |- step1 (apl1 R1) S2*]
;

rec apr1* : (g:tctx) {M1:[g |- term]}
            [g |- step* M2 M2']
         ->  [g |- step*  (app M1 M2) (app M1 M2')] =
/ total r (apr1* g m2 m2' m1 r) /
mlam M1 => fn r => case r of
| [g |- id1] => [g |- id1]
| [g |- step1 R1 R2*] =>
  let [g |- S2*] = apr1* [g |- M1 ] [g |- R2*] in
    [g |- step1 (apr1 R1) S2*]
;
