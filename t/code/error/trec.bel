tp: type.  --name tp T a.
nat: tp.
all: (tp -> tp) -> tp.
arr: tp -> tp -> tp.

exp: tp -> type.  --name exp E x.
z: exp nat.
s: exp nat -> exp nat.
tlam: ({a:tp}exp (T a)) -> exp (all (\a. T a)).
tapp: exp (all (\a. T a)) -> {S:tp} exp (T S).


rec ev': [ |- exp T] -> [ |- exp S] =
 fn e => case e of

 [ |- z]  => [ |- z]

 ;
%
% Error (Reconstruction): ill typed expression
%  expected: exp Y[^0]
%  inferred: exp nat
%  for expression: z
%  in context:
%
%
