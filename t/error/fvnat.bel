tp: type.
nat: tp.
bool: tp.
arr : tp -> tp -> tp.


exp : tp -> type.
z   : exp nat.
suc : exp nat -> exp nat.
andi : exp bool -> exp bool -> exp bool.
tt  : exp bool.
ff  : exp bool.

app:  exp (arr T T') -> exp T -> exp T'.

lam : (exp T -> exp T') -> exp (arr T T').


opt: type.
nothing: opt.
something: exp T -> opt.

schema expCtx = some [t:tp] block _t:exp t;

rec free_var : {g:expCtx} [g |- exp (T[])] -> [g |- opt] =
mlam g  =>
 fn e =>
 (case e of
    [g |- z]             => [g |- nothing]
  | [g |- tt]            => [g |- nothing]
  | [g |- ff]            => [g |- nothing]

  | [g |- (#p[..])]
    => [g |- something  (#p[..])]

  | [g |- suc (U[..])]  => free_var [g] [g |- (U[..])]

  | [g |- andi (U[..]) (V[..])]  =>
       (case free_var [g] [g |- (U[..])] of
          [g |- nothing]   => free_var [g] [g |- (V[..])]
        | [g |- something  (#p[..])]  => [g |- something  (#p[..])]
	)

  | [g |- app (U[..]) (V[..])]  =>
       (case free_var [g] [g |- (U[..])] of
          [g |- nothing]   => free_var [g] [g |- (V[..])]

        | [g |- something  (#p[..])]  => [g |- something  (#p[..])]
	)

% CAUSES ERROR HERE: because the recursive call will return opt[g, x:exp _]
% but the overall function requires opt[g]
% THIS IS THE CORRECT BEHAVIOR
  | [g |- lam (\x. (U))] =>
       free_var [g, x:exp _ ] [g, x |-  (U)]

);
