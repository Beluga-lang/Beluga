% Types
LF tp  : type =
  | o   : tp
  | arr : tp -> tp -> tp
;
--name tp T.

% Intrinsically well-typed expressions
LF exp   : tp -> type =
  | app   : exp (arr A B) -> exp A -> exp B
  | ret   : value A -> exp A
and value : tp -> type =
  | lam   : {A:tp}(value A -> exp B) -> value (arr A B)
;

--name value V.
--name exp E.

LF term: type =
  | lam' : (term -> term) -> term
  | app' : term -> term -> term
;

schema ctx = some [t:tp] block x:term , _t:value t ;

rec conv: (g:ctx)[g |- exp (T[])] -> [g |- term] =
% / total e (conv g e) /
fn e => case e of
| [g |- app (E1 ) E2] =>
  let [g |- T1] = conv [g |- E1] in
  let [g |- T2] = conv [g |- E2] in
    [g |- app' (T1 ) T2]
| [g |- ret (V )] => convv [g |- V ]

and rec convv: (g:ctx)[g |- value (T[])] -> [g |- term] =
% / total v (convv g v)/
fn v => case v of
| [g |- #p.2] => [g |- #p.1]
| [g |- lam (A[]) (\v. E)] =>
    let [g,b:block x:term, _t:value (A[]) |-  T[..,b.1]] = conv [g,b:block (x:term , _t:value (A[])) |-  E[..,b.2]] in
      [g |- lam' \x. T]

;
