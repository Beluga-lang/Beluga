% In order to prove that a transition of a process P into Q through a tau action (fstep P f_tau Q) implies reduction of P into Q (P red Q),
% we need four additional lemmas which prove the result in particular cases.
% Each of this lemmas is structured in the same way.


% First lemma - case of the fs_com1 rule:
% If ex_fout_rew P1 X Y Q1 and ex_inp_rew P2 X Q2, then (P1 p_par P2) red (Q1 p_par (Q2 Y)).

% In order to prove this lemma, we analyze the structure of both of the types ex_inp_rew and ex_fout_rew that we have as hypotheses.
% When we consider the inductive case of each type, we need to apply structural induction to proceed:
% so we need a lexicographic induction overall.
% To encode this in Beluga, we need to split the proof in two parts:
% A first lemma (fs_com1_impl_red_base), in which we consider the base case of the first type and proceed by induction on the second type;
% a second lemma (fs_com1_impl_red), in which we consider the inductive case of the first type and proceed by induction on that first type.

rec fs_com1_impl_red_base: (g:ctx) [g ⊢ P2 cong ((p_in X \x.R[..,x])
  p_par S)] → [g,w:names ⊢ Q2[..,w] cong (R[..,w] p_par S[..])]
  → [g ⊢ ex_fout_rew P1 X Y Q1]
  → [g ⊢ (P1 p_par P2) red (Q1 p_par Q2[..,Y])] =
/ total d1 (fs_com1_impl_red_base _ _ _ _ _ _ _ _ _ _ _ d1) /
fn c3 ⇒ fn c4 ⇒ fn d1 ⇒ case d1 of
   | [g ⊢ fout_base C1 C2] ⇒
     let [g ⊢ C3] = c3 in
     let [g,w:names ⊢ C4[..,w]] = c4 in
     [g ⊢ r_str (c_trans (c_par C1) (c_trans par_comm (c_trans (c_par C3)
     par_comm))) (r_str par_assoc (r_par (r_str (c_trans (c_par par_comm)
     (c_trans (c_sym par_assoc) par_comm)) (r_par r_com) (c_trans par_comm
     (c_trans par_assoc (c_par par_comm))))) (c_sym par_assoc)) (c_trans
     (c_par (c_sym C2)) (c_trans par_comm (c_trans (c_par
     (c_sym C4[..,_])) par_comm)))]    
   | [g ⊢ fout_ind C1 C2 \w.D1[..,w]] ⇒
     let [g ⊢ C3] = c3 in
     let [g,y:names ⊢ C4[..,y]] = c4 in
     let [g,w:names ⊢ R1[..,w]] = fs_com1_impl_red_base
     [g,w:names ⊢ C3[..]] [g,w:names,y:names ⊢ C4[..,y]]
     [g,w:names ⊢ D1[..,w]] in
     [g ⊢ r_str (c_trans (c_par C1) sc_ext_par) (r_res \w.R1[..,w])
     (c_trans (c_sym sc_ext_par) (c_par (c_sym C2)))]
;

rec fs_com1_impl_red: (g:ctx) [g ⊢ ex_fout_rew P1 X Y Q1]
  → [g ⊢ ex_inp_rew P2 X \x.Q2[..,x]]
  → [g ⊢ (P1 p_par P2) red (Q1 p_par Q2[..,Y])] =
/ total d2 (fs_com1_impl_red _ _ _ _ _ _ _ _ d2) /
fn d1 ⇒ fn d2 ⇒ case d2 of
   | [g ⊢ inp_base C3 \y.C4[..,y]] ⇒
     let [g ⊢ R] = fs_com1_impl_red_base [g ⊢ C3]
     [g,y:names ⊢ C4[..,y]] d1 in [g ⊢ R]
   | [g ⊢ inp_ind C3 (\y.C4[..,y]) (\w.D2[..,w])] ⇒
     let [g ⊢ D1] = d1 in
     let [g,w:names ⊢ R1[..,w]] = fs_com1_impl_red [g,w:names ⊢ D1[..]]
     [g,w:names ⊢ D2[..,w]] in
     [g ⊢ r_str (c_trans par_comm (c_trans (c_par C3) (c_trans sc_ext_par
     (c_res \w.par_comm)))) (r_res \w.R1[..,w]) (c_trans (c_res
     \w.par_comm) (c_trans (c_sym sc_ext_par) (c_trans (c_par
     (c_sym C4[..,_])) par_comm)))]
;


% Second lemma - case of the fs_com2 rule:
% If ex_inp_rew P1 X Q1 and ex_fout_rew P2 X Y Q2,
% then (P1 p_par P2) red ((Q1 Y) p_par Q2).
rec fs_com2_impl_red_base: (g:ctx) [g ⊢ P1 cong ((p_in X \x.R[..,x]) p_par S)]
  → [g,w:names ⊢ Q1[..,w] cong (R[..,w] p_par S[..])]
  → [g ⊢ ex_fout_rew P2 X Y Q2] → [g ⊢ (P1 p_par P2) red (Q1[..,Y] p_par Q2)] =
/ total d2 (fs_com2_impl_red_base _ _ _ _ _ _ _ _ _ _ _ d2) /
fn c1 ⇒ fn c2 ⇒ fn d2 ⇒ case d2 of
   | [g ⊢ fout_base C3 C4] ⇒
     let [g ⊢ C1] = c1 in
     let [g,w:names ⊢ C2[..,w]] = c2 in
     [g ⊢ r_str (c_trans (c_par C1) (c_trans par_comm (c_trans (c_par C3) par_comm)))
     (r_str par_assoc (r_par (r_str (c_trans (c_par par_comm) (c_trans (c_sym par_assoc) par_comm))
     (r_par (r_str par_comm r_com par_comm)) (c_trans par_comm (c_trans par_assoc (c_par par_comm)))))
     (c_sym par_assoc)) (c_trans (c_par (c_sym C2[..,_]))
     (c_trans par_comm (c_trans (c_par (c_sym C4)) par_comm)))]
   | [g ⊢ fout_ind C3 C4 \w.D2[..,w]] ⇒
     let [g ⊢ C1] = c1 in
     let [g,y:names ⊢ C2[..,y]] = c2 in
     let [g,w:names ⊢ R1[..,w]] = fs_com2_impl_red_base [g,w:names ⊢ C1[..]]
     [g,w:names,y:names ⊢ C2[..,y]] [g,w:names ⊢ D2[..,w]] in
     [g ⊢ r_str (c_trans par_comm (c_trans (c_par C3) (c_trans sc_ext_par (c_res \w.par_comm))))
     (r_res \w.R1[..,w]) (c_trans (c_res \w.par_comm) (c_trans (c_sym sc_ext_par)
     (c_trans (c_par (c_sym C4)) par_comm)))]
;

rec fs_com2_impl_red: (g:ctx) [g ⊢ ex_inp_rew P1 X \x.Q1[..,x]]
  → [g ⊢ ex_fout_rew P2 X Y Q2] → [g ⊢ (P1 p_par P2) red (Q1[..,Y] p_par Q2)] =
/ total d1 (fs_com2_impl_red _ _ _ _ _ _ _ d1 _) /	
fn d1 ⇒ fn d2 ⇒ case d1 of
   | [g ⊢ inp_base C1 \y.C2[..,y]] ⇒
     let [g ⊢ R] = fs_com2_impl_red_base [g ⊢ C1] [g,y:names ⊢ C2[..,y]] d2 in [g ⊢ R]
   | [g ⊢ inp_ind C1 (\y.C2[..,y]) (\w.D1[..,w])] ⇒
     let [g ⊢ D2] = d2 in
     let [g,w:names ⊢ R1[..,w]] = fs_com2_impl_red [g,w:names ⊢ D1[..,w]] [g,w:names ⊢ D2[..]] in
     [g ⊢ r_str (c_trans (c_par C1) sc_ext_par) (r_res \w.R1[..,w])
     (c_trans (c_sym sc_ext_par) (c_par (c_sym C2[..,_])))]			   
;


% Third lemma - case of the fs_close1 rule:
% If ex_bout_rew P1 X Q1 and ex_inp_rew P2 X Q2,
% then (P1 p_par P2) red (nu z)((Q1 z) p_par (Q2 z)).

rec fs_close1_impl_red_base: (g:ctx) [g ⊢ P2 cong ((p_in X \x.R[..,x]) p_par S)]
  → [g,w:names ⊢ Q2[..,w] cong (R[..,w] p_par S[..])] → [g ⊢ ex_bout_rew P1 X \x.Q1[..,x]]
  → [g ⊢ (P1 p_par P2) red (p_res \x.(Q1[..,x] p_par Q2[..,x]))] =
/ total d1 (fs_close1_impl_red_base _ _ _ _ _ _ _ _ _ _ d1) /
fn c3 ⇒ fn c4 ⇒ fn d1 ⇒ case d1 of
   | [g ⊢ bout_base C1 \y.C2[..,y]] ⇒
     let [g ⊢ C3] = c3 in
     let [g,w:names ⊢ C4[..,w]] = c4 in
     [g ⊢ r_str (c_trans (c_par C1) sc_ext_par) (r_res \z.(r_str (c_trans par_comm
     (c_trans (c_par C3[..]) par_comm)) (r_str par_assoc (r_par (r_str (c_trans
     (c_par par_comm) (c_trans (c_sym par_assoc) par_comm)) (r_par r_com) (c_trans par_comm
     (c_trans par_assoc (c_par par_comm))))) ((c_sym par_assoc))) (c_trans (c_par (c_sym C2[..,_]))
     (c_trans par_comm (c_trans (c_par (c_sym C4[..,_])) par_comm))))) (c_ref)]
   | [g ⊢ bout_ind C1 (\y.C2[..,y]) (\w.D1[..,w])] ⇒
     let [g ⊢ C3] = c3 in
     let [g,w:names ⊢ C4[..,w]] = c4 in
     let [g,w:names ⊢ R1[..,w]] = fs_close1_impl_red_base [g,w:names ⊢ C3[..]]
     [g,w:names,y:names ⊢ C4[..,y]] [g,w:names ⊢ D1[..,w]] in
     [g ⊢ r_str (c_trans (c_par C1) sc_ext_par) (r_res \w.R1[..,w]) (c_trans sc_ext_res
     (c_trans (c_res \z.(c_sym sc_ext_par)) (c_res \z.(c_par (c_sym C2[..,_])))))]
;

rec fs_close1_impl_red: (g:ctx) [g ⊢ ex_bout_rew P1 X \x.Q1[..,x]]
  → [g ⊢ ex_inp_rew P2 X \x.Q2[..,x]]
  → [g ⊢ (P1 p_par P2) red (p_res \x.(Q1[..,x] p_par Q2[..,x]))] =
/ total d2 (fs_close1_impl_red _ _ _ _ _ _ _ d2) /
fn d1 ⇒ fn d2 ⇒ case d2 of
   | [g ⊢ inp_base C3 \y.C4[..,y]] ⇒
     let [g ⊢ R] = fs_close1_impl_red_base [g ⊢ C3] [g,y:names ⊢ C4[..,y]] d1 in [g ⊢ R]
   | [g ⊢ inp_ind C3 (\y.C4[..,y]) (\w.D2[..,w])] ⇒
     let [g ⊢ D1] = d1 in
     let [g,w:names ⊢ R1[..,w]] = fs_close1_impl_red [g,w:names ⊢ D1[..]] [g,w:names ⊢ D2[..,w]] in
     [g ⊢ r_str (c_trans par_comm (c_trans (c_par C3) (c_trans sc_ext_par (c_res \w.par_comm))))
     (r_res \w.R1[..,w]) (c_trans sc_ext_res (c_trans (c_res \z.(c_res \w.par_comm))
     (c_trans (c_res \z.(c_sym sc_ext_par)) (c_trans (c_res \z.(c_par (c_sym C4[..,_])))
     (c_res \z.par_comm)))))]
;


% Fourth lemma - case of the fs_close2 rule:
% If ex_inp_rew P1 X Q1 and ex_bout_rew P2 X Q2,
% then (P1 p_par P2) red (nu z)((Q1 z) p_par (Q2 z)).

rec fs_close2_impl_red_base: (g:ctx) [g ⊢ P1 cong ((p_in X \x.R[..,x]) p_par S)]
  → [g,w:names ⊢ Q1[..,w] cong (R[..,w] p_par S[..])] → [g ⊢ ex_bout_rew P2 X \x.Q2[..,x]]
  → [g ⊢ (P1 p_par P2) red (p_res \x.(Q1[..,x] p_par Q2[..,x]))] =
/ total d2 (fs_close2_impl_red_base _ _ _ _ _ _ _ _ _ _ d2) /
fn c1 ⇒ fn c2 ⇒ fn d2 ⇒ case d2 of
   | [g ⊢ bout_base C3 \y.C4[..,y]] ⇒
     let [g ⊢ C1] = c1 in
     let [g,w:names ⊢ C2[..,w]] = c2 in
     [g ⊢ r_str (c_trans par_comm (c_trans (c_par C3) (c_trans sc_ext_par (c_res \z.par_comm))))
     (r_res \z.(r_str (c_par C1[..]) (r_str par_assoc (r_par (r_str (c_trans (c_par par_comm)
     (c_trans (c_sym par_assoc) par_comm)) (r_par (r_str par_comm r_com par_comm))
     (c_trans par_comm (c_trans par_assoc (c_par par_comm))))) ((c_sym par_assoc)))
     (c_trans (c_par (c_sym C2[..,_])) (c_trans par_comm
     (c_trans (c_par (c_sym C4[..,_])) par_comm))))) (c_ref)]
   | [g ⊢ bout_ind C3 (\y.C4[..,y]) (\w.D2[..,w])] ⇒
     let [g ⊢ C1] = c1 in
     let [g,w:names ⊢ C2[..,w]] = c2 in
     let [g,w:names ⊢ R1[..,w]] = fs_close2_impl_red_base [g,w:names ⊢ C1[..]]
     [g,w:names,y:names ⊢ C2[..,y]] [g,w:names ⊢ D2[..,w]] in
     [g ⊢ r_str (c_trans par_comm (c_trans (c_par C3) (c_trans sc_ext_par (c_res \w.par_comm))))
     (r_res \w.R1[..,w]) (c_trans sc_ext_res (c_trans (c_res \z.(c_res \w.par_comm))
     (c_trans (c_res \z.(c_sym sc_ext_par)) (c_trans (c_res \z.(c_par (c_sym C4[..,_])))
     (c_res \z.par_comm)))))]
;

rec fs_close2_impl_red: (g:ctx) [g ⊢ ex_inp_rew P1 X \x.Q1[..,x]]
  → [g ⊢ ex_bout_rew P2 X \x.Q2[..,x]]
  → [g ⊢ (P1 p_par P2) red (p_res \x.(Q1[..,x] p_par Q2[..,x]))] =
/ total d1 (fs_close2_impl_red _ _ _ _ _ _ d1 _) /
fn d1 ⇒ fn d2 ⇒ case d1 of
   | [g ⊢ inp_base C1 \y.C2[..,y]] ⇒
     let [g ⊢ R] = fs_close2_impl_red_base [g ⊢ C1] [g,y:names ⊢ C2[..,y]] d2 in [g ⊢ R]
   | [g ⊢ inp_ind C1 (\y.C2[..,y]) (\w.D1[..,w])] ⇒
     let [g ⊢ D2] = d2 in
     let [g,w:names ⊢ R1[..,w]] = fs_close2_impl_red [g,w:names ⊢ D1[..,w]] [g,w:names ⊢ D2[..]] in
     [g ⊢ r_str (c_trans (c_par C1) sc_ext_par) (r_res \w.R1[..,w]) (c_trans sc_ext_res
     (c_trans (c_res \w.(c_sym sc_ext_par)) (c_res \w.(c_par (c_sym C2[..,_])))))]
;



% We now prove the first theorem: a transition of a process P into Q through a tau action (fstep P f_tau Q) implies reduction of P into Q (P red Q).

rec fstep_impl_red: (g:ctx) [g ⊢ fstep P f_tau Q] → [g ⊢ P red Q] =
/ total f (fstep_impl_red _ _ _ f) /
fn f ⇒ case f of
   | [g ⊢ fs_par1 F1] ⇒ let [g ⊢ R] = fstep_impl_red [g ⊢ F1] in
                         [g ⊢ r_par R]
   | [g ⊢ fs_par2 F2] ⇒ let [g ⊢ R] = fstep_impl_red [g ⊢ F2] in
                         [g ⊢ r_str par_comm (r_par R) par_comm] 
   | [g ⊢ fs_com1 F1 B1] ⇒
     let [g ⊢ D1] = fs_out_rew [g ⊢ F1] in
     let [g ⊢ D2] = bs_in_rew [g ⊢ B1] in
     let [g ⊢ R] = fs_com1_impl_red [g ⊢ D1] [g ⊢ D2] in [g ⊢ R]
   | [g ⊢ fs_com2 B1 F1] ⇒
     let [g ⊢ D1] = bs_in_rew [g ⊢ B1] in
     let [g ⊢ D2] = fs_out_rew [g ⊢ F1] in
     let [g ⊢ R] = fs_com2_impl_red [g ⊢ D1] [g ⊢ D2] in [g ⊢ R]
   | [g ⊢ fs_res \z.F[..,z]] ⇒
     let [g,z:names ⊢ R[..,z]] = fstep_impl_red [g,z:names ⊢ F[..,z]] in 
     [g ⊢ r_res \z.R[..,z]]
   | [g ⊢ fs_close1 B1 B2] ⇒
     let [g ⊢ D1] = bs_out_rew [g ⊢ B1] in
     let [g ⊢ D2] = bs_in_rew [g ⊢ B2] in
     let [g ⊢ R] = fs_close1_impl_red [g ⊢ D1] [g ⊢ D2] in [g ⊢ R]
   | [g ⊢ fs_close2 B1 B2] ⇒
     let [g ⊢ D1] = bs_in_rew [g ⊢ B1] in
     let [g ⊢ D2] = bs_out_rew [g ⊢ B2] in
     let [g ⊢ R] = fs_close2_impl_red [g ⊢ D1] [g ⊢ D2] in [g ⊢ R]
;