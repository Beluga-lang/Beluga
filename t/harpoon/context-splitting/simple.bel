LF a : type =;

schema ctx = a;

LF nat : type =
  | z : nat
  | s : nat → nat
;

rec length : {g : ctx} → [⊢ nat] =
mlam g ⇒ case [g] of
  | [] ⇒ [⊢ z]
  | [g', x : a] ⇒
        let [⊢ N] = length [g'] in
        [⊢ s N]
;

proof length : {g : ctx} → [⊢ nat] =
/ total 1 /
intros
{ g : ctx
|
; split [g] as
  case empty context:
  {
  |
  ; solve [ |- z]
  }
  case extended by a:
  { x : ctx
  |
  ; ? % by length [x] as N unboxed;
    % solve [ |- s N]
  }
}
;
