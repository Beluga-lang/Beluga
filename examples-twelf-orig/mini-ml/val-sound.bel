%%% Proof of Value Soundness
%%% Author: Frank Pfenning, based on [Michaylov & Pfenning 92]

rec vs : (eval E V)[ ] -> (value V)[ ] =
fn e => case e of

  [ ] ev_z =>  [ ] val_z
| [ ] ev_s D  =>
   let [ ] F =  vs ([ ] D) in
        [ ] val_s F

| [ ] ev_match_z D2 D1  => vs ([ ] D2)
| [ ] ev_match_s D3 D1  => vs ([ ] D3)

| [ ] ev_pair D2 D1     =>
  let [ ] P2 = vs ([ ] D2) in
  let [ ] P1 = vs ([ ] D1) in
   [ ] val_pair P2 P1

| [ ] ev_fst D'         =>
  let [ ] val_pair P2 P1 = vs ([ ] D') in
    [ ] P1
| [ ] ev_snd D'         =>
  let [ ] val_pair P2 P1 = vs ([ ] D') in
    [ ] P2


| [ ] ev_lam            => [ ] val_lam
| [ ] ev_app D3 D2 D1   =>  vs ([ ] D3)

| [ ] ev_letv D2 D1     =>  vs ([ ] D2)
| [ ] ev_letn D2        =>  vs ([ ] D2)

| [ ] (ev_fix D1)       => vs ([ ] D1)

;
