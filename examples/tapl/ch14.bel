%{
   Exceptions carrying values of type int

}%
LF tp: type =
| nat: tp
| arr: tp -> tp -> tp;
--name tp  T.

LF term: type =
| app: term -> term -> term
| lam: tp -> (term ->  term) -> term
| raise : term -> term   % (raise e)
| trywith: term -> (term -> term) -> term
;
--name term M.

LF value:  term -> type =
| v_lam: value (lam T M);
--name value V.

LF error : term -> type =
| er_raise : value V -> error (raise V)
;
--name error E.
% ---------------------------------------------------------- %
% Small-step operational semantics

LF step: term -> term -> type =
| step_app_1    : step E1 E1' → step (app E1 E2) (app E1' E2)
| step_app_2    : step E2 E2' → value E1 → step (app E1 E2) (app E1 E2')

| step_app_beta : value E2 → step (app (lam T E ) E2) (E E2)

| step_app_err1 : value V
		-> step (app (raise V) E2) (raise V)

| step_app_err2 : value V1 -> value V2 ->
		step (app V1 (raise V2)) (raise V2)


| step_raise   :  step E E' -> step (raise E) (raise E')

| step_raise_raise : value V -> step (raise (raise V)) (raise V)

| step_try      : step E1 E1'
	      -> step (trywith E1 E2) (trywith E1' E2)

| step_try_v    : value V
		-> step (trywith V E2) V

| step_try_error: value V -> step (trywith (raise V) E2) (E2 V)
;
--name step S.
% ---------------------------------------------------------- %
LF oft: term -> tp -> type =
| t_lam : ({x:term} oft x T -> oft (E x) S)
	-> oft (lam T E) (arr T S)
| t_app:  oft E1 (arr T S) -> oft E2 T
	-> oft (app E1 E2) S

| t_trywith: oft E1 T -> ({x:term} oft x nat -> oft (E2 x) T)
	   -> oft (trywith E1 E2) T

| t_error : oft E nat -> oft (raise E) T
;


% ---------------------------------------------------------- %
rec tps: [ |- oft M T] -> [ |- step M N] -> [ |- oft N T] =
fn d => fn s => case s of
| [ |- step_app_1 S1] =>
  let [ |- t_app D1 D2] = d in
  let [ |- F1] = tps  [ |- D1] [ |- S1] in
    [ |- t_app F1 D2 ]

| [ |- step_app_2 S2 _ ] =>
  let [ |- t_app D1 D2] = d in
  let [ |- F2] = tps  [ |- D2] [ |- S2] in
    [ |- t_app D1 F2 ]

| [ |- step_app_beta V] =>
  let [ |- t_app (t_lam (\x.\u. D)) D2] = d in
    [ |- D[_,D2]]
| [ |- step_app_err1 _]   =>
  let [ |- t_app (t_error D) _ ] = d in [ |- t_error D ]

| [ |- step_app_err2 _  _] =>
  let [ |- t_app _ (t_error D)] = d in [ |- t_error D]

| [ |- step_raise S] =>
  let [ |- t_error D] = d in
  let [ |- F] = tps [ |- D] [ |- S] in [ |- t_error F]

| [ |- step_raise_raise V] =>
  let [ |- t_error (t_error D)] = d in [ |- t_error D]

| [ |- step_try S1] =>
  let [ |- t_trywith D1 (\x.\y. D2)] = d in
  let [ |- F1] = tps [ |- D1] [ |- S1] in
    [ |- t_trywith F1 (\x.\y. D2)]

| [ |- step_try_v V] =>
  let [ |- t_trywith D1 (\x.\y. D2)] = d in [ |- D1]

| [ |- step_try_error V] =>
    let [ |- t_trywith (t_error D1) (\x.\u.D2)] = d in [ |- D2[_,D1]]

;

% ---------------------------------------------------------- %
% Progress

% Introduce a new type family to distinguish between the case where a term can
% take a step and it is a value.

LF step_or_err/val : term -> type =
| step_to : step E E' -> step_or_err/val E
| val     :  value E  -> step_or_err/val E
| err     :  error E  -> step_or_err/val E;

rec prog : [ |- oft E T] -> [ |- step_or_err/val E] =
/ total d (prog e t d)/
fn d =>
 case d of
  [ |- t_app D1 D2]  =>
(case prog [ |- D1] of
   | [ |- step_to S] => [ |- step_to (step_app_1 S)]
   | [ |- val V] => (case prog [ |- D2] of
                   | [ |- step_to S'] => [ |- step_to (step_app_2 S' V)]
                   | [ |- val V2] =>
                       let [ |- v_lam] = [ |- V] in [ |- step_to (step_app_beta V2)]
                   | [ |- err (er_raise V2)] => [ |- step_to (step_app_err2 V V2)]
                )
   | [ |- err (er_raise V)] => [ |- step_to (step_app_err1 V)]

                     )
| [ |- t_lam (\x. (\d. D1))]  =>  [ |- val v_lam]

| [ |- t_error D ] =>
  (case prog [ |- D ] of
    | [ |- val VL] => [ |- err (er_raise VL)]
    | [ |- err (er_raise VL)] => [ |- step_to (step_raise_raise VL)]
    | [ |- step_to EV] =>  [ |- step_to (step_raise EV)]
  )
| [ |- t_trywith D1 (\x.\u. D2)] =>
  case prog [ |- D1] of
    | [ |- val VL] => [ |- step_to (step_try_v VL)]
    | [ |- err (er_raise VL)] => [ |- step_to (step_try_error VL)]
    | [ |- step_to S] => [ |- step_to (step_try S)]
;
