
%%% Mapping evaluations to evaluations in environments.
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Hannan & Pfenning 92]

% To return a pair: feval K F W * vtrans W V we define the
% following constructor. This avoids not only computation-level pairs
% but also avoids existential types on the computation-level.

fev_vtr: env -> exp' -> exp  -> type.

ev_vtrans: fev_vtr K F V
            <- vtrans W V
	    <- feval K F W.


rec map_eval : (eval E V)[ ] -> (trans K F E)[ ]
 	      -> (fev_vtr K F V) [ ] = 
fn d => fn c => case c of 

   [ ] tr_1 (vtr_lam (tr_lam (\w. \x. \v. (C2 w x v))))  =>
     let [ ] ev_lam = d in 
        [ ] ev_vtrans (fev_1) (vtr_lam (tr_lam (\w. \x. \v. (C2 w x v))))

 | [ ] tr_lam (\w. \x. \u. (C1 w x u)) => 
   let [ ] ev_lam = d in 
        [ ] ev_vtrans (fev_lam) (vtr_lam (tr_lam (\w.\x.\u. (C1 w x u))))

 | [ ] tr_^ C1 => 
     let [ ] ev_vtrans  D1' U1 = (map_eval d) ([ ] C1) in 
        [ ] ev_vtrans   (fev_^ D1') U1

    | [ ] tr_app C2 C1 => 
      let [ ] ev_app D3 D2 D1 = d in 
      let [ ] ev_vtrans D1' (vtr_lam (tr_lam (\w. \x. \v. (C3 w x v)))) = (map_eval ([ ] D1)) ([ ] C1) in 
      let [ ] ev_vtrans D2' U2 = (map_eval ([ ] D2)) ([ ] C2) in 
      let [ ] ev_vtrans D3' U3 = (map_eval ([ ] D3)) ([ ] (C3 _ _ U2)) in 
        [ ] ev_vtrans (fev_app D3' D2' D1') U3 
       
   ;


 