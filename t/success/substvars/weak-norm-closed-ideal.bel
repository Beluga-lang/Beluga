% Sketch of weak normalization for STLC that doesn't go under binders
% This doesn't currently work, but this is what I imagine would be possible
% with some improvements to reconstruction
% Author: Andrew Cave

datatype tp : type =
| i :  tp
| arr: tp -> tp -> tp;
 %name tp T.

datatype tm : tp -> type =
| app : tm (arr T S) -> tm T -> tm S
| lam : (tm T -> tm S) -> tm (arr T S)
| c : tm i;
%name tm E.

schema ctx = tm T;

datatype mstep : tm A -> tm A -> type =
| beta  : mstep (app (lam M) N) (M N)
| stepapp : mstep M M' -> mstep N N' -> mstep (app M N) (app M' N')
| refl : mstep M M
| trans : mstep M M' -> mstep M' M'' -> mstep M M'';
%name mstep S.

datatype val : tm A -> type =
| val/c : val c
| val/lam : val (lam M);
%name val V.

datatype halts : tm A -> type =
halts/m : mstep M M' -> val M' -> halts M;
%name halts H.

datatype Reduce : {A:[ |- tp]} {M:[ |- tm A]} ctype =
| I : [ |- halts M] -> Reduce [ |- i] [ |- M]
| Arr :  [ |- halts M] ->
    ({N:[ |- tm A]} Reduce [ |- A] [ |- N] -> Reduce [ |- B] [ |- app M N])
  -> Reduce [ |- arr A B] [ |- M]
;

rec haltsMstep : [ |- mstep M M'] -> [ |- halts M'] -> [ |- halts M] =
fn s => fn h => let [ |- MS] = s in let [ |- halts/m MS' V] = h in
 [ |- halts/m (trans MS MS') V]

;

% CR1
rec cr1 : Reduce [ |- A] [ |- M] -> [ |- halts M] =
fn r => case r of
| I h => h
| Arr h f => h
;

% CR2
rec closed : [ |- mstep M M'] -> Reduce [ |- A] [ |- M'] -> Reduce [ |- A] [ |- M] =
fn s => fn r => case r of
| I ha => I (haltsMstep s ha)
| Arr ha f =>
    Arr (haltsMstep s ha)
        (mlam N => fn rn =>
         let [ |- MS] = s in closed [ |- stepapp MS refl] (f [ |- N] rn))
;

%  h |- #s : g
datatype RedSub : {g:ctx}{#S:g[]} ctype =
| Nil : RedSub  [ ] [ $ ^ ]
| Dot :     RedSub  [g] [ $ #S[^] ]  % #S : g[]

          -> Reduce [ |- A] [ |- M]              % A:[ |- tp], M:[ |- tm A]
          -> RedSub [g, x:tm A] [ $ #S[^] M ]   %  M : [ |- tm (A ^ [^CtxShift g #S[..] ]
;


rec lookup : {g:ctx}{#p:[g |- tm A]}RedSub [g] [ $ #S[^]] -> Reduce [ |- A] [ |- #p #S[^]] =
mlam g => mlam #p => fn rs => case [g |- #p ..] of
 | [g',x:tm A |-  x] =>   let (Dot rs' rN) = rs in rN
 | [g',x:tm A |-  #q ..] => let Dot rs' rN = rs in
                      lookup [g'] [g' |-  #q ..] rs'

;

rec eval : {g:ctx}{M:[g |- tm A]} RedSub [g] [ $ #S[^]] -> Reduce  [ |- A] [ |- M #S[^]] =
 mlam g => mlam M => fn rs => case [g |- M ..] of
| [g |- #p ..] => lookup [g] [g |- #p ..] rs
| [g |- lam (\x. M1 .. x)] =>
 Arr [ |- halts/m refl val/lam]
   (mlam N => fn rN =>
    closed [ |- beta] (eval [g,x:tm _] [g,x |- M1 .. x] (Dot rs rN)))
 | [g |- app (M1 ..) (M2 ..)] =>
  let Arr ha f = eval [g] [g |- M1 ..] rs in
  f [ |- _ ] (eval [g] [g |- M2 ..] rs)
| [g' |-  c] => I [ |- halts/m refl val/c]

;

rec weakNorm : {M:[ |- tm A]} [ |- halts M] =
mlam M => cr1 (eval [] [ |- M] Nil)
;
