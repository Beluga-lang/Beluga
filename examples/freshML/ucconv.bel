% Untyped closure conversion in beluga. 
%By O. Savary, 260340147

%term is the source language
term: type.
elam:(term -> term) -> term. 
eapp:term -> term -> term.
elet:term -> (term -> term) -> term.


%targer is the target language
target:type.
tunit: target. %used as nil to list with pairs
tfst: target -> target.
tsnd: target -> target.
tpair: target -> target -> target.
tapp: target -> target -> target -> target.
tlam: (target -> target -> target) -> target.
tlet: target -> (target -> target) -> target.


schema ctx = term;
schema tctx = target;


%list of term
fvlist: type.
nil:fvlist.
cons: term -> fvlist -> fvlist.


rec append:{g:ctx}fvlist[g] -> fvlist [g] -> fvlist [g] =
    fn a => fn b => case a of
         [g]nil => b
         |[g]cons (E..) (Ta..) => let [g](B'..) = append ([g]Ta..) b in
                                   [g]cons (E..) (B'..)
;

rec remove:{g:ctx}fvlist[g,x:term] -> fvlist[g] =
fn l => case l of
	 [g,x:term]nil => [g]nil
       |[g,x:term]cons x (L..x) => remove([g,x:term]L..x)
       |[g,x:term]cons (#p..) (L..x) => 
	  let [g] (L'..) = remove ([g,x:term]L..x) in
				  [g]cons (#p..) (L'..)
;

rec extmap:{g:ctx}{h:tctx} (term [g] -> target[h]) -> term[g] ->  (term[g] -> target[h]) = 
fn map => fn e => map
;

%rec b_map:{g:ctx}{h:tctx} (term [g] -> target [h]) -> fvlist[g] ->target [h,x:target] -> (term [g] -> target [h,x:target]) =

%SUBSTITUTION ERROR...
%Apply mapping to the free variable list(similar to built) 
rec b_env:{g:ctx}{h:tctx} (term [g] -> target [h]) -> fvlist[g] -> target[h] =
fn map => fn fvar => case fvar of
                [g]nil => [h]tunit
               |[g]cons (E..) (Ta..) => let [h](E'..) = map ([g]E..) in
                                let [h](Ta'..) = b_env map ([g]Ta..) in
                               [h]tpair (E'..) (Ta'..)

;


rec fvar:{g:ctx} term[g] -> fvlist[g] =
 fn e => case e of
     [g] (#p ..) => [g]cons (#p ..) nil
    |[g] elam (\x.(U..x)) => let [g,x:term](L..x) = fvar ([g,x:term] (U..x)) in
			   let [g](L'..) = remove([g,x:term] L..x) in
                           [g] (L'..)
                           
   |[g] eapp (U..) (V..) => let [g](FVU..) = fvar ([g]U..) in
			 let [g](FVV..) = fvar ([g]V..) in
                          append ([g]FVU..) ([g]FVV..)
   |[g] elet (U..) (\x.(V..x)) => let [g](FVU..) = fvar ([g]U..) in
                               let [g,x:term](FVV..) = fvar ([g,x:term]V..x) in
			       let [g](FVV'..) = remove([g,x:term]FVV..) in
                                  append ([g]FVU..) ([g]FVV'..)
;

%outer conversion
rec convert:{g:ctx}{h:tctx} (term [g] -> target [h]) -> term [g] -> target [h] = 
  fn map => fn e => case e of
         [g]elet (U..) (\x.(V..x)) => let [h](U'..) = convert map ([g]U..) in
				   %let [h,x:target] (M'..) = extmap map x in
				   let [h](V'..) = convert map ([g]V..x) in
                                    [h]tlet (U'..) (\x. V'..x)
       |[g]eapp (U..) (V..) => let [h](U'..) = convert map ([g]U..) in
			    let [h](V'..) = convert map ([g]V..) in
			    let [h](U1'..) = [h]tfst (U'..) in
			    let [h](U2'..) = [h]tsnd (U'..) in
			    [h] tapp (U1'..) (U2'..) (V'..)
       |[g]elam (\x.(U..x)) => %let [h,x:target] (M'..) = extmap map x in
                             let [h,y':target,x':target] U' y x = convert map ([g,x:term]U x) in 
			     let [g](FV..) = fvar e in
			     let [h](T1..) = [h] tabs(\y.\x.(U'..y x)) in
			     let [](T2..) = b_env map ([g]FV..) in
                              [h]tpair (T1..) (T2..)
; 

