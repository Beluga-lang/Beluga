% Given an expression e, return the proof that e is always equal to itself.
%
% If e is an expression, then eq e e.

% Author: Brigitte Pientka
% Comments:
% - use of Sigma-types in context
%
% - in Delphin, this example requires a special function `extend' of
%   type eqParamFun = <f:exp#> -> <eq f f> to keep track of the
%   relationship between an introduced parameter and the fact that
%   every parameter is equal to itself;
%
% - also requires explicit use of "remove parameter x and u" in the
%   definition of `extend' and the use of `extend' in `eqfun'

exp: type.    --name exp E x.
app: exp -> exp -> exp. --infix app 3 right.
lam: (exp -> exp) -> exp.

eq: exp -> exp -> type.   --name eq Q u. --infix eq 1 left.
eq_app : E1 eq F1 -> E2 eq F2 -> (E1 app E2) eq (F1 app F2). --infix eq_app 1.

eq_lam :  ({x : exp} x eq x -> (E x) eq (F x))
          -> (lam (\x. E x)) eq (lam (\x. F x)).


schema eqCtx = block x:exp, _t:x eq x;


rec ref : {g:eqCtx} {U:[g |- exp]} [g |- (U[..]) eq (U[..])] =
 mlam g => mlam U =>
   case [g |- U[..]] of
  | [g |- #p.1[..]] => [g |- #p.2[..]]

  | [g |- lam \x. L] =>
      let
          [g,e:block yyy:exp, _t:yyy eq yyy |-  V] = ref [g, e:block q:exp, _t:q eq q] [g, e |-  L[..,e.1]]
      in
        [g |- eq_lam \x. \w. (V[..,<x ; w>])]  % : eq (L) (L)

   | [g |- (A1[..]) app (A2[..])] : [g |- exp] =>
       let [g |- EQ1[..]] = ref [g] [g |- A1[..] ] in
       let [g |- EQ2[..]] = ref [g] [g |- A2[..] ] in
          [g |- (EQ1[..]) eq_app (EQ2[..])]
;



% General transitivity is admissible
rec trans: {g:eqCtx}
   [g |- (TT[..]) eq (RR[..])]     % e1 : eq T R
-> [g |- (RR[..]) eq (SS[..])]     % e2 : eq R S
-> [g |- (TT[..]) eq (SS[..])]     % result : eq T S
=
  mlam g =>
    fn e1 => fn e2 =>
      case e1 of

|{#p : [g |- block yy:exp, _t:yy eq yy]}
       [g |- #p.2[..]] => e2

| [g |- eq_lam \x.\u. D1] =>
   let [g |- eq_lam \xx.\uu. D2] =  e2  in
   let [g, b:block x:exp, _t:x eq x |-  E[..,b]] =
     trans [g, b:block x':exp, _t:x' eq x']
         [g, b |-  D1[..,b.1,b.2]]
         [g, b |-  D2[..,b.1,b.2]]
    in
      [g |- eq_lam \x. \u. E[..,<x ; u>]]

| [g |- (D1[..]) eq_app (D2[..])] =>
       (case e2 of
         [g |- (F1[..]) eq_app  (F2[..])] =>
         let [g |- E1[..]] = trans [g]  [g |- D1[..]]  [g |- F1[..]]
         in
         let [g |- E2[..]] = trans [g]  [g |- D2[..]]  [g |- F2[..]]
         in
             [g |- (E1[..]) eq_app  (E2[..])]
       )
;



%{
equal: exp -> exp -> type.

e_l: ({x:exp} eq x x -> eq (T x) (T' x)) -> eq (lam (\x. T x)) (lam (\x. T' x)).
e_a: eq T2 S2  -> eq T1 S1 -> eq (app T1 T2) (app S1 S2).
e_r: eq T T.
e_t: eq T' S -> eq T T' -> eq T S.
}%
