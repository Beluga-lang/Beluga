LF tp : type =
| b :  tp
| arr : tp -> tp -> tp
;
--name tp T.

LF tm : tp -> type =
| app : tm (arr T S) -> tm T -> tm S
| lam : (tm T -> tm S) -> tm (arr T S)
| c : tm b
;
--name tm M.

LF step : tm A → tm A → type =
| beta : step (app (lam M) N) (M N)
| stepapp : step M M' -> step (app M N) (app M' N)
;

LF mstep : tm A -> tm A -> type =
| refl : mstep M M
| onestep : step M M' -> mstep M' M'' -> mstep M M''
;
--name mstep S.

LF val : tm A -> type =
| val/c : val c
| val/lam : val (lam M)
;
--name val V.

LF halts : tm A -> type =
| halts/m : mstep M M' -> val M' -> halts M
;
--name halts H.

stratified Reduce : {A:[⊢ tp]}{M:[ |- tm A]} ctype =
| I : [ |- halts M] -> Reduce [ ⊢ b ] [ |- M]
| Arr :  [ |- halts M] ->
         ( {N:[ |- tm A]} Reduce [ ⊢ A] [ |- N] ->
           Reduce [ ⊢ B ] [ |- app M N]
         ) ->
         Reduce [ ⊢ arr A B ] [ |- M]
;

proof rh : {T : ( |- tp)}
             {M : ( |- tm T)} Reduce [ |- T] [ |- M] -> [ |- halts M] =
/ total /
intros
{ T : ( |- tp), M : ( |- tm T)
| x : Reduce [ |- T] [ |- M]
; split x as
  case Arr:
  { A : ( |- tp), B : ( |- tp), M : ( |- tm (arr A B))
  | x : Reduce [ |- arr A B] [ |- M],
    x2 :
      {N : ( |- tm A)} Reduce [ |- A] [ |- N] -> Reduce [ |- B] [ |- app M N],
    x1 : [ |- halts M]
  ; solve x1
  }
  case I:
  { M : ( |- tm b)
  | x : Reduce [ |- b] [ |- M], x1 : [ |- halts M]
  ; solve x1
  }
}
;
