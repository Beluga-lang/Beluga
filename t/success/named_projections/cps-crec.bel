%%% The Mini-ML Language
%%% Author: Frank Pfenning, based on [Michaylov & Pfenning 92]

exp  : type.  --name exp E.
z     : exp.
s     : exp -> exp.
lam   : (exp -> exp) -> exp.
app   : exp -> exp -> exp.


%%% Expressions in Continuation-Passing Style
%%% Author: Frank Pfenning

cexp : type.
cval : type.

z+ : cval.
s+ : cval -> cval.
lam+ : (cval -> (cval -> cexp) -> cexp) -> cval.
app+ : cval -> cval -> (cval -> cexp) -> cexp.

vl+ : cval -> cexp.


%%% Compiling MiniML to CPS-style
%%% Author: Brigitte Pientka
%%% based on [Michaylov & Pfenning 92];
%%% adapted from Twelf implementation
%%% rewriting cps conversion into functional style

schema ctx = block x:exp, x':cval , _t:(cval -> cexp) ;
%

rec cmp : (g:ctx) [g |- exp] -> [g,x:cval |-  cexp] -> [g |- cexp] =
fn e => fn k => let [g,x:cval |-  K] = k in
case e of
| [g |- #p.x[..]] => [g |- ((#p._t[..] ) (#p.x'[..]))]

| [g |- z] => [g |- K[..] z+]

| [g |- s (E[..] )] =>
  cmp [g |- E[..] ] [g,x |- K[..] (s+ x)]

| [g |- lam \x. E] =>
  let [g,b:block (x:exp,x':cval , _t:(cval -> cexp)) |-  E'[..] b.x' b._t] =
      cmp [g,b:block (x:exp,x':cval , _t:(cval -> cexp)) |-  E[..] b.x] [g,b,x1 |-  b._t x1] in
   [g |- K[..] (lam+ (\v.\k. E'[..] v k))]

| [g |- app (E1[..]) (E2[..] )] =>
    let [g,b:block x1:exp,x1':cval , _t:(cval -> cexp) |-  E2'[..] b.x1'] =
        cmp [g,b:block x1:exp,x1':cval ,_t:(cval -> cexp) |-  E1[..] ]
	    [g,b,x2 |-  app+ b.x1' x2 (\v. K[..] v)] in
     cmp [g |- E1[..] ] [g,x1' |-  E2'1' ]

;
