tp : type.
nat : tp.

term : tp -> type.
z    : term nat.
suc  : term nat -> term nat.


schema termCtx = some [t:tp] term t;


rec fff : {g:(termCtx)*} (term nat)[g] -> (term nat)[g] =
FN g => fn e =>
  case e of
  | [g]  z     => [g] z

  | [g]  suc (U ..)   => [g] z

  | [g]  #p ..   => [g] z
;

%not
rec fffForgotParamVarCase : {g:(termCtx)*} (term nat)[g] -> (term nat)[g] =
FN g => fn e =>
  case e of
  | [g]  z     => [g] z

  | [g]  suc (U ..)   => [g] z

%%%  | [g]  #p ..   => [g] z
;
