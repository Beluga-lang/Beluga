term : type.
z    : term.
tt   : term.
ff   : term.
suc  : term -> term.
eq   : term -> term -> term.
if   : term -> term -> term -> term.
letv : term -> (term -> term) -> term.

tp   : type.
nat  : tp.
bool : tp.

oft  : term -> tp -> type.
o_tt : oft tt bool.
o_ff : oft ff bool.
o_z  : oft z nat.
o_s  : oft E nat -> oft (suc E) nat.
o_if : oft E bool -> oft E1 T -> oft E2 T
       -> oft (if E E1 E2) T.

o_let: oft E1 T1 -> ({x:term} oft x T1 -> oft (E2 x) T2)
       -> oft (letv E1 (\x . E2 x)) T2.

cert: term -> type.

certify : cert E 
	   <- oft E T.

schema tpCtx = some [t:tp] block x:term . oft x t;

rec infer : {g:(tpCtx)*} {U::term[g]} (cert (U ..))[g] =
FN g => mlam U =>
 case [g] (U ..) of
   [g] z     => [g] certify o_z

 | [g] tt    => [g] certify o_tt

| [g] (#p.1 ..)  => [g] certify (#p.2 .. )

% | [g] letv (E1 ..) (\x. (E2 .. x)) =>
%   let [g] certify (D1 .. ) = infer [g] <g . (E1 ..)>  in 
%   let [g, b: block x:term . oft x S1] certify (D2 .. b) = 
%           infer [g, b: block x:term . oft x S1] <g, b . (E2 .. b.1) > in 
%       [g] . certify o_l (D1 ..) (\x.\u. (D2 .. (x, u)))

 ;
