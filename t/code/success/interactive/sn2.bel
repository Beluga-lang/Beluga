LF ty : type =
  | base : ty
  | arr  : ty -> ty -> ty
  ;
--name ty A.

LF tm : ty -> type =
  | abs : (tm A -> tm B) -> tm (arr A B)
  | app : tm (arr A B) -> tm A -> tm B
  ;
--name tm M.

schema cxt = tm A; % some [a : ty] block tm a;

LF step : tm A -> tm A -> type =
  | rbeta : step (app (abs M) N) (M N)
  | rabs  : ({x : tm A} step (M x) (M' x)) -> step (abs M) (abs M')
  | rappl : step M M' -> step (app M N) (app M' N)
  | rappr : step N N' -> step (app M N) (app M N')
  ;

% Lemma: If [ρ]M ⇒ M' then M ⇒ N and M' = [ρ]N.

inductive ExStep : (g1 : cxt) (g2 : cxt)
  {M : [g1 |- tm A[]]} {$R : [g2 |-# g1]} {M' : [g2 |- tm A[]]} ctype =
  | Ex : [g1 |- step M N] -> ExStep [g1 |- M] [g2 |- $R] [g2 |- N[$R]]
  ;

inductive SN : (g : cxt) {M : [ g |- tm A[] ]} ctype =
  | Acc : ({M' : [ g |- tm A[] ]} [ g |- step M M' ] -> SN [ g |- M' ])
        -> SN [ g |- M ]
  ;

stratified Red : {A : [ |- ty ]} (g : cxt) {M : [ g |- tm A[] ]} ctype =
  | RBase : SN [g |- M] -> Red [ |- base ] [g |- M]
  | RArr  : ({g' : cxt} {$S : [g' |-# g]} {N : [g' |- tm A[]]}
               Red [|- A] [g' |- N]
            -> Red [|- B] [g' |- app M[$S] N])
         -> Red [ |- arr A B ] [g |- M]
  ;


inductive RedS : {g : cxt} (g' : cxt) {$S : [g' |- g]} ctype =
  | RNil  : RedS [] [ g' |- ^ ]
  | RCons : Red [|- A] [g' |- M]
         -> RedS [g] [g' |- $S]
         -> RedS [g, x : tm A[]] [g' |- $S, M]
  ;
%
%% Abstraction

%% rec fundAbs : Red

rec whExp : Red [|- A] [g |- M [.., N] ]
         -> Red [|- A] [g |- (app (abs \ x. M) N)] =
  ?
  ;

%% Fundamental theorem

rec thm : {g : cxt} {M : [g |- tm A[]]}
          RedS [g] [g' |- $S0]
       -> Red [|- A] [g' |- M[$S0]] =
  mlam g, M => fn s =>
  case [g |- M ] of
%%  | [g |- #p ]         =>  fundVar [g] [g |- #p] s
  | {M : [g, x : tm A[] |- tm B[]]} [g |- abs \ x. M ] =>
      RArr (mlam g', $S, N => fn r => ?)
%%        whExp ?) % (thm [g, x : tm A[]] [g, x : tm A[] |- M] (RCons r (renRedS [g'] [g' |- $S] s))))
%%  | [g |- app M N    ] =>  fundApp (thm [g] [g |- M] s) (thm [g] [g |- N] s)
  ;

%{
Entry S displays B, but should display g as source context for the renaming.

Hole Number 1
File "/home/abel/play/beluga/sn.bel", line 208, characters 38-39
________________________________________________________________________________
    - Meta-Context:
	{g : cxt}
	{A : [ |- ty]}
	{B : [ |- ty]}
	{M : [g, x : tm A |- tm B]}
	{g' : cxt}
	{S : [g' |- #  B]}
	{N : [g' |- tm A]}
_______________________________________
}%
