
nat:type.
z: nat.
s: nat -> nat.


schema ctx = nat;

rec copy : {g:ctx} nat[g] -> nat[g] = 
fn n => case n of 
| [g] #p .. => n
| [g] z => [g] z
| [g] s (N ..) => let [g] M .. = copy ([g] N..) in [g] s (M ..) ; 

rec copy_final : {g:ctx} nat[g] -> nat[g] = 
fn n => case n of 
| [g] N .. =>  let w = copy n in w 
;



rec copy_final' : {g:ctx} nat[g] -> nat[g] = 
fn n => let f = copy in 
case n of 
| [g] N .. =>  let w = f n in w 
;





let x = copy_final ([x:nat] s x);
