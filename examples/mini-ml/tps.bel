% Value soundness
% Author: Brigitte Pientka
%

tp   : type.   --name tp T.
nat  : tp.
arrow  : tp -> tp -> tp.

exp  : type.   --name exp E.
z    : exp.
suc  : exp -> exp.
match: exp -> exp -> (exp -> exp) -> exp.
letv : exp -> (exp -> exp) -> exp.  % let x = e1 in e2
lam  : tp -> (exp -> exp) -> exp.
app  : exp -> exp -> exp.

% Evaluation
eval : exp -> exp -> type.  --name eval F.
ev_z : eval z z.

ev_s : eval E V -> eval (suc E) (suc V).

ev_m_z: eval E1 V → eval E z → eval (match E E1 (\x. E2 x)) V.

ev_m_s: eval (E2 V2) V → eval E (suc V2) → eval (match E E1 (\x. E2 x)) V.

ev_l : eval (E2 V1) V  -> eval E1 V1 -> eval (letv E1 (\x. E2 x)) V.

ev_lam: eval (lam T (\x. E x)) (lam T (\x. E x)).

ev_app: eval E1 (lam T (\x. E x)) -> eval E2 V2 -> eval (E V2) V
     -> eval (app E1 E2) V.


% Typing

oft : exp -> tp -> type.  --name oft D u.

tp_z     : oft z nat.
tp_s     : oft E nat ->
	   oft (suc E) nat.

tp_match : ({x:exp}oft x nat -> oft (E2 x) T) → oft E1 T → oft E nat → oft (match E E1 (\x. E2 x)) T.

tp_lam :   ({x:exp} oft x T1 -> oft (E x) T2)
        -> oft (lam T1 (\x . E x)) (arrow T1 T2).

tp_app : oft E2 T2 ->
         oft E1 (arrow T2 T1)
	 -> oft (app E1 E2) T1.

tp_letv : ({x:exp} oft x T1 -> oft (E2 x) T2) ->
	   oft E1 T1
        -> oft (letv E1 (\ x . E2 x)) T2.

% Type preservation proof
rec tps :  [ |- eval E V] -> [ |- oft E T]
           -> [ |- oft V T]  =
 / total d (tps _ _ _ d _) /
fn f => fn d => case f of
| [ |- ev_z] => d

| [ |- ev_s F1]  =>
  let [ |- tp_s D1] = d in
  let [ |- C1]      = tps [ |- F1] [ |- D1] in
    [ |- tp_s C1]

| [ |- ev_m_z F1 F] =>
  let [ |- tp_match (\x.\u. D2) D1 D] = d   in
  tps [ |- F1] [ |- D1]

| [ |- ev_m_s F2 F] =>
  let [ |- tp_match (\x.\u. D2) D1 D] = d   in
  let [ |- tp_s C]    =   tps [ |- F] [ |- D] in
  tps [ |- F2] [ |- (D2[_,C])]

| [ |- ev_lam] =>  d 

| [ |- ev_app F1 F2 F3] =>
  let [ |- tp_app D2 D1]            = d in
  let [ |- tp_lam \x. \u. D]        = tps [ |- F1] [ |- D1]  in
  let [ |- C2]                      = tps [ |- F2] [ |- D2]  in
  tps [ |- F3] [ |- (D[ _,  C2])]

| [ |- ev_l F2 F1] =>
  let [ |- tp_letv (\x.\u. D2) D1]     = d in
  let [ |- C1]                = tps [ |- F1] [ |- D1] in
    tps [ |- F2] [ |- D2[ _, C1]]
;
