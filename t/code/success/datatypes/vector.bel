LF nat : type =
| z : nat
| suc : nat -> nat
;

inductive Vector : [ |- nat] -> ctype =
| Nil : Vector [ |- z]
| Cons : Bool -> Vector [ |- N] -> Vector [ |- suc N]
;

rec hd : Vector [ |- suc N] -> Bool =
    fn xs => case xs of
      | Cons x xs => x
;

rec tl : Vector [ |- suc N] -> Vector [ |- N] =
    fn xs => case xs of
      | Cons x xs => xs
;

let t0 = (Cons ttrue (Nil));
let t1 = hd t0;
let t2 = tl t0;
