LF exp  : type =
  | z    : exp
  | suc  : exp -> exp
  | letv : exp -> (exp -> exp) -> exp
  | lam  : (exp -> exp) -> exp
  | app  : exp -> exp -> exp
;

--name exp E x.

LF tp   : type =
  | nat  : tp
  | even : tp
  | odd : tp
  | arrow  : tp -> tp -> tp
  | sect   : tp -> tp -> tp
;
   --name tp T.


% Evaluation
LF eval : exp -> exp -> type =
  | ev_z : eval z z
  | ev_s : eval E V -> eval (suc E) (suc V)
  | ev_l : eval (E2 V1) V  -> eval E1 V1 -> eval (letv E1 (\x. E2 x)) V
  | ev_lam: eval (lam (\x. E x)) (lam (\x. E x))
  | ev_app: eval E1 (lam (\x. E x)) -> eval E2 V2 -> eval (E V2) V -> eval (app E1 E2) V
;
  --name eval F.
% Typing

LF boolean : type =
  | true : boolean
  | false : boolean
;

LF  subtype : tp -> tp -> type =
  | sub_odd_nat :  subtype odd nat
  | sub_even_nat : subtype even nat
  | sub_arrow : subtype B1 A1 -> subtype A2 B2 -> subtype (arrow A1 A2) (arrow B1 B2)
;
--name subtype SUB sub.

LF oft : exp -> tp -> type =
  | tp_z     : oft z even
  | tp_s-base     : oft E nat -> oft (suc E) nat
  | tp_s-even : oft E even -> oft (suc E) odd
  | tp_s-odd : oft E odd -> oft (suc E) even
  | tp_sub : oft E T1 -> subtype T1 T2 -> oft E T2
  | tp_lam : ({x:exp} oft x T1 -> oft (E x) T2) -> oft (lam (\ x . E x)) (arrow T1 T2)
  | tp_app : oft E2 T2 -> oft E1 (arrow T2 T1) -> oft (app E1 E2) T1
  | tp_letv : ({x:exp} oft x T1 -> oft (E2 x) T2) -> oft E1 T1 -> oft (letv E1 (\ x . E2 x)) T2
;
--name oft D u.

LF oft-option : type =
  | sometype : oft E T -> oft-option
  | none : oft-option
;

schema expCtx = exp ;

rec synth : {g:expCtx} {E : [g |- exp]} [ |- oft-option] =
  mlam g => mlam E =>
     [ |- none]
and rec check : {g:expCtx} {E : [g |- exp]} {T : [ |- tp]} [ |- boolean] =
  mlam g => mlam E => mlam T =>
    [ |- false]
;

let r1 = (check []) ;
let r2 = (check []) [ |- suc (suc z)];
let r3 = (check []) [ |- suc (suc z)] [ |- even];
let r4 = r2 [ |- even];
let r5 = r1 [ |- suc (suc z)] [ |- even];
