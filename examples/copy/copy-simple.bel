LF term :  type =
  | z    : term
  | suc  : term -> term
  | app  : term -> term -> term
  | lam  : (term -> term) -> term
;

schema termCtx = some [] term;

% Doesn't cover, and not used below.  Commented out  -jd 2010-05-23
%
% rec copy' : term [ ] -> term [ ] =
%  fn t =>  case t of [ ] lam (\x . x) => t
% ;

rec copy : {g:termCtx} [g |- term] -> [g |- term] =
/ total e (copy g e) /
mlam g => fn e =>
 (case e of
  | [g |- z]     => [g |- z]
  | [g |- suc U] => let [g |- V] = copy [g] [g |- U] in [g |- suc (V )]
  | [g |- (#p)] => [g |- (#p)]

  | [g |- lam (\ x. ( U))] =>

    let [g,x : term |-  V] = copy [g, x:term]  [g,x |- U]  in

      [g |- lam (\x. V)]

  | [g |- app U V]  =>

    let [g |- (U')]  = copy [g] [g |- U] in
    let [g |- (V')]  = copy [g] [g |- V] in

       [g |- app (U') (V')]

);


let t = copy [ ] [ |- z] ;
let t = copy [x:term] [x:term |-  x];
let t = copy [x:term] [x:term |-  suc x];
let t = copy [ ] [ |- lam \x. x];
let t = copy [ ] [ |- lam \x. (lam \y. app x y)];
let t = copy [y:term] [y:term |-  app y (lam \x. (lam \y. app x y))];
let t = copy [y:term,x:term] [x:term,y:term |-  suc x];
