nat: type.
z : nat.
s : nat -> nat.

tp : type.
un : tp.

schema w = block x:nat, _t:nat;
schema tps = tp;

rec qqqq : [x:block (y:nat, _t:nat) |- nat] -> [x:block (y:nat, _t:nat) |- nat] =
fn eNat => case eNat of --not
  [x:block (y:nat, _t:nat) |- x.1] => [x:block (y:nat, _t:nat) |- x.2]
;
