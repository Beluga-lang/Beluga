exp : type.
z : exp.

pred : exp -> type.
yep : {N:exp} pred N.

schema ctx = exp;

rec foo : (g:ctx) [ g |- pred (M[]) ] -> [ |- exp ] =
fn p => case p of
| [g |- yep z] => [ |- z ];

rec bar : {g:ctx} {N : [ g |- exp ]} [ |- exp ] =
 mlam g => mlam N => foo [ g |- yep (N[..]) ];


% let v = bar [x:exp] [x:exp |- x];

% foo [x:exp] [ |- x[NegCtxShift(1) ]
