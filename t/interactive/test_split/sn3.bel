% Strong normalization for simply-typed lambda-calculus in Beluga

LF ty : type =
  | base : ty
  | arr  : ty -> ty -> ty
  ;
--name ty A.

LF tm : ty -> type =
  | abs : (tm A -> tm B) -> tm (arr A B)
  | app : tm (arr A B) -> tm A -> tm B
  ;
--name tm M.

LF step : tm A -> tm A -> type =
  | rbeta : step (app (abs M) N) (M N)
  | rabs  : ({x : tm A} step (M x) (M' x)) -> step (abs M) (abs M')
  | rappl : step M M' -> step (app M N) (app M' N)
  | rappr : step N N' -> step (app M N) (app M N')
  ;

schema cxt = tm A; % some [a : ty] block tm a;

inductive SN : (g : cxt) {M : [ g |- tm A ]} ctype =
  | Acc : ({M' : [ g |- tm A ]} [ g |- step M M' ] -> SN [ g |- M' ])
        -> SN [ g |- M ]
  ;

stratified Red : {A : [ |- ty ]} (g : cxt) {M : [ g |- tm A[] ]} ctype =
  | RBase : SN [g |- M] -> Red [ |- base ] [g |- M]
  | RArr  : ({g' : cxt} {$S : [g' |-# g]} {N : [g' |- tm A[]]}
               Red [|- A] [g' |- N]
            -> Red [|- B] [g' |- app M[$S] N])
         -> Red [ |- arr A B ] [g |- M]
  ;

% Corollary: closure under weak head expansion

rec whExp : Red [|- A] [g |- M [.., N] ]
         -> Red [|- A] [g |- (app (abs \ x. M) N)] =
  ?
  ;

inductive RedS : {g : cxt} (g' : cxt) {$S : [g' |- g]} ctype =
  | RNil  : RedS [] [ g' |- ^ ]
  | RCons : Red [|- A] [g' |- M]
         -> RedS [g] [g' |- $S]
         -> RedS [g, x : tm A[]] [g' |- $S, M]
  ;

%% Lemmata for fundamental theorem

%% Variable case

rec fundVar : {g : cxt} {#p : [g |- tm A[]]}
          RedS [g] [g' |- $S]
       -> Red [|- A] [g' |- #p[$S]] =
  / total g (fundVar g) /
  mlam g, #p => fn s => case [g] of
    | [] => impossible [ |- #p ]
    | [g, x : tm A[]] => case [g, x : tm _ |- #p] of
      | [g, x : tm A[] |- x     ] => let RCons r s' = s in r
      | [g, x : tm A[] |- #q[..]] => let RCons r s' = s in fundVar [g] [g |- #q] s'
  ;

%% Application

rec fundApp : %% {g : cxt} {M : [g |- tm (arr A[] B[])]} {N : [g |- tm A}
          Red [|- arr A B ] [g |- M ]
       -> Red [|- A]        [g |- N ]
       -> Red [|- B]        [g |- app M N ] =
  fn r, s => let s : Red [|- B] [g |- N] = s in   %% fake match to bind g and N
    let RArr f = r in
    f [g] [ g |- .. ] [g |- N] s
  ;

%% Abstraction

%% rec fundAbs : Red

%% Fundamental theorem

rec thm : {g : cxt} {M : [g |- tm A[]]}
          RedS [g] [g' |- $S0]
       -> Red [|- A] [g' |- M[$S0]] =
  mlam g, M => fn s =>
  case [g |- M ] of
  | [g |- #p ]         =>  fundVar [g] [g |- #p] s
  | [g |- abs \ x. M ] =>  RArr (mlam g', $S, N => fn r => whExp (thm [g, x : tm _] [g, x : tm _ |- M] ?))
  | [g |- app M N    ] =>  fundApp (thm [g] [g |- M] s) (thm [g] [g |- N] s)
  ;

%{
Uncaught exception.
Please report this as a bug.

## Type Reconstruction: /home/abel/play/beluga/sn.bel ##
Unify.Make(T).GlobalCnstrFailure(_, "abs (\\x. M[ $S0[$S[..]], x]) =/= abs (\\x. M[ $S0[$S[..]], x])")

@andreasabel
andreasabel commented 7 days ago

Maybe connected to #38?
@pientka

Attach files by dragging & dropping,

, or pasting from the clipboard.
Styling with Markdown is supported
}%

%:load input.bel
The file input.bel has been successfully loaded;
%:countholes
2;
%:split 0 g
 case [g] of
| [g, x1 : tm A] => ?
| [] => ?
;
%:split 0 N

case [g |- N] of
| [g |- #p2] => ?
| [g |- abs (\x1. M6)] => ?
| [g |- app M4 M5] => ?
;
%:split 1 M

case [g, x26 |- M] of
| [g, z26 |- #p3[ ..]] => ?
| [g, y27 |- y27] => ?

| [g, x27 |- abs (\x1. M9)] => ?
| [g, z27 |- app M7 M8] => ?
;
%:split 1 g
 case [g] of
| [g, x4 : tm A] => ?
| [] => ?
;
