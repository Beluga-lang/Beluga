%% NBE -- verified
%% With implicit arguments made explicit in the definition of Slam

atomic_tp : type.
tp : type.                --name tp T.
atomic : atomic_tp -> tp.
arr: tp -> tp -> tp.

tm : tp -> type.          --name tm E.
app : tm (arr T S) -> tm T -> tm S.
lam : (tm T -> tm S) -> tm (arr T S).

schema tctx = tm T;

neut : tp -> type.       --name neut R.
norm : tp -> type.       --name norm M.
nlam : (neut T -> norm S) -> norm (arr T S).
rapp : neut (arr T S) -> norm T -> neut S.
embed : neut (atomic P) -> norm (atomic P).

schema ctx = neut T;

nat : type.

stratified Sem : {g:ctx} [ |- tp] -> ctype    = 
| Syn :  [g |- neut (atomic P[])] -> Sem [g] [ |- atomic P]
| Slam : {g:ctx}{A:[ |- tp]} {B: [ |- tp]}
      ({h:ctx}{$R : [h |- g]} Sem [h] [ |- A] -> Sem [h] [ |- B])
      -> Sem [g] [ |- arr A B]
;



inductive TmVar : {g:tctx} [ |- tp] -> ctype  =
| TmVar : {#p:[g |- tm T[]]} TmVar [g] [ |- T]
;

rec weaken : (g:ctx)(h:ctx) {$R : [h |- g]}  Sem [g] [ |- A] -> Sem [h] [ |- A] =
/ total x (weaken g h a e x) /
mlam $R => fn x => case x of
| Syn [g |- N] => Syn [_ |- N[$R]]
| Slam [g] [ |- A] [ |- B] f => Slam [_] [ |- A] [ |- B] (mlam h' => mlam $S => fn x => f [h'] [h' |- $R[$S]] x)
;


rec extend : (g:tctx)(h:ctx)
  ({T:[ |- tp]} TmVar [g] [ |- T] -> Sem [h] [ |- T]) -> Sem [h] [ |- S]
-> ({T:[ |- tp]} TmVar [g, x:tm S[]] [ |- T] ->  Sem [h] [ |- T]) =
/ total x (extend g h s e t x) /
fn s => fn e => mlam T => fn x => case x of
| TmVar [g,x:tm S[] |-  x] => e
| TmVar [g,x:tm S[] |-  #q[..] ] => s [ |- T ] (TmVar [g |- #q])
;


rec eval : (g:tctx)(h:ctx)
           [g |- tm S[]] ->
           ({T:[ |- tp]} TmVar [g] [ |- T] -> Sem [h] [ |- T])
           -> Sem [h] [ |- S]  =
/ total t (eval g h s t _) / 
fn t => fn s =>
case t of
| [g |- #p ]            : [g |- tm S[]] =>  s [ |- S] (TmVar [g |- #p ])
| [g |- lam (\x. E) ] : [g |- tm (arr A[] B[])] =>
  Slam [_] [ |- A] [ |- B]  (mlam h' => mlam $S => fn e =>
         eval [g,x:tm A[] |-  E]
              (extend (mlam T => fn x => weaken [h' |- $S] (s [ |- T] x))  e))

| [g |- app E1 E2 ] =>
  let (Slam [h] [ |- A] [ |- B] f ) =  eval [g |- E1] s in
    f [h] [h |- ..] (eval [g |- E2] s)
;


rec reflect : {g:ctx} {A:[|- tp]}[g |- neut A[]] ->  Sem [g] [ |- A] = 
 / total a (reflect g a) /
mlam g, A => fn r => 
case [ |- A] of
| [ |- atomic P ] => Syn r
| [ |- arr T1 T2 ] =>  
  let  [g |- R ] = r in 
  Slam [g] [ |- T1] [ |- T2]  (mlam h => mlam $S => fn e =>
          let [h |- N ] = reify [h] [ |- T1] e in
            reflect [h] [ |- T2 ] [h |- rapp R[$S] N])
        
and rec reify : {g : ctx} {A : [ |- tp]}Sem [g] [ |- A] -> [g |- norm A[]] = 
 / total a (reify g a) /
mlam g, A => fn e => case [ |- A] of
| [ |- atomic P ] =>  (case e of Syn [g |- R] => [g |- embed R])
| [ |- arr T S ] =>
  (case e of
   | (Slam [g] [ |- T] [ |- S] f)  =>
     let s = (f [g,x:neut T[] ] [g,x:neut T[] |- ..] (reflect [g ,x:neut T[]] [ |- T] [g ,x:neut T[] |-  x])) in
     let [g,x:neut T[] |-  E] = reify [g ,x:neut T[]] [ |- S] s
     in [g |- nlam (\x. E)])

;


rec initialMap :  {T:[ |- tp]} TmVar [ ] [ |- T] -> Sem [ ] [ |- T] =
/ total (initialMap) /
mlam T => fn y => let TmVar [ |- #p] = y in impossible [ |- #p]; % in [ ];

rec nbe : [ |- tm A] -> [ |- norm A] =
/ total (nbe) /
fn t => reify   [] [ |- _ ] (eval t initialMap)
;


