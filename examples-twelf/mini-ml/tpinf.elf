%%% The Mini-ML typing rules which can be used as a complete
%%% implementation of type inference.
%%% Author: Frank Pfenning, based on [Michaylov & Pfenning 92]

oft : exp -> tp -> type.  %name oft P u.
%mode oft +E *T.

% Natural Numbers
tp_z     : oft z nat.
tp_s     : oft (s E) nat
	    <- oft E nat.
tp_match  : oft (match E1 E2 E3) T
	    <- oft E1 nat
	    <- oft E2 T
	    <- ({x:exp} oft x nat -> oft (E3 x) T).

% Pairs
tp_pair : oft (pair E1 E2) (cross T1 T2)
	   <- oft E1 T1
	   <- oft E2 T2.
tp_fst  : oft (fst E) T1
	   <- oft E (cross T1 T2).
tp_snd  : oft (snd E) T2
	   <- oft E (cross T1 T2).

% Functions
tp_lam : oft (lam E) (arrow T1 T2)
	  <- ({x:exp} oft x T1 -> oft (E x) T2).
tp_app : oft (app E1 E2) T1
	  <- oft E1 (arrow T2 T1)
	  <- oft E2 T2.

% Definitions
tp_letv : oft (letv E1 E2) T2
	   <- oft E1 T1
	   <- ({x:exp} oft x T1 -> oft (E2 x) T2).
tp_letn : oft (letn E1 E2) T2
	   <- oft E1 T1
	   <- oft (E2 E1) T2.

% Recursion
tp_fix : oft (fix E) T
	  <- ({x:exp} oft x T -> oft (E x) T).

%{
%block l : some {T:tp} block {x:exp} {d:oft x T}.
%worlds (l) (oft E T).
}%