nat : type.
z : nat.
s : nat -> nat.

list : nat -> type.
nil : list z.
cons : nat -> list N -> list (s N).

expl : type.
mkExpl : list N -> expl.

schema ly = some [n:nat] block l:list n, _t:nat;
rec listg3 : {g:ly} {L:[g |- list z]} [ |- nat] =
  mlam g => mlam L => case [g |- L[..]] of
      [g |- #p.1[..]]  => [ |- z]
    | [g |- nil]  => [ |- z]
;

schema lists-notblock = some [n:nat] list n;
rec listg3 : {g:lists-notblock} {L:[g |- list z]} [ |- nat] =
   mlam g => mlam L => case [g |- L[..]] of
      [g |- #p[..]]  => [ |- z]
    | [g |- nil]  => [ |- z]
;
