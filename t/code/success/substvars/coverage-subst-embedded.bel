nm : type.
leaf : nm.
nmbin : nm -> nm -> nm.
tp : type.         --name tp T.
tp/nm :  tp.
tp/unit : tp.

tm : type.          --name tm E.
unit : tm.
name : nm -> tm.
bin : tm -> tm -> tm.

step : tm -> tm -> type.  --name step S.
step/bin : step M1' M1 -> step M2' M2 -> step (bin M1' M2') (bin M1 M2).
% step/bin1 : step M1' M1 -> step (bin M1' M2) (bin M1 M2).
% step/bin2 : step M2' M2 -> step (bin M1 M2') (bin M1 M2).

oft : tm -> tp -> type.
oft/bin : oft M1 tp/nm -> oft M2 tp/nm -> oft (bin M1 M2) tp/nm. % need???


mstep : tm -> tm -> type.  --name mstep S.
refl : mstep M M.
trans1 : mstep M M' -> step M' M''  -> mstep M M''.

schema ctx = some [t:tp] block x:tm,y:oft x t;

rec thm : {g:ctx}{h:ctx}{$S1: [h |- g]}  [g |- mstep M M'] -> [h |- mstep M[$S1] M'[$S1]] =
/ total e (thm g h s m m' e) /
mlam g, h, $S => fn  e => case e of
| [g0 |- trans1 E1 E2] =>
   let [h0 |- E'] = thm [g0] [h] [h |- $S] [g0 |- E1] in ?

| [g |- refl] => ?

;
