tp: type.
arrow: tp -> tp -> tp.

term : tp -> type.
lam  : {T:tp} {T':tp} (term T -> term T') -> term (arrow T T').

% schema W = some [T:tp] block term T;

% rec copy : {g:(W)*} {T::tp[]} (term T[.])[g] -> (term T[.])[g] =
%     FN g => mlam T => fn e =>
%         (case e of
%             {T'::tp[]} {p::(term T'[.])[g]}
%             box(g . p[id(g)]) : (term T'[.])[g] => box(g . p[id(g)])

%           | {T1::tp[]} {T2::tp[]} {U::(term T2[.])[g, x : (term T1[.])]}
%             box(g . lam T1[.] T2[.] (\x. U[id(g), x])) : (term (arrow T1[.] T2[.]))[g] => 
%             (case copy [g, x:(term T1[.])] <. T2[.]> box(g,x . U[id(g), x]) of
%                 {T1'::tp[]} {T2'::tp[]} {V::(term T2'[.])[g, x : (term T1'[.])]}
%                 box(g,x . V[id(g), x]) : (term T2'[.])[g,x:(term T1'[.])] =>
%                 box(g . lam T1'[.] T2'[.]  (\x. V[id(g) , x]))));
