nat : type.     %name nat N x.
z : nat.
s : nat -> nat.


rec plus : nat [ ] -> nat [ ] -> nat [ ] = 
fn x => fn y =>  
  case x of 
     [ ] z  => y 
  |  [ ] s U  =>  
     let 
       [ ] V = plus ([ ] U ) y 
     in 
        	 [ ] s V 
     ;


 rec plus' : nat [ ] -> nat [ ] -> nat [ ] = 
   fn x => 
     case x of [ ] z  => (fn y => y)
             | [ ] s U => 
 	    fn y => 
 	      (case	(plus' ([ ] U) y) of 
  	         [ ] V  => [ ] s V);


