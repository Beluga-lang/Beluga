%%% The Mini-ML Language
%%% Author: Frank Pfenning, based on [Michaylov & Pfenning 92]

LF exp  : type =
  | z     : exp
  | s     : exp -> exp
  | lam   : (exp -> exp) -> exp
  | app   : exp -> exp -> exp
;
 --name exp E.

%%% Expressions in Continuation-Passing Style
%%% Author: Frank Pfenning

LF cexp : type =
  | app+ : cval -> cval -> (cval -> cexp) -> cexp
  | vl+ : cval -> cexp

and cval : type =
  | z+ : cval
  | s+ : cval -> cval
  | lam+ : (cval -> (cval -> cexp) -> cexp) -> cval
;

%%% Compiling MiniML to CPS-style
%%% Author: Brigitte Pientka
%%% based on [Michaylov & Pfenning 92];
%%% adapted from Twelf implementation
%%% rewriting cps conversion into functional style

schema ctx = block x:exp, x':cval , _t:(cval -> cexp) + cval ;
%

rec cmp : {g:ctx} [g |- exp] -> [g,x:cval |-  cexp] -> [g |- cexp] =
/ total e (cmp g e k) /
mlam g => fn e => fn k => let [g,x:cval |-  K] = k in
case e of
| [g |- #p.1] => [g |- ((#p.3 ) (#p.2))]

| [g |- z] => [g |- K[..,z+]]

| [g |- s (E )] =>
  cmp [g] [g |- E ] [g,x |- K[..,(s+ x)]]

| [g |- lam \x. E] =>
  let [g,b:block x:exp,x':cval , _t:(cval -> cexp) |-  E'[..,b.2,b.3]] =
      cmp [g,b:block x:exp,x':cval , _t:(cval -> cexp)]
         [g,b |- E[..,b.1]] [g,b,x1 |-  b.3 x1] in
   [g |- K[..,(lam+ (\v.\k. E'))]]

| [g |- app E1 (E2 )] =>
    let [g,x:cval |-  E2'] =
        cmp [g, x:cval]
            [g, x |- E1[..] ] [g,x1,x2 |-  app+ x1 x2 (\v. K[..,v])] in
     cmp [g] [g |- E1 ] [g,x1' |-  E2']

;
