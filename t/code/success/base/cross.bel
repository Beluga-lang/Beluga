exp : type.

z    : exp.
s    : exp -> exp.
pair : exp -> exp -> exp.

lam  : (exp -> exp) -> exp.
app  : exp -> exp -> exp.


tp : type.  --name tp T.

nat   : tp.                             % Natural Numbers
cross : tp -> tp -> tp.                 % Pairs
arrow : tp -> tp -> tp.                 % Functions


rec testPairs : [ |- exp] -> [ |- exp] * [ |- tp ] =
fn e => ([ |- z] , [ |- nat])
;

rec testPairs2 : [ |- exp] -> [ |- exp] * [ |- tp] =
 fn e => case e of
   [ |- z] => ( e , [ |- nat] )

 | [ |- s U] =>
   let ( x, y ) = testPairs2 [ |- U] in
   let [ |- nat] = y in
   let [ |- V]   = x in
     ([ |- s V] , [ |- nat ])

 ;


rec testPairs3: [ |- exp] * [ |- exp]  -> [ |- tp] * [ |- tp] =
fn p =>  let ( e1, e2 ) = p in
   case e1  of  [ |- z]   => ([ |- nat] , [ |- nat ])
              | [ |- s U] =>
                  testPairs3  ([ |- U] , e2 )
 ;
