% The following is a list of `;;`-terminated syntactically valid LF types
% with respect to the disambiguation state `disambiguation_state.json`.
% The file `lf_types_ok.output.json` of serialized ASTs corresponding to those
% types is automatically generated during development, but not during
% continuous integration.

nat -> nat
;;

nat -> nat -> nat
;;

(nat -> nat) -> nat
;;

nat <- nat <- nat
;;

nat <- nat <- nat <- nat
;;

sum (s z) (s (s z)) (s (s (s z)))
;;

a -> b -> c
;;

(a -> b) -> c
;;

a <- b <- c
;;

a <- (b <- c)
;;

(a <- b) -> c
;;

a <- (b -> c)
;;

a -> (b <- c)
;;

a <- (b -> c)
;;

nat <- (nat -> nat)
;;

nat <- (nat <- nat)
;;

nat -> (nat <- nat) -> nat
;;

{ x : nat } sum x x x
;;

{ x : nat } { y : nat } sum x y y
;;

{ x : nat } { y : nat } { z : nat } sum x y z
;;

(term T -> term T') -> term (T arrow T')
;;

term (T arrow T') -> term T -> term T'
;;

(term T -> term T') -> term ((arrow) T T')
;;

(term T -> term T') -> term (((arrow)) T T')
;;

(term T -> term T') -> term ((((arrow))) T T')
;;

term \x. T x
;;

term ((arrow) T T') -> term T -> term T'
;;

E1 eq F1 -> E2 eq F2 -> (app E1 E2) eq (app F1 F2)
;;

(eq) E1 F1 -> (eq) E2 F2 -> (eq) ((app) E1 E2) ((app) F1 F2)
;;

{ _ : exp } _ eq _
;;

({x : exp} x eq x -> (E x) eq (F x)) ->
    (lam (\x. E x)) eq (lam (\x. F x))
;;

({x : exp} (eq) x x -> (eq) (E x) (F x)) ->
    (eq) (lam (\x. E x)) (lam (\x. F x))
;;

({x : exp} (eq) x x -> (eq) (E x) (F x)) ->
    (eq) (lam (\x. (E) x)) (lam (\x. (F) x))
;;

(Statics.term T -> Statics.term T') -> Statics.term (T Statics.arrow T')
;;

(Statics.term T -> Statics.term T') -> Statics.term ((Statics.arrow) T T')
;;
