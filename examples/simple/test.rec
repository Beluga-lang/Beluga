nat : type.
bool: type.

tt: bool.

z : nat.
s : nat -> nat.
add: nat -> nat -> nat.
foo: nat -> bool -> nat.
zoo: (nat -> nat) -> nat.

schema natCtx = some [] block (nat);

rec identity : {g:(natCtx)*} nat [g] -> nat [g] =
FN g => 
 fn x =>
  (case x of
     (g . z)                =>  (g . z)
  |  (g . add U[.]  V[.])   =>  (g . add U[.] V[.])
  |  (g . foo U[..] V[..])  =>  (g . z)
  |  (g . zoo (\x. U[.., x])) => (g . U[.., (s z)])
);


