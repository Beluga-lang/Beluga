% Sketch of weak normalization for STLC that goes under binders
% Author: Andrew Cave

tp : type.                %name tp T.
i :  tp.
arr: tp -> tp -> tp.

tm : tp -> type.          %name tm E.
app : tm (arr T S) -> tm T -> tm S.
lam : (tm T -> tm S) -> tm (arr T S).

schema ctx = tm T;

mstep : tm A -> tm A -> type.  %name mstep S.
beta : mstep (app (lam M) N) (M N).
eta : {M:tm (arr A B)} mstep M (lam (\x. app M x)).
stepapp : mstep M M' -> mstep N N' -> mstep (app M N) (app M' N').
refl : mstep M M.
trans : mstep M M' -> mstep M' M'' -> mstep M M''.

datatype IsValue : {g:ctx} {A:[g.tp]} {M:[g.tm (A ..)]} ctype =
| Var : {#p:[g.tm (A ..)]} IsValue [g] [g. A ..] [g. #p ..]
| Lam : IsValue [g] [g.arr (A ..) (B ..)] [g. lam (\x. M .. x)]
;

datatype Halts : {g:ctx}{A:[g.tp]} {M:[g. tm (A ..)]} ctype =
| Halts : [g. mstep (M ..) (V ..)] -> IsValue [g] [g. A ..] [g. V .. ] ->
          Halts [g] [g. A ..] [g. M ..]
;

datatype Reduce : {g:ctx}{A:[g.tp]} {M:[g.tm (A ..)]} ctype =
| Base : Halts [g] [g.i] [g. M .. ] -> Reduce [g] [g. i] [g. M ..]
| Arr :  {g:ctx}{A:[g.tp]}{B:[g.tp]}{M:[g.tm (arr (A ..) (B ..))]}
         Halts [g] [g. arr (A ..) (B ..)] [g. M ..] ->
         ({N:[g.tm (A ..)]}
          Reduce [g] [g . A ..] [g. N ..] -> Reduce [g] [g. B ..] [g . app (M ..) (N ..)])
           -> Reduce [g] [g. arr (A ..) (B ..)] [g. M ..]
;

% TODO: Can we rewrite our definitions slightly so we don't need these? (Use Pis instead of ->s?)
rec mstepTrans : (g:ctx){M:[g.tm A]} [g. mstep (M ..) (M' ..)] -> [g. mstep (M' ..) (M'' ..)] -> [g. mstep (M ..) (M'' ..)] =
mlam M => fn s => fn s' => let [g. S ..] = s in let [g. S' ..] = s' in [g. trans (S ..) (S' ..)]
;

rec mstepAppL : (g:ctx){M1:[g.tm (arr A B)]} [g. mstep (M1 ..) (M2 ..)] -> [g. mstep (app (M1 ..) (N ..)) (app (M2 ..) (N ..))] =
mlam M => fn s => let [g. S ..] = s in [g. stepapp (S ..) refl]
;

rec haltsMstep : (g:ctx) [g. mstep (M ..) (M' ..)] -> Halts [g] [g. A ..] [g. M' ..] -> Halts [g] [g. A ..] [g. M ..] =
fn ms => fn h => let (h : Halts [g] [g. A ..] [g. M' ..]) = h in
let Halts ms' v = h in Halts (mstepTrans [g. _] ms ms') v
;

% CR2
rec closed : Reduce [g] [g.A ..] [g. M' ..] -> [g. mstep (M ..) (M' ..)] -> Reduce [g] [g.A ..] [g. M ..] =
fn r => fn s => let (r : Reduce [g] [g.A ..] [g. M' ..]) = r in  case r of
| Base ha => Base (haltsMstep s ha)
| Arr [g] [g. A ..] [g. B ..] [g. M ..] ha f => Arr [g] [g. A ..] [g. B ..] [g. _]
  (haltsMstep s ha)
  (mlam N => fn rn => closed (f [g. N ..] rn) (mstepAppL [g. _] s))
;

% CR1
rec reify : Reduce [g] [g. A ..] [g. M ..] -> Halts [g] [g.A ..] [g. M ..] =
fn r => let r : Reduce [g] [g. A ..] [g. M ..] = r in case r of
| Base h => h
| Arr [g] [g. A ..] [g. B ..] [g. M ..] ha f => ha
;

datatype RedSub : {g:ctx}{h:ctx}{#S:g[h]} ctype =
| Nil : {h:ctx} RedSub [] [h] <h $ ^ >
| Dot : {g:ctx}{h:ctx}{A:[g. tp]}{#S:g[h]}{M:[h.tm (A #S[..])]}
        RedSub [g] [h] <h $ #S[..] > -> Reduce [h] [h. A #S[..] ] [h. M ..]
         -> RedSub [g,x:tm (A ..)] [h] <h $ #S[..] (M ..) >
% The above should work, I think...
;

rec redVar : {g:ctx}{h:ctx}{#S:g[h]}{#p:[g.tm (T ..)]} RedSub [g] [h] <h $ #S[..]>
              ->  Reduce [h] [h. T #S[..]] [h. #p #S[..] ] =
mlam g => mlam h => mlam #S => mlam #p => fn rs =>
case [g. #p ..] of
% | {A:[g'. tp]} [g',x:tm (A ..). x] => ?
 | [g',x:tm (A ..). #q ..] => ?
% The above should work, I think...
;

rec eval : {g:ctx}{h:ctx}{A:[g.tp]}{M:[g.tm (A ..)]}{#S:g[h]} RedSub [g] [h] <h $ #S[..] >
 -> Reduce [h] [h. A #S[..]] [h. M #S[..] ] =
mlam g => mlam h => mlam A => mlam M => mlam #S => fn rs => case [g. M ..] of
%| {T:[g'.tp]}{#p:[g'. tm (T ..)]}
%  [g'. #p ..] => redVar [g'] [h] [h $ #S[..] ] [g'. #p ..] rs
% The above should work, I think...
| {T2:[g'.tp]}{T:[g'.tp]}{M1:[g', y:tm (T2 ..). tm (T ..)]}
  [g'. lam (\x. M1 .. x)] =>
  Arr [h] [h. T2 #S[..]] [h. T #S[..]] [h. lam (\x. M1 #S[..] x)]
    (Halts [h. refl] Lam)
    (mlam N => fn rN => closed
      (eval [g',x:tm (T2 ..)] [h] [g',x. T ..] [g',x. M1 .. x] [h $ #S[..] (N ..)]
            (Dot [g',x:tm (T2 ..)] [h] [g',x:tm (T2 ..) . T ..]  [h $  #S[..] (N ..)]
                 [g',x. M1 .. x] rs rN))
             % Need to use Dot here
      [h. beta])
%{ | {T:[g'.tp]}{T2:[g'.tp]}{M1:[g'. tm (arr (T2 ..) (T ..))]}{M2:[g'. tm (T2 ..)]}
  [g'. app (M1 ..) (M2 ..)] =>
  let rM2 : Reduce [h] [h. A' ..] [h. N2 ..] = eval [g'] [h] [g'. T2 ..] [g'. M2 ..] [h $ #S[..] ] rs in
  let Arr [h0] [h0. S2 ..] [h0. S1 ..] [h0. N1 ..] ha f =
       eval [g'] [h] [g'. arr (T2 ..) (T ..)] [g'. M1 ..] [h $ #S[..] ] rs in
  f [h. N2 ..] rM2
}%
;


rec weakNorm2 : {A:[.tp]}{M:[. tm A]} Halts [] [. A] [. M] =
mlam A => mlam M =>
reify (eval [] [] [. A] [. M] [ $ ^ ] (Nil []))
;

%rec weakNorm : {g:ctx}{A:[g.tp]}{M:[g. tm (A ..)]} Halts [g] [g. A ..] [g. M ..] =
%mlam g => mlam A => mlam M =>
%reify (eval [g] [g] [g. A ..] [g. M ..] [g $ ..] ?)
% For this I need a lemma which says that RedSub holds of the identity substitution
%;
