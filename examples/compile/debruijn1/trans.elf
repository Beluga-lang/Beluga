%%% Translation to representation using de Bruijn indices
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Hannan & Pfenning 92]

LF trans  : env -> exp' -> exp -> type = % name trans C.
%%%  Functions
  | tr_lam : ({w:val} {x:exp} vtrans w x -> trans (cons K w) F (E x)) -> trans K (lam' F) (lam (\x. E x))
  | tr_app : trans K F2 E2 -> trans K F1 E1 -> trans K (app' F1 F2) (app E1 E2)

% Variables
  | tr_1  : vtrans W E -> trans (cons K W) one E
  | tr_^  : trans K F E -> trans (cons K W) (shift F) E


and vtrans : val -> exp -> type =         % name vtrans U.
% Values
  | vtr_lam : trans K (lam' F) (lam (\x. E x)) -> vtrans (clo K (lam' F)) (lam (\x. E x))
;
