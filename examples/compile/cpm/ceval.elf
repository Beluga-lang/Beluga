%%% Computations of Continuation Machine
%%% Author: Frank Pfenning

%%% Single Step Transitions
LF step : state -> state -> type =
% Natural Numbers
  | st_z : step (st K  (ev z)) (st K  (return z_val))
  | st_s : step (st K (ev (s E))) (st (c K (\x. return (s_val x))) (ev E))

  | st_match : step (st K (ev (match E1 E2 (\x. E3 x)))) (st (c K  (\x1. match1 x1 E2 (\x. E3 x))) (ev E1))
  | st_match1_z : step (st K  (match1 z_val E2 (\x. E3 x))) (st K  (ev E2))
  | st_match1_s : step (st K (match1 (s_val V1') E2 (\x. E3 x))) (st K (ev (E3 V1')))

% Pairs
  | st_pair : step (st K (ev (pair E1 E2))) (st (c K  (\x1. pair1 x1 E2)) (ev E1))
  | st_pair1 : step (st K (pair1 V1 E2)) (st (c K  (\x2. return (pair_val V1 x2))) (ev E2))
  | st_fst   : step (st K (ev (fst E))) (st (c K  (\x. fst1 x))  (ev E))
  | st_fst1  : step (st K  (fst1 (pair_val V1 V2))) (st K (return V1))
  | st_snd   : step (st K (ev (snd E))) (st (c K  (\x. snd1 x)) (ev E))
  | st_snd1 : step (st K (snd1 (pair_val V1 V2))) (st K (return V2))

% Functions
  | st_lam : step (st K (ev (lam (\x. E x)))) (st K (return (lam_val (\x. E x))))
  | st_app : step (st K (ev (app E1 E2))) (st (c K  (\x1. app1 x1 E2)) (ev E1))
  | st_app1 : step (st K  (app1 V1 E2)) (st (c K (\x2. app2 V1 x2)) (ev E2))
  | st_app2 : step (st K (app2 (lam_val (\x. E1' x)) V2)) (st K (ev (E1' V2)))

% Definitions
  | st_letv : step (st K  (ev (letv E1 (\x. E2 x)))) (st (c K  (\x1. ev (E2 x1))) (ev E1))
  | st_letn : step (st K (ev (letn E1 (\x. E2 x)))) (st K  (ev (E2 E1)))

% Recursion
  | st_fix : step (st K (ev (fix (\x. E x)))) (st K (ev (E (fix (\x. E x)))))

% Values
  | st_vl : step (st K (ev (vl V))) (st K  (return V))

% Return Instructions
  | st_return : {C: val -> inst}{K:cont} step (st (c K (\v. C v)) (return V)) (st K  (C V))
  | st_init   : step (st init (return V))  (answer V)
;
--name step T.

%%% Multi-Step Computation
LF mstep : state -> state -> type =
  | stop : mstep S S
  | next : mstep S'  S'' -> step S  S' -> mstep S S''
;
--name mstep Q.

% Because of evaluation order, computation sequences are displayed
% in reverse, using "next" as a left-associative infix operator.

%%% Full Evaluation
LF ceval : exp -> val -> type =
  | cev : mstep (st init (ev E))  (answer V) -> ceval E V
;
--name ceval C.
