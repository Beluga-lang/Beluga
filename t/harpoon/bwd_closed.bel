LF tp : type =
  | unit : tp
  | arr : tp -> tp -> tp
;
--name tp T.

LF tm : tp -> type =
  | lam : (tm T -> tm S) -> tm (arr T S)
  | app : tm (arr T S) -> tm T -> tm S
;
--name tm M.

LF step : tm T → tm T → type =
  | s_app : step M M' -> step (app M N) (app M' N)
  | s_beta : step (app (lam M) N) (M N)
;

LF steps : tm T -> tm T -> type =
| next : step M M' -> steps M' M'' -> steps M M''
| refl : steps M M
;
--name steps S.

LF val : tm T -> type = v_lam : val (lam M);
--name val V.

LF halts : tm T -> type = halts/m : steps M M' -> val M' -> halts M;
--name halts H.

stratified Reduce : {T :(|- tp)} [|- tm T] -> ctype =
  | Unit : [|- halts M] -> Reduce [|- unit] [|- M]
  | Arr : [|- halts M] -> ({N : (|- tm T1)} Reduce [|- T1] [|- N] -> Reduce [|- T2] [|- app M N]) -> Reduce [|- arr T1 T2] [|- M];
