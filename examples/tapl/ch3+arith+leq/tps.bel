%{
  CH :  Type for arithmetic expressions
  Author: Brigitte Pientka

}%

% Types
tp : type.
bool : tp.
nat  : tp.


% Typing judgement
oft: term -> tp -> type.

t_true   : oft true  bool.
t_false  : oft false bool.
t_switch : oft M bool -> oft M1 T -> oft M2 T
           -> oft (switch M M1 M2) T.

t_zero   : oft z nat.
t_succ   : oft N nat
           -> oft (succ N) nat.
t_pred   : oft N nat
           -> oft (pred N) nat.
t_iszero : oft N nat
	   -> oft (iszero N) bool.

t_leq    : oft N nat -> oft M nat
	   -> oft (leq N M) bool.


%{

 Type preservation

}%

rec tps : [ |- step M N] -> [ |- oft M T] -> [ |- oft N T] =
/ total s (tps m n t s)/
fn s => fn d => case s of
| [ |- e_switch_true] =>
  let [ |- t_switch D D1 D2] = d in [ |- D1]
| [ |- e_switch_false] =>
  let [ |- t_switch D D1 D2] = d in [ |- D2]
| [ |- e_switch S] =>
  let [ |- t_switch D D1 D2] = d in
  let [ |- D'] = tps [ |- S] [ |- D] in
    [ |- t_switch D' D1 D2]

| [ |- e_succ S] =>
  let [ |- t_succ D] = d in
  let [ |- D']  = tps [ |- S] [ |- D] in
    [ |- t_succ D']

| [ |- e_pred S] =>
  let [ |- t_pred D] = d in
  let [ |- D']  = tps [ |- S] [ |- D] in
    [ |- t_pred D']
| [ |- e_pred_zero] =>
  let [ |- t_pred D] = d in [ |- t_zero]
| [ |- e_pred_succ _] =>
  let [ |- t_pred (t_succ D)] = d in [ |- D]

| [ |- e_iszero S] =>
  let [ |- t_iszero D] = d in
  let [ |- D']  = tps [ |- S] [ |- D] in
    [ |- t_iszero D']
| [ |- e_iszero_zero] =>
  let [ |- t_iszero D] = d in [ |- t_true]
| [ |- e_iszero_succ _]  =>
  let [ |- t_iszero _] = d in [ |- t_false]

| [ |- e_leq_1 S] =>
  let [ |- t_leq D1 D2] = d in
  let [ |- D1'] = tps [ |- S] [ |- D1] in
    [ |- t_leq D1' D2]
| [ |- e_leq_2 _ S] =>
  let [ |- t_leq D1 D2] = d in
  let [ |- D2'] = tps [ |- S] [ |- D2] in
    [ |- t_leq D1 D2']
| [ |- e_leq_zero _] =>
  let [ |- t_leq D1 D2] = d in [ |- t_true]
| [ |- e_leq_succ_zero _] =>
  let [ |- t_leq D1 D2] = d in [ |- t_false]
| [ |- e_leq_succ_succ _ _] =>
  let [ |- t_leq (t_succ D1) (t_succ D2)] = d in [ |- t_leq D1 D2]


;
