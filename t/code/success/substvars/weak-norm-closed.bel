--nostrengthen
% Proof of weak normalization for STLC that doesn't go under binders
% Author: Andrew Cave

tp : type.                --name tp T.
i :  tp.
arr: tp -> tp -> tp.

tm : tp -> type.          --name tm E.
app : tm (arr T S) -> tm T -> tm S.
lam : (tm T -> tm S) -> tm (arr T S).
c : tm i.

schema ctx = tm T;

mstep : tm A -> tm A -> type.  --name mstep S.
beta : mstep (app (lam M) N) (M N).
eta : {M:tm (arr A B)} mstep M (lam (\x. app M x)).
stepapp : mstep M M' -> mstep N N' -> mstep (app M N) (app M' N').
refl : mstep M M.
trans : mstep M M' -> mstep M' M'' -> mstep M M''.

inductive IsValue : {g:ctx} {A:[g |- tp]} {M:[g |- tm A[..]]} ctype =
| C : IsValue [g] [g |- i] [g |- c]
| Lam : IsValue [g] [g |- arr A[..] B[..]] [g |- lam (\x. M)]
;

inductive Halts : {g:ctx}{A:[g |- tp]} {M:[g |- tm A[..]]} ctype =
| Halts/c : {S:[g |- mstep M[..] V[..]]} IsValue [g] [g |- A[..]] [g |- V[..]] ->
          Halts [g] [g |- A[..]] [g |- M[..]]
;

stratified Reduce : {g:ctx}{A:[g |- tp]} {M:[g |- tm A[..]]} ctype =
| Base : Halts [g] [g |- i] [g |- M[..]] -> Reduce [g] [g |- i] [g |- M[..]]
| Arr :  {g:ctx}{A:[g |- tp]}{B:[g |- tp]}{M:[g |- tm (arr A[..] B[..])]}
         Halts [g] [g |- arr A[..] B[..]] [g |- M[..]] ->
         ({N:[g |- tm A[..]]}
          Reduce [g] [g |- A[..]] [g |- N[..]] -> Reduce [g] [g |- B[..]] [g |- app M[..] N[..]])
           -> Reduce [g] [g |- arr A[..] B[..]] [g |- M[..]]
;

rec haltsMstep : (g:ctx) {S:[g |- mstep M[..] M'[..]]} Halts [g] [g |- A[..]] [g |- M'[..]] -> Halts [g] [g |- A[..]] [g |- M[..]] =
mlam MS => fn h => let (h : Halts [g] [g |- A[..]] [g |- M'[..]]) = h in
let Halts/c [g |- MS'[..]] v = h in Halts/c [g |- trans MS[..] MS'[..]] v
;

% CR2
rec closed : Reduce [g] [g |- A[..]] [g |- M'[..]] -> {S:[g |- mstep M[..] M'[..]]} Reduce [g] [g |- A[..]] [g |- M[..]] =
fn r => mlam S => let (r : Reduce [g] [g |- A[..]] [g |- M'[..]]) = r in  case r of
| Base ha => Base (haltsMstep [g |- S[..]] ha)
| Arr [g] [g |- A[..]] [g |- B[..]] [g |- M[..]] ha f => Arr [g] [g |- A[..]] [g |- B[..]] [g |- _]
  (haltsMstep [g |- S[..]] ha)
  (mlam N => fn rn => closed (f [g |- N[..]] rn) [g |- stepapp S[..] refl])

;

% CR1
rec reify : Reduce [g] [g |- A[..]] [g |- M[..]] -> Halts [g] [g |- A[..]] [g |- M[..]] =
fn r => let r : Reduce [g] [g |- A[..]] [g |- M[..]] = r in case r of
| Base h => h
| Arr [g] [g |- A[..]] [g |- B[..]] [g |- M[..]] ha f => ha
;

%  h |- #s : g
inductive RedSub : {g:ctx}{h:ctx}{$S:$[h |- g]} ctype =
| Nil : {h:ctx} RedSub [] [h] $[h |- ^]
| Dot : {g:ctx}{h:ctx}{A:[g |- tp]}{$S:$[h |- g]}{M:[h |- tm A[$S]]}
        RedSub [g] [h] $[h |- $S[..]] -> Reduce [h] [h |- A[$S]] [h |- M[..]]
         -> RedSub [g, x:tm A[..]] [h] $[h |- $S[..], M[..]]
;
