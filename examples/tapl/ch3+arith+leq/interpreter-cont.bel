%{

  Implementation of interpreter using continuations

}%

rec small_step_cont : [ |- term] -> ([ |- term] -> [ |- optInterim]) -> [ |- optInterim] =
% / total t (small_step_cont t)/
fn t => fn cont => case t of
| [ |- succ M] =>
   small_step_cont [ |- M ] (fn m' => let [ |- M'] = m' in cont [ |- succ M'])

| [ |- pred M] =>
  (case isvalue [ |- M] of
    | [ |- yes] => (case [ |- M] of
		   | [ |- z] => cont [ |- z]
		   | [ |- succ V] => cont [ |- V]
		 )
    | [ |- no] => small_step_cont [ |- M] (fn m' => let [ |- M'] = m' in cont [ |- pred M'])
  )

| [ |- iszero M] =>
  (case isvalue [ |- M] of
     | [ |- yes] => (case [ |- M] of
		     | [ |- z]      => cont [ |- true]
		     | [ |- succ V] => cont [ |- false]
		     | [ |- _]      => [ |- no_interim]
		  )
     | [ |- no]  => small_step_cont [ |- M] (fn m' => let [ |- M'] = m' in cont [ |- (iszero M')])
  )

| [ |- switch M M1 M2]      =>
  (case isvalue [ |- M] of
     | [ |- yes] => (case [ |- M ] of
		     | [ |- true]  => cont [ |- M1]
		     | [ |- false] => cont [ |- M2]
		     | [ |- V]     => [ |- no_interim])
     | [ |- no] =>  small_step_cont [ |- M] (fn m' => let [ |- M'] = m' in cont [ |- (switch M' M1 M2)])
  )

| [ |- leq M N] =>
  (case isvalue [ |- M] of
     | [ |- yes] => (case isvalue [ |- N] of
		     | [ |- yes] =>  (case [ |- M] of
				      | [ |- z] => cont [ |- true]
				      | [ |- (succ V)] => (case [ |- N] of
							   | [ |- z]      => cont [ |- false]
							   | [ |- succ W] => cont [ |- (leq V W)]
							   | [ |- _]      => [ |- no_interim])

				      | [ |- _]        => [ |- no_interim]
				   )
		     | [ |- no] =>  small_step_cont [ |- N] (fn n' => let [ |- N'] = n' in cont [ |- leq M N'])
		  )
     | [ |- no] =>  small_step_cont [ |- M] (fn m' => let [ |- M'] = m' in cont [ |- (leq M' N)])
  )

;


rec mstep' : [ |- term] -> [ |- optVal] =
% / total m (mstep' m)/
fn m => case isvalue m of
| [ |- yes] => let [ |- M] = m in [ |- val M]
| [ |- no]  => (case small_step_cont m (fn m => let [ |- M] = m in [ |- interim M] )of
		| [ |- no_interim] => [ |- no_val]
		| [ |- interim M'] => mstep' [ |- M']
	     )
;

let v4   =  [ |- switch (iszero (pred (succ z))) (switch false z (succ z)) (switch true z (succ z))];

let r1' = mstep' v1 ; % Result will be : [ ] succ z
let r2' = mstep' v2 ; % Result will be : [ ] true
let r3' = mstep' v3 ; % Result will be : [ ] no_val
