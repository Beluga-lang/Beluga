%%% Completeness of Evaluation under Continuations
%%% Author: Brigitte Pientka (Adapted from the Twelf implementation)
%
%  The natural informal proof relies on the lemma
%    If   D :: eval E V
%    then for any K
%         C :: K # (ev E) =>* K # (return V).
%
% Proof: by induction on the structure of D.
%
% The formalization of this proof requires appending partial computation
% sequences, which is possible, although somewhat tedious.
%
% Below we give a simpler implementation in which the partial computations
% are accumulated incrementally.
%
%
%  Main Lemma
%    If   D :: eval E V
%    and  C' :: K # (return V) =>* (answer W)
%    then C :: K # (ev E) =>* (answer W).
%
% Proof: by induction on the structure of D.  C' is the "accumulator"
% argument for the resulting computation.
%

rec ccp : [ |- eval E V]
       -> [ |- mstep (st K (return V)) (answer W)]
       -> [ |- mstep (st K (ev E)) (answer W)] =
/ total d (ccp e v k w d s) /
fn d => fn s => case d of
  | [ |- ev_z] => let [ |- S'] = s in [ |- next S' st_z]

  | [ |- ev_s D1] =>
        let [ |- S']  = s in
        let [ |- S1]  = ccp [ |- D1] [ |- next S' (st_return (\v. return (s_val v)) _)] in
        [ |- next S1 st_s]


  | [ |- ev_match_z D2 D1] : [ |- (eval (match E E1 (\y. E2)) V)] =>
        let [ |- S2]  = ccp [ |- D2] s in
        let [ |- S1]  = ccp [ |- D1] [ |- next (next S2 st_match1_z) (st_return (\v. match1 v E1[] (\y. (E2[y]))) _ )] in
        [ |- next S1 st_match]

 | [ |- ev_match_s D3 D1] : [ |- (eval (match E E1 (\y. E2)) V)] =>
       let [ |- S3]  = ccp [ |- D3] s in
       let [ |- S1]  = ccp [ |- D1]
                           [ |- next (next S3 st_match1_s) (st_return (\v. match1 v E1[] (\y. (E2[y]))) _)] in
       [ |- next S1 st_match]

 | [ |- ev_pair D2 D1] : [ |- (eval (pair E1 E2) (pair_val V1 V2))]  =>
       let [ |- S'] = s in
       let [ |- S2] = ccp [ |- D2] [ |- next S' (st_return  (\x. return (pair_val V1[] x))  _)] in
       let [ |- S1] = ccp [ |- D1] [ |- next (next S2 st_pair1) (st_return  (\x. pair1 x E2[]) _)] in
       [ |- next S1 st_pair]

 | [ |- ev_fst D1] =>
       let [ |- S'] = s in
       let [ |- S1] = ccp [ |- D1] [ |- next (next S' st_fst1) (st_return (\v. fst1 v)  _)] in
       [ |- next S1 st_fst]

 | [ |- ev_snd D1] =>
   (let [ |- S'] = s in
    let [ |- S1] = ccp [ |- D1] [ |- next (next S' st_snd1) (st_return (\v. snd1 v) _)] in
       [ |- next S1 st_snd])

 | [ |- ev_lam]    => let [ |- S'] = s in [ |- next S' st_lam]

 | {D1: [ |- eval E1 (lam_val (\x. E'))]}
   {D2: [ |- eval E2 V2]}{D3: [ |- eval E'[V2] V] }
   [ |- ev_app D3 D2 D1] : [ |- (eval (app E1 E2) V)] =>
   let [ |- S3] = ccp [ |- D3] s in
   let [ |- S2] = ccp [ |- D2] [ |- next (next S3 st_app2) (st_return  (\v. app2 (lam_val (\x. E'[x])) v)  _)]  in
   let [ |- S1] = ccp [ |- D1] [ |- next (next S2 st_app1) (st_return (\x1. app1 x1 E2[])  _)]  in
     [ |- next S1 st_app]

 | [ |- ev_letv D2 D1] : [ |- (eval (letv E1 (\x. E2)) V)] =>
     let [ |- S2] = ccp [ |- D2] s in
     let [ |- S1] = ccp [ |- D1] [ |- next S2 (st_return  (\x1. ev (E2[x1]))  _)] in
       [ |- next S1 st_letv]


 | [ |- ev_letn D1] : [ |- (eval (letn E1 (\x. E2)) V)] =>
     let [ |- S1] = ccp [ |- D1] s in
       [ |- next S1 st_letn]


 | [ |- ev_fix D] : [ |- (eval (fix (\x. E)) V)] =>
     let [ |- S] = ccp [ |- D] s in
       [ |- next S st_fix]


 | [ |- ev_vl] => let [ |- S'] = s in [ |- next S' st_vl]


;




% %{ Completeness Theorem:
%    If   D :: eval E V
%    then CE :: ceval E V.
%
% Proof: By Main Lemma.
% }%


rec ceval_complete : [ |- eval E V] -> [ |- ceval E V] =
/ total d (ceval_complete e v d) /
fn d =>
  let [ |- D] : [ |- eval E V] = d in
  let [ |- C] = ccp [ |- D]  [ |- next stop st_init] in
    [ |- cev C]

;
