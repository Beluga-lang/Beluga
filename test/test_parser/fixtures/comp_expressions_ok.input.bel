% The following is a list of `;;`-terminated syntactically valid
% computation-level expressions with respect to the disambiguation state
% `disambiguation_state.json`. The file `comp_expressions_ok.output.json` of
% serialized ASTs corresponding to those types is automatically generated
% during development, but not during continuous integration.

x
;;

fn x => x
;;

fn x1, x2, x3 => x1
;;

fn x1 x2 x3 => x1
;;

(x1, x2, x3)
;;

impossible x
;;

(fn x1 x2 x3 => x1) x1 x2 x3
;;

fn x1 =>
  case x1 of
  | [g |- z] => x1
  | [g |- s x1] => [g |- s x1]
;;

case x1 of
| [g, z : nat |- z] => [ |- z]
;;

case l of
| x1 cons x2 cons xs => ?
| x cons xs => ?
| nil => ?
;;

case x of --not x => x
;;

x .hd
;;

x .tl
;;

x .tl .hd
;;

x .tl .tl .hd
;;

x .Stream.hd
;;

x .Stream.tl .Stream.tl
;;

(x) .Stream.tl
;;

Util.Nat.fib .tl .hd
;;

fun
| x .tl .hd => ?
;;

fun
| { $S : $[g, x : nat |- h] }
  { g1 : ctx1 }
  x1 .Stream.tl (x2 cons nil) x3 .Stream.hd [g2] => ?
;;

fun
| $[g |- $S] => ?
| { g : ctx1 } $[g |- $S] => ?
| { $S : $[g |- h] } $[g |- $S] => ?
| { g : ctx1 } { h : ctx2 } { $S : $[g |- h] } $[g |- $S] => ?
;;

mlam g => [g]
;;

mlam g =>
  case x of
  | [g |- _] => x
  | _ => [ |- g]
;;
