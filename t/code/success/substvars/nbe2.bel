tp : type.                --name tp T.
b : tp.
arr: tp -> tp -> tp.

tm : tp -> type.          --name tm E.
app : tm (arr T S) -> tm T -> tm S.
lam : (tm T -> tm S) -> tm (arr T S).

schema tctx = tm T;

neut : tp -> type.       --name neut R.
norm : tp -> type.       --name norm M.
nlam : (neut T -> norm S) -> norm (arr T S).
rapp : neut (arr T S) -> norm T -> neut S.
embed : neut b -> norm b.

schema ctx = neut T;

stratified Sem : {g:ctx} [ |- tp] -> ctype =
| Base :  [g |- norm b] -> Sem [g] [ |- b]
| Arr : {g:ctx}({h:ctx}{$W: [h |- g]} Sem [h] [ |- A] -> Sem [h] [ |- B])
           -> Sem [g] [ |- arr A B]
;

rec sem_wkn : {h:ctx} {$W: [h |- g]} Sem [g] [ |- A] -> Sem [h] [ |- A] =
mlam h => mlam $W => fn e =>
case e of
| Base [g |- R[..]] => Base [h |- R[$W[..]]]
| Arr [g] f =>
  Arr [h] (mlam h' => mlam $W2 => f [h'] [h' |- $W[$W2[..]]])
;

typedef Env : {g:tctx} {h:ctx} ctype = ({T:[ |- tp]} {#p:[g |- tm T[] ]} Sem [h] [ |- T]);

rec env_ext : Env [g] [h] -> Sem [h] [ |- S] -> Env [g,x:tm S[]] [h] =
fn s => let s : Env [g] [h] = s in fn e => mlam T => mlam #p => case [g,x:tm _ |-  #p[..]] of
| [g,x:tm S |-  x] => e
| [g,x:tm S |-  #q[..] ] => s [ |- T ] [g |- #q[..]]
;

rec env_wkn : {h':ctx}{h:ctx}{$W:[h' |- h]} Env [g] [h] -> Env [g] [h'] =
mlam h' => mlam h => mlam $W => fn s => let s : Env [g] [h] = s in mlam T => mlam #p =>
sem_wkn [h'] [h' |- $W[..]] (s [ |- T] [g |- #p[..]])
;

rec eval : [g |- tm S[]] -> Env [g] [h] -> Sem [h] [ |- S]  =
fn t => fn s => let s : Env [g] [h] = s in
case t of
| [g |- #p[..] ] =>  s [ |- _] [g |- #p[..] ]
| [g |- lam (\x. E) ] =>
  Arr [h] (mlam h' => mlam $W => fn e =>
     eval [g,x:tm _ |- E] (env_ext (env_wkn [h'] [h] [h' |- $W[..]] s) e))
| [g |- app (E1[..]) (E2[..]) ] =>
  let Arr [h] f = eval [g |- E1[..]] s in
   f [h] [h |- ..] (eval [g |- E2[..]] s)
;

rec reflect : [g |- neut A[]] ->  Sem [g] [ |- A] =
fn r => let [g |- R[..] ] : [g |- neut A[]] = r in
case [ |- A] of
| [ |- b ] => Base [g |- embed (R[..])]
| [ |- arr T S ] =>  Arr [g] (body [g |- R[..]])

and
rec body : (g:ctx) {R:[g |- neut (arr T[] S[])]}{h:ctx}{$W : [h |- g]} Sem [h] [ |- T] -> Sem [h] [ |- S] =
mlam R => mlam h => mlam $W => fn e =>
let [h |- N[..]] = reify e in reflect [h |- rapp (R[$W[..]]) (N[..])]

and
rec reify : Sem [g] [ |- A] -> [g |- norm A[]] =
fn e => case e of
| Base [g |- R[..]] => [g |- R[..]]
| Arr [g] f =>
     let s = (f [g,x:neut _] [g,x |- ..] (reflect [g,x:neut _ |-  x])) in
     let [g,x:neut _ |-  E] = reify s
     in [g |- nlam (\x. E)]
;

rec emp_env : Env [] [] =
mlam T => mlam #p => impossible [ |- #p];

rec nbe : [ |- tm A] -> [ |- norm A] =
fn t => reify (eval t emp_env);
