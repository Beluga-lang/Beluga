% Progress and preservation for System F with natural numbers.

tp : type.
tm : type.

% Types
nat : tp.
arr : tp -> tp -> tp.  % infix left 5 =>.
forall : (tp -> tp) -> tp.

% Terms
z : tm.
s : tm -> tm.
app : tm -> tm -> tm.  % infix left 5 @.
lam : tp -> (tm -> tm) -> tm.
lAM : (tp -> tm) -> tm.
ann : tm -> tp -> tm.  % infix left 5 #.

% Typing
has : tm -> tp -> type. % infix left 5 is.

is_z   :
       % ----------
         has z nat.

is_s   : has E nat ->
         % -----------
         has (s E) nat.

is_@   : has E1 (arr T1 T2) ->
         has E2 T1 ->
       % -------------------
         has (app E1 E2)  T2.

is_lam : ({x:tm} has x T1 -> has (E x) T2) ->
       % -----------------------------------
         has (lam T1 (\x. E x)) (arr T1 T2).

is_lAM : ({a:tp} has (E a) (T a)) ->
       % -----------------------------------
         (has (lAM (\a. E a))  (forall (\a. T a))).

is_#   : has E  (forall (\a. T1 a)) ->
       % ----------------------------
         (has (ann E T2) (T1 T2)).

% Values
value : tm -> type.

value_z : value z.

value_s : value V ->
        % -----------
          value (s V).

value_lam : value (lam T (\x. E x)).

value_lAM : value (lAM (\a. E a)).

% Operational semantics

~> : tm -> tm -> type. % infix left 5 ~>.

~>_s : ~> E E' ->
     % ---------------
       ~> (s E) (s E').

~>_@1 : (~>  E1 E1') ->
      % --------------------------
        (~>  (app E1 E2) (app E1' E2)).

~>_@2 : value E1 ->
        (~>  E2 E2') ->
      % --------------------------
        (~>  (app E1 E2) (app E1 E2')).

~>_@3 : value E2 ->
      % --------------------------
        (~>  (app (lam T (\x. E1 x)) E2)  (E1 E2)).

~>_#1 : (~>  E E') ->
      % --------------------------
        (~> (ann E T)  (ann E' T)).

~>_#2 :
      % --------------------------
        ~> (ann (lAM (\a. E a)) T)  (E T).

% Preservation
pres : (has E T) -> (~>  E E') -> (has E' T) -> type.
% mode pres +D1 +EV -D2.

pres_s : pres D EV D' ->
       % ----------------------------------
         pres (is_s D) (~>_s EV) (is_s D').

pres_@1 : pres D1 EV1 D1' ->
        % ----------------------------------------
          pres (is_@ D1 D2) (~>_@1 EV1) (is_@ D1' D2).

pres_@2 : pres D2 EV2 D2' ->
        % --------------------------------------------
          pres (is_@ D1 D2) (~>_@2 V EV2) (is_@ D1 D2').

pres_@3 :
        % -----------------------------------------------------------------------
          pres (is_@ (is_lam (\x.\d. D1 x d)) D2) (~>_@3 V) (D1 _ D2).

pres_#1 : pres D EV D' ->
        % -----------------------------------
          pres (is_# D) (~>_#1 EV) (is_# D').

pres_#2 :
        % ----------------------------------------------------------------

%	   {X1:tp -> tm} {T:tp} {X2:tp -> tp}
          {D:{x:tp} has (X1 x) (X2 x)}
          pres (is_# (is_lAM (\a. D a)) ) (~>_#2) (D T).

% worlds () (pres D1 E D2).
% total E (pres _ E _).

% Progress (much trickier)

% Introduce a new type family to distinguish between the case where a term can
% take a step and it is a value.
step_or_val : tm -> type.

step : (~> E E') -> step_or_val E.
val : (value E) -> step_or_val E.


prog_@_lemma :  (has E1 (arr T1 T2)) -> step_or_val E1 -> step_or_val E2 ->
                step_or_val (app E1 E2) -> type.
% mode prog_@_lemma +D +SV1 +SV2 -SV3.

prog_@_lemma_s  : prog_@_lemma _ (step EV) _ (step (~>_@1 EV)).
prog_@_lemma_vs : prog_@_lemma _ (val VL) (step EV) (step (~>_@2 VL EV)).
prog_@_lemma_vs : prog_@_lemma _ (val VL1) (val VL2) (step (~>_@3 VL2)).

% worlds () (prog_@_lemma D SV1 SV2 SV3).
% total {SV1 SV2} (prog_@_lemma _ SV1 SV2 _).


prog_#_lemma :  {T2:tp} (has E  (forall (\a. T1 a))) -> step_or_val E ->
                step_or_val (ann E T2) -> type.
% mode prog_#_lemma +T2 +D +SV1 -SV2.

prog_#_lemma_s : prog_#_lemma _ _ (step EV) (step (~>_#1 EV)).
prog_#_lemma_v : prog_#_lemma _ _ (val VL) (step (~>_#2)).

% worlds () (prog_#_lemma T2 D SV1 SV2).
% total {SV1} (prog_#_lemma _ _ SV1 _).

prog_s_lemma :  step_or_val E -> step_or_val (s E) -> type.
% mode prog_s_lemma +SV1 -SV2.

prog_s_lemma_s  : prog_s_lemma (step EV) (step (~>_s EV)).
prog_s_lemma_v  : prog_s_lemma (val VL) (val (value_s VL)).

% worlds () (prog_s_lemma SV1 SV2).
% total (SV1) (prog_s_lemma SV1 _).

% Now we can prove progress by simply using the above lemmas

prog : (has E T) -> step_or_val E -> type.
% mode prog +D -SV.

prog_z   : prog (is_z) (val value_z).

prog_s   : prog_s_lemma SV SV' ->
           prog D SV ->
         % ---------------------------
           prog (is_s D) SV'.

prog_@   : prog_@_lemma D1 SV1 SV2 SV3 ->
           prog D1 SV1 ->
           prog D2 SV2 ->
         % ------------------------------
           prog (is_@ D1 D2) SV3.

prog_#   : prog_#_lemma _ D SV SV' ->
           prog D SV ->
         % ------------------------------
           prog (is_# D) SV'.

prog_lam :
         % --------------------------------------------------------
           prog (is_lam (\x.\d. D1 x d)) (val value_lam).

prog_lAM :
         % -------------------------------------------
           prog (is_lAM (\a. D a)) (val value_lAM).

% worlds () (prog D SV).
% total D (prog D _).

% QED
