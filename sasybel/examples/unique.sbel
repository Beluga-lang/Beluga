terminals lam app nat fun
syntax

tp ::= tp -> tp | nat | x ;

exp ::= lam \x .exp[x] | app exp exp;

notation of_typ : exp oft tp;

E1 oft (T2 -> T);
E2 oft T2;
------------------------- t_app
(app E1 E2) oft T;

{x:exp, x oft T1} (E[x] oft T2);
------------------------------------ t_lam
(lam T1 E) oft (T1 -> T2);

context gamma ::= {t:tp} (x:exp) x oft t;

notation equal : tp = tp;

------------------------- eq_ref
T = T;

theorem unique : forall d: | g: gamma |- E .. oft T ; f: | g |- E .. oft T' exists T = T';

T = T' by induction on d ;

case rule

D1: | g |- E1 .. oft (T2 -> T);
D2: | g |- E2 .. oft T2;
------------------------------ t_app
| g |- (app (E1 ..) (E2 ..)) oft T;

is

eq_ref by case analysis on f:

                 case rule

                 F1: | g |- E1 .. oft (T2 -> T');
                 F2: | g |- E2 .. oft T2;
                 ------------------------------ t_app
                 | g |- (app (E1 ..) (E2 ..)) oft T';

                 is

                 eq_ref by induction hypothesis on | g |- D1 .. , | g |- F1 .. ;

                 end case
                 end case analysis

T = T' by rule eq_ref;

end case

case | g: (x:exp) x oft T |- x oft T

is

T = T' by case analysis on f:

                 case | g: (y:exp) y oft T' |- y oft T'

                 is

                 eq_ref  by uniqueness of variables;

                 end case
                 end case analysis

end case

case rule

D: | g |- {x:exp, x oft T1} (E .. [x] oft T2);
---------------------------------------------- t_lam
| g  |- (lam T1 E ..) oft (T1 -> T2);

is

eq_ref by case analysis on f:

                 case rule


                 F: | g |- {x:exp, x oft T1} (E .. [x] oft T2);
                 ---------------------------------------------- t_lam
                 | g |- (lam T1 E ..) oft (T1 -> T2);

                 is

                 eq_ref  by induction hypothesis on | g, b:(x:exp) x oft _ |- D .. b.1 b.2 , | g,b |- F .. b.1 b.2 ;

                 end case
                 end case analysis

T = T' by rule eq_ref;

end case

end induction
end theorem
