nat : type.
z : nat.
s : nat -> nat.


rec identity : [ |- nat] -> [ |- nat] =
    fn x =>
      case x of
          [ |- z]   : [ |- nat] => [ |- z]
        | {U:[ |- nat]}[ |- s U] : [ |- nat] => [ |- s U] ;


rec plus : [ |- nat] -> [ |- nat] -> [ |- nat] =
  fn x => fn y =>
    case x of [ |- z] : [ |- nat]  => y
            | {U: [ |- nat]}[ |- s U] : [ |- nat] =>
	      (case (plus [ |- U] y) of
 	        {V: [ |- nat]} [ |- V] : [ |- nat] => [ |- s V]);


rec plus' : [ |- nat] -> [ |- nat] -> [ |- nat] =
  fn x => fn y =>
    case x of [ |- z] : [ |- nat]  => y
            | {U: [ |- nat]}[ |- s U] : [ |- nat] =>
	      (case (plus' [ |- U] y) of
 	        {V: [ |- nat]} [ |- V] : [ |- nat] => [ |- s V]);
