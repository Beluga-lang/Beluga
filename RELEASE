#!/bin/sh

suppress=NO

git status 2> /dev/null \
    |  egrep 'Changes not staged for commit|Changes to be committed' > /dev/null \
    && suppress=SUPPRESS

if [ $suppress = SUPPRESS ]; then
   echo
   echo '`git status'"'"' reports changed files.'
   echo 'This script will continue, but will not build a final .tar.gz file.'
   echo
fi

echo 'Version number is:'
echo
cat VERSION || ( echo "VERSION file doesn't exist; aborting release" ; exit 1 )
echo

release=./beluga-"`cat VERSION`"-"`date +%Y%m%d`"

echo 'Release directory name is:'
echo
echo '    '$release
echo

if [ -e $release ]; then
  echo Release directory "$release" already exists.
  exit 1
fi

mkdir $release

echo 'Copying files in root'
cp -a \
 INSTALL \
 OMakefile \
 OMakeroot \
 README \
 STYLE \
 $release

mkdir $release/bin

echo 'Copying src'
cp -a \
 src \
 $release

echo 'Copying tools'
cp -a \
 tools \
 $release

echo 'Copying examples examples-twelf'
cp -a \
 examples \
 examples-twelf \
 $release

cd $release
echo Deleting useless files:
useless="`find . -print | egrep '~|.DS_Store'`"
echo rm $useless
rm $useless

# Remove examples not yet ready for public consumption
rm -rf examples/notworking
rm -rf examples/cfg
rm -rf examples/beluga

echo "Copying $release to $release-sandbox"
cd ..
cp -a $release $release-sandbox

cd $release-sandbox
echo 'Running omake'
omake || ( echo 'omake failed; aborting release' ; exit 1 )

echo 'Running TEST'
./TEST || ( echo 'TEST failed; aborting release' ; exit 1 )

omake clean
omake NATIVE_ENABLED=true clean

echo
echo 'Running omake NATIVE_ENABLED=true'
sleep 1
omake NATIVE_ENABLED=true || ( echo 'native omake failed; aborting release' ; exit 1 )

echo 'Running TEST (native code)'
./TEST || ( echo 'TEST (native code) failed; aborting release' ; exit 1 )

echo ; echo 'TEST exit value 0; check output for signs of trouble'
sleep 2
cd ..
echo 'Leaving '$release-sandbox' around if you want to test further'
sleep 1

if [ $suppress = SUPPRESS ]; then
  echo 'There are uncommitted changes.  Please commit them and run RELEASE again.'
  exit 3
fi

sleep 1
echo 'Building archive' $release.tar
tar zcf $release.tar.gz $release || ( echo 'tar failed' ; exit 1 )
echo
ls -l $release.tar.gz
echo
echo "Release built.  Don't forget to "'`'"git push' if needed."
