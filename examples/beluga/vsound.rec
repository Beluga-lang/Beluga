% Value soundness 
% Author: Brigitte Pientka
%
% TODO extend with functions and function application

exp  : type.  
z    : exp.
suc  : exp -> exp.
letv : exp -> (exp -> exp) -> exp.

value : exp -> type.
v_z   : value z.
v_s   : value E -> value (suc E).

eval : exp -> exp -> type.
ev_z : eval z z.
ev_s : eval E V -> eval (suc E) (suc V).
ev_l : eval (E2 V1) V  -> eval E1 V1 -> eval (letv E1 (\x. E2 x)) V.

rec vs :  (eval E![.]! V![.]!)[.] -> (value V![.]!)[.] = 

fn e =>
  case e of 
     box(. . ev_z) => box(. v_z)

  | box(. . ev_s D![.]!) 
    => 

    (case   (vs   box(. D![.]!)) of 
             box(. . F![.]!)  
       =>    box(. v_s F![.]!) 
     )

  |  box(. . ev_l D2![.]! D1![.]!)

     =>
        vs  box(. D2![.]!)

;