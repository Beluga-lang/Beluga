%
% Lambda calculus
%

tp: type.
nat: tp.
arr: tp -> tp -> tp.
exp: tp -> type.

lam: (exp T1 -> exp T2) -> exp (arr T1 T2).
app: exp (arr T2 T) -> exp T2 -> exp T.

% Normal form representation

normal: tp -> type.  % normal forms
neutral: tp -> type. % terms with no abstractions

lam': (neutral T1 -> normal T2) -> normal (arr T1 T2).


% normal form applications take a neutral (a variable) form

app': neutral (arr T1 T2) -> normal T1 -> neutral T2.

% we need a way to coerce neutral values into normal forms
% basically a way to say that neutral values are normal forms

neut: neutral T -> normal T.

% as an example lam' x.x = lam' \x.neut x to coerce x to be a neutral form

schema ctx = some [t:tp] block x:exp t, _t:neutral t; % Q: why small T?

%


% normal2exp: convert a normal form to a regular expression
%             also in the normal form


rec normal2exp : (g: ctx) [g |- normal T] -> [g |- exp T] =
fn e => case e of
| [g |- neut (M..)] => neutral2exp[g |- M..]

| {S : [g,x:neutral T2 |-  normal T1]} % we specify the type of S to help the type-checker
  [g |- lam' \x.S..,x] => let [g,b: block x:exp T, _t:neutral T |-  M..b.x] =
                       normal2exp[g,b: block x:exp T2, _t:neutral T2 |-  S..b._t]
                     in
                       [g |- lam \y.M..y]

and neutral2exp : (g: ctx) [g |- neutral T] -> [g |- exp T] =
fn e => case e of
|[g |- app' (R..) (S..)] => let [g |- M..] = neutral2exp [g |- R..] in
                       let [g |- N..] = normal2exp [g |- S..] in
                         [g |- app (M..)(N..)]
|[g |- #p._t..] => [g |- #p.x..]

;



% Normalization
rec norm : (g: ctx) [g |- exp T] -> [g |- normal T] =
fn e => case e of
| [g |- app (M..) (N..)] =>
  (case norm [g |- M..] of
  |  {S : [h, x:neutral T2 |-  normal T1]}
    [h |- lam' \x.S..,x] =>
    let [h,b: block x: exp T, _t:neutral T |-  M'..b.x] =
      normal2exp [h, b: block x:exp T2, _t:neutral T2 |-  S..b._t]
    in
      norm [h |- M'..(N..)]
 )

;
