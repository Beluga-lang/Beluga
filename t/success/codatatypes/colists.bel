datatype nat : type =
| z : nat
| s : nat -> nat
;

datatype MuColist : ctype =
| Nil : MuColist
| Cons : [ |- nat] -> NuColist -> MuColist

and codatatype NuColist : ctype =
| Out : NuColist -> MuColist
;

datatype List : ctype =
| Lnil : List
| Lcons : [ |- nat] -> List -> List
;

rec append : List -> NuColist -> NuColist =
fn e => fn f => case e of
| Lnil => f
| Lcons g h => (cofun Out => Cons g (append h f))
;

rec zipWith : ([ |- nat] -> [ |- nat] -> [ |- nat]) -> NuColist -> NuColist -> NuColist =
fn f => fn xs => fn ys => cofun Out => (case Out xs of
| Nil => Nil
| Cons x xs' => (case Out ys of
                | Nil => Nil
                | Cons y ys' => Cons (f x y) (zipWith f xs' ys')
               ))
;
