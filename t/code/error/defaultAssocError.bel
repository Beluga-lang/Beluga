nat : type.
z : nat.
s : nat -> nat.

bool : type.
t : bool.
f : bool.

list : nat -> type.
nil : list z.
ap : bool -> list N -> list (s N).


--assoc left.
--infix ap 5.

let l1 = [ |- t ap t ap t ap nil];


rec copy : [ |- list N ] -> [ |- list N] =
fn l => case l of
| [ |- nil ] => [ |- nil ]
| [ |- (X[]) ap T ] =>
	let [ |- T' ] = copy [ |- T ] in [ |- (X[]) ap T' ];
