% Author: Brigitte Pientka
%
nat: type.
z: nat.
s: nat -> nat.

% Types
tp  : type.                --name tp T.
o   : tp.
arr : tp -> tp -> tp.


% Intrinsically well-typed expressions
exp   : tp -> type.        --name exp E.
value : tp -> type.
app   : exp (arr A B) -> exp A -> exp B.
lam   : {A:tp}(value A -> exp B) -> value (arr A B).
ret   : value A -> exp A.

% Translating to untyped deBruijn terms

exp'   : tp -> type.

one    : exp' A.
shift  : exp' A -> exp' A.  % ^
lam'   : {A:tp}exp' B  -> exp' (arr A B).
app'   : exp' (arr A B) -> exp' A -> exp' B.

schema ctx = value T ;

rec vhoas2db : (g:ctx) [g |- value (S[])]  -> [ |- exp' (S[])] =
fn v =>  case v of
 | [h,x:value T |-  x] => [ |- one]

 | {#p:[h |- value S']} % This is necessary in the absence of subordination, since we need S' to be closed.
   [h,x:value T |-  #p[..]]  =>
     let [ |- Db] = vhoas2db [h |- #p] in
       [ |- shift Db]

 | [g |- lam (T[]) (\x. E)] =>
   let [ |- F]  =  hoas2db [g,x:value (T[]) |-  E] in
     [ |- lam' (T[]) F]

and rec hoas2db : (g:ctx) [g |- exp (T[])] ->  [ |- exp' T] =
  fn e =>  case e of
   | [g |- app (E1 ) (E2 )] =>
     let [ |- F1] = hoas2db [g |- E1]  in
     let [ |- F2] = hoas2db [g |- E2]  in
       [ |- app' F1 F2]
   | [g |- ret V] =>
     vhoas2db [g |- V]
;


rec db2vhoas : (g:ctx) [g |- exp' (T[])] -> [g |- value (T[])] =
  fn e => case e of
  | [h,x:value (T[]) |-  one] : [h,x:value (T[]) |-  (exp' (T[]))] =>
      [h,x:value (T[]) |-  x]

  | {E:[ |- exp' (S[])]}
     [h,x:value T |-  shift (E[])] =>
    let [h |- F] = db2vhoas [h |- E[]]  in
      [h,x:value T |-  F[..]]

  | [h |- lam' (T[]) E] =>
      let [g,x:value (T[]) |-  F] = db2hoas  [h, x:value (T[]) |-  E[..]] in
        [g |- lam (T[]) (\x. F)]

and rec db2hoas : (g:ctx) [g |- exp' T] -> [g |- exp T] =
  fn e => case e of
  | [g |- app' E1 E2] =>
    let [g |- F1] = db2hoas [g |- E1] in
    let [g |- F2] = db2hoas [g |- E2] in
      [g |- app F1 F2]
;


rec tohoas : [ |- exp' T] -> [ |- exp T] =
fn e => db2hoas e ;
