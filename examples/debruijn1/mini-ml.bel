%%% The Mini-ML Language
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Michaylov & Pfenning 92]

exp  : type.  --name exp E.

lam   : (exp -> exp) -> exp.
app   : exp -> exp -> exp.


%%% Mini-ML Natural Semantics
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Michaylov & Pfenning 92]

eval : exp -> exp -> type.  --name eval D.

% Functions
ev_lam  : eval (lam (\x. E x)) (lam (\x. E x)).
ev_app  : eval (app E1 E2) V
	    <- eval E1 (lam (\x. E1' x))
	    <- eval E2 V2
	    <- eval (E1' V2) V.


%%% Expression representation using de Bruijn indices
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Hannan & Pfenning 92]

% Expressions

exp'   : type.  --name exp' F.

one      : exp'.
shift    : exp' -> exp'.  --postfix 20 ^.
lam'     : exp' -> exp'.
app'     : exp' -> exp' -> exp'.

% Environments and values

env    : type.  --name env K.
val    : type.  --name val W.

empty  : env.
cons   : env -> val -> env.   % infix left 10 ;.

clo    : env -> exp' -> val.



%%% Mini-ML Natural Semantics for de Buijn version
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Michaylov & Pfenning 92]

feval : env -> exp' -> val -> type.  --name feval D.

% Variables
fev_1 : feval (cons K W) one W.
fev_^ : feval (cons K W') (shift F) W
	   <- feval K F W.

% Functions
fev_lam : feval K (lam' F) (clo K (lam' F)).

fev_app : feval K (app' F1 F2) W
	   <- feval K F1 (clo K' (lam' F1'))
	   <- feval K F2 W2
	   <- feval (cons K' W2) F1' W.


%%% Translation to representation using de Bruijn indices
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Hannan & Pfenning 92]

trans  : env -> exp' -> exp -> type.  --name trans C.
vtrans : val -> exp -> type.          --name vtrans U.

% Functions
tr_lam : trans K (lam' F) (lam (\x. E x))
	    <- {w:val} {x:exp}
		  vtrans w x -> trans (cons K w) F (E x).
tr_app : trans K (app' F1 F2) (app E1 E2)
	    <- trans K F1 E1
	    <- trans K F2 E2.

% Variables
tr_1  : trans (cons K W) one E <- vtrans W E.
tr_^  : trans (cons K W) (shift F) E <- trans K F E.

% Values
vtr_lam : vtrans (clo K (lam' F)) (lam (\x. E x))
	   <- trans K (lam' F) (lam (\x. E x)).



%%% Mapping evaluations to evaluations in environments.
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Hannan & Pfenning 92]

% To return a pair: feval K F W * vtrans W V we define the
% following constructor. This avoids not only computation-level pairs
% but also avoids existential types on the computation-level.

fev_vtr: env -> exp' -> exp  -> type.

ev_vtrans: fev_vtr K F V
            <- vtrans W V
	    <- feval K F W.


rec map_eval : [ |- eval E V] -> [ |- trans K F E]
 	      -> [ |- fev_vtr K F V] =
fn d => fn c => case c of

   [ |- tr_1 (vtr_lam (tr_lam (\w. \x. \v. (C2 w x v))))]  =>
     let [ |- ev_lam] = d in
        [ |- ev_vtrans (fev_1) (vtr_lam (tr_lam (\w. \x. \v. (C2 w x v))))]

 | [ |- tr_lam (\w. \x. \u. (C1 w x u))] =>
   let [ |- ev_lam] = d in
        [ |- ev_vtrans (fev_lam) (vtr_lam (tr_lam (\w.\x.\u. (C1 w x u))))]

 | [ |- tr_^ C1] =>
     let [ |- ev_vtrans  D1' U1] = (map_eval d) [ |- C1] in
        [ |- ev_vtrans   (fev_^ D1') U1]

    | [ |- tr_app C2 C1] =>
      let [ |- ev_app D3 D2 D1] = d in
      let [ |- ev_vtrans D1' (vtr_lam (tr_lam (\w. \x. \v. (C3 w x v))))] = (map_eval [ |- D1]) [ |- C1] in
      let [ |- ev_vtrans D2' U2] = (map_eval [ |- D2]) [ |- C2] in
      let [ |- ev_vtrans D3' U3] = (map_eval [ |- D3]) [ |- (C3 _ _ U2)] in
        [ |- ev_vtrans (fev_app D3' D2' D1') U3]

   ;



