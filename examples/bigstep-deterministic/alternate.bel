% Proof that a big step evaluation relation for lambda terms is deterministic
% (An an argument for using refl for equality instead of algorithmic equality)
% Author: Andrew Cave

exp : type.
lam : (exp -> exp) -> exp.
app : exp -> exp -> exp.

eq : exp -> exp -> type.
refl : eq M M.

notLam : exp -> type.
notLam : notLam (app M N).

eval : exp -> exp -> type.
eval_lam : ({x:exp} eval x x -> notLam x -> eval (M x) (N x))
           -> eval (lam M) (lam N).
eval_app1 : eval M (lam M') -> eval (M' N) R -> eval (app M N) R.
eval_app2 : eval M M' -> notLam M' -> eval N N' -> eval (app M N) (app M' N').

schema evctx = block x:exp, u:eval x x, _t:notLam x;

rec deterministic : (g:evctx) [g |- eval (M[..]) (R[..])] -> [g |- eval (M[..]) (R'[..])]
-> [g |- eq (R[..]) (R'[..])] = / total d (deterministic g m r r' d) /
fn d => fn f =>
case d of
| [g |- eval_app2 (D1[..]) (NL[..]) (D2[..])] =>
  (case f of
    | [g |- eval_app2 (F1[..]) (NL'[..]) (F2[..])] =>
      let [g |- refl] = deterministic [g |- D1[..]] [g |- F1[..]] in
      let [g |- refl] = deterministic [g |- D2[..]] [g |- F2[..]] in
      [g |- refl]

    | [g |- eval_app1 (F1[..]) (F2[..])] =>
      let [g |- refl] = deterministic [g |- D1[..]] [g |- F1[..]] in
       impossible [g |- NL[..]] )

 | [g |- eval_lam (\x.\u.\v. D1 u v)] =>
  let [g |- eval_lam (\x.\u.\v. F1 u v)] = f in
  let [g,b:block x:exp, v:eval x x, _t:notLam x |-  refl] =
    deterministic
     [g,b:block x:exp, v:eval x x, _t:notLam x |-  D1[..] b.1 b.2 b.3]
     [g,b |- F1[..] b.1 b.2 b.3] in
  [g |- refl]

| [g |- eval_app1 (D1[..]) (D2[..])] : [g |- (eval (app (M[..]) (N[..])) (R[..]))] =>
  (case f of
    | [g |- eval_app1 (F1[..]) (F2[..])] =>
      let [g |- refl] = deterministic [g |- D1[..]] [g |- F1[..]] in
      deterministic [g |- D2[..]] [g |- F2[..]]

    | [g |- eval_app2 (F1[..]) (NL[..]) (F2[..])] =>
      let [g |- refl] = deterministic [g |- D1[..]] [g |- F1[..]] in
      impossible [g |- NL[..]] )

| [g |- #p.2[..]] => let [g |- #q.2[..]] = f in [g |- refl]
;
