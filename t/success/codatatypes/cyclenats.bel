LF nat : type =
| z : nat
| s : nat -> nat
;

coinductive Stream : ctype =
| Hd : Stream -> [ |- nat]
| Tl : Stream -> Stream
;

let a = [ |- s (s z)];

rec cycleNats : [ |- nat] -> Stream =
fn e => observe Hd => e
           | Tl => (case e of
                   | [ |- z] => cycleNats a
                   | [ |- s N] => cycleNats [ |- N])
;

let b = cycleNats [ |- s z];
% let c = ((Hd b, Hd (Tl b)), Hd (Tl (Tl b)));
