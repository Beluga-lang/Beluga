datatype tm : type =
| z    : tm
| suc  : (tm) → tm
| app  : tm → tm → tm
| lam  : (tm → tm) → tm
;

datatype tp: type = 
| nattp:tp
| unittp:tp
| arr: tp -> tp -> tp
| cross: tp -> tp -> tp
;

datatype ttm: tp -> type =
| tunit : ttm unittp
| tz    : ttm nattp
| tsuc  : ttm nattp → ttm nattp
| tapp  : ttm (arr A B) → ttm A → ttm B
| tlam  : (ttm A → ttm B) → ttm (arr A B)
| tpair : ttm A -> ttm B -> ttm (cross A B)
;

schema tctx = tm ;

datatype nat: type =
| zero   : nat
| succ : nat → nat
;

datatype nlist: nat → type =
| nnil : nlist zero
| ncons : tm  → nlist N → nlist (succ N)
;

datatype plus: nat -> nat -> nat -> type =
| pzn: plus zero N N
| psn: plus N M Q -> plus (succ N) M (succ Q)
;


schema tctx = tm ;

%Whnf.Violation("illtyped msub")
datatype Addup:{g:tctx} [g.nlist M] -> [g.nat] -> ctype = 
| AddNil: Addup [g] [g.nnil] [g. zero]
| AddSuc: Addup [g] [g.L..] [g.N..] -> Addup [g] [g.ncons (Y..) (L..)] [g. plus (N..) (Y..) (Q..)]
;
