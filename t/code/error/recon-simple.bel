% Strong normalization for simply-typed lambda-calculus in Beluga

LF ty : type =
  | base : ty
  | arr  : ty -> ty -> ty
  ;
--name ty A.

LF tm : ty -> type =
  | abs : (tm A -> tm B) -> tm (arr A B)
  | app : tm (arr A B) -> tm A -> tm B
  ;
--name tm M.

schema cxt = tm A; % some [a : ty] block tm a;

LF step : tm A -> tm A -> type =
  | rbeta : step (app (abs M) N) (M N)
  | rabs  : ({x : tm A} step (M x) (M' x)) -> step (abs M) (abs M')
  | rappl : step M M' -> step (app M N) (app M' N)
  | rappr : step N N' -> step (app M N) (app M N')
  ;


inductive SN : (g : cxt) {M : [ g |- tm A[] ]} ctype =
  | Acc : ({M' : [ g |- tm A[] ]} [ g |- step M M' ] -> SN [ g |- M' ])
        -> SN [ g |- M ]
  ;

% Lemma: closure of SN under renaming.
%
% Let Γ₂ ⊢ ρ : Γ₁.
% If Γ₁ ⊢ M ∈ SN then Γ₂ ⊢ [ρ]M ∈ SN.
% By induction on M ∈ SN.
% We show [ρ]M ∈ SN by assuming [ρ]M ⇒ M' and proving M' ∈ SN.
% Assume [ρ]M ⇒ M'.
% Then M ⇒ N with M' = [ρ]N.
% By IH on N ∈ SN, [ρ]N ∈ SN, thus, M' ∈ SN.
% QED.

rec renSN : {g2 : cxt} {$R : [g2 |-# g1]} {M : [g1 |- tm A[]]}
       SN [g1 |- M]
    -> SN [g2 |- M[$R]] = ?
  % / total s (renSN g1 g2 a r m s) /  %% Totality checker not prepared for wf-induction.
%{  mlam g2, $R, M => fn s => let s : SN [g1 |- M] = s in
    case s of
    | Acc f => Acc (mlam M' => fn r =>
        let Ex [g1 |- S] = invRenStep [g1] [g1 |- M] [g2 |- $R] r
        in  renSN [g2] [g2 |- $R] [g1 |- _] (f [g1 |- _] [g1 |- S])
      )
}%
  ;

stratified Red : {A : [ |- ty ]} (g : cxt) {M : [ g |- tm A[] ]} ctype =
  | RBase : SN [g |- M] -> Red [ |- base ] [g |- M]
  | RArr  : ({g' : cxt} {$S : [g' |-# g]} {N : [g' |- tm A[]]}
               Red [|- A] [g' |- N]
            -> Red [|- B] [g' |- app M[$S] N])
         -> Red [ |- arr A B ] [g |- M]
  ;

inductive RedS : {g : cxt} (g' : cxt) {$S : [g' |- g]} ctype =
  | RNil  : RedS [] [ g' |- ^ ]
  | RCons : Red [|- A] [g' |- M]
         -> RedS [g] [g' |- $S]
         -> RedS [g, x : tm A[]] [g' |- $S, M]
  ;

%% Closure of Red under renaming
%% (uses closure of SN under renaming and Kripke definition)

rec renRed : {g2 : cxt} {$R : [g2 |-# g1]}
       Red [|- A[]] [g1 |- M]
    -> Red [|- A[]] [g2 |- M[$R]] =
  mlam g2, $R => fn r =>
  let r : Red [|- A[]] [g1 |- M] = r in
  case r of
    | RBase s => RBase (renSN [g2] [g2 |- $R] [g1 |- M] s)
    | RArr  f => RArr (mlam g', $R', N => fn r => f [g'] [g' |- $R[$R']] [g' |- N] r)
  ;


% Applicative contexts

LF ecxt : (tm A -> tm B) -> type =
  | eid  : ecxt \ x. x
  | eext : ecxt C -> ecxt \ x. app (C x) M
  ;

% Closure under weakhead expansion

rec whExp : {A : [|- ty]} {B : [|- ty]} {T : [|- ty]}
   {C : [g, y : tm B[] |- tm T[]]}
   {M : [g, x : tm A[] |- tm B[]]}
   {N : [g |- tm A[]]}
    [g |- SN N] ->
   {E : [g |- ecxt \y.C]}
    Red [|- T] [g |- C[.., M [.., N]] ]
    -> Red [|- T] [g |- C[.., app (abs \ x. M) N] ] = ? ;
