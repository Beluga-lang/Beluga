% Value soundness
% Author: Brigitte Pientka
%

exp  : type.   --name exp E.
z    : exp.
suc  : exp -> exp.
letv : exp -> (exp -> exp) -> exp.
lam  : (exp -> exp) -> exp.
app  : exp -> exp -> exp.

value : exp -> type. --name value F.
v_z   : value z.
v_s   : value E -> value (suc E).
v_lam   : value (lam (\x. E x)).

eval : exp -> exp -> type.   --name eval D.
ev_z : eval z z.

ev_s : eval E V -> eval (suc E) (suc V).

ev_l : eval (E2 V1) V  -> eval E1 V1 -> eval (letv E1 (\x. E2 x)) V.

ev_lam: eval (lam (\x. E x)) (lam (\x. E x)).

ev_app: eval E1 (lam (\x. E x)) -> eval E2 V2 -> eval (E V2) V
      -> eval (app E1 E2) V.



rec vs :  [ |- eval E V] -> [ |- value V] =
/ total e (vs _ _ e) /
fn e =>
case e of
   [ |- ev_z] =>  [ |- v_z]

 | [ |- ev_s  D]  =>
   let [ |- F] =  vs [ |- D] in
        [ |- v_s F]

| [ |- ev_l D2 D1]
     =>  vs [ |- D2]

| [ |- ev_lam]          => [ |- v_lam]

| [ |- ev_app D1 D2 D3] =>  vs [ |- D3]
;
