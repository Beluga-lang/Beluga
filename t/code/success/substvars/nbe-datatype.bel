atomic_tp : type.
tp : type.                --name tp T.
atomic : atomic_tp -> tp.
arr: tp -> tp -> tp.

tm : tp -> type.          --name tm E.
app : tm (arr T S) -> tm T -> tm S.
lam : (tm T -> tm S) -> tm (arr T S).

schema tctx = tm T;

neut : tp -> type.       --name neut R.
norm : tp -> type.       --name norm M.
nlam : (neut T -> norm S) -> norm (arr T S).
rapp : neut (arr T S) -> norm T -> neut S.
embed : neut (atomic P) -> norm (atomic P).

schema ctx = neut T;

stratified Sem : {g:ctx} [ |- tp] -> ctype  =
| Syn :  [g |- neut (atomic P[])] -> Sem [g] [ |- atomic P]
| Slam : {g:ctx}{A:[ |- tp]}{B:[ |- tp]}
          ({h:ctx} {$W: [h |- g]} Sem [h] [ |- A] -> Sem [h] [ |- B])
           -> Sem [g] [ |- arr A B]
;

rec sem_wkn : {g:ctx}{h:ctx}{$W: [h |- g]} Sem [g] [ |- A] -> Sem [h] [ |- A] =
mlam g => mlam h => mlam $W => fn e =>
case e of
| Syn [g |- R[..]] => Syn ([h |- R[$W[..]]])
| Slam [g] [ |- A] [ |- B] f =>
    Slam [h] [ |- A] [ |- B] (mlam h' => mlam $W2 => fn e => f [h'] [h' |- $W[$W2[..]]] e
    )
;

inductive SemSubst : {g:tctx}{h:ctx} ctype =
| Nil : SemSubst [] [h]
| Dot : SemSubst [g] [h] -> Sem [h] [ |- A] -> SemSubst [g,x:tm A[]] [h];

rec lookup : {#p:[g |- tm A[]]} SemSubst [g] [h] -> Sem [h] [ |- A] =
mlam #p => fn s => let s : SemSubst [g] [h] = s in case [g |- #p[..]] of
| [g',x:tm T |-  x] => let Dot s' e = s in e
| [g',x:tm T |-  #q[..]] => let Dot s' e = s in lookup [g' |-  #q[..]] s'
;

rec subst_wkn : {h:ctx}{h':ctx}{$W:[h' |- h]} SemSubst [g] [h] -> SemSubst [g] [h'] =
mlam h => mlam h' => mlam $W => fn s => case s of
| Nil => Nil
| Dot s' e => Dot (subst_wkn [h] [h'] [h' |- $W[..]] s') (sem_wkn [h] [h'] [h' |- $W[..]] e)
;

rec eval : SemSubst [g] [h]
           -> [g |- tm S[]] -> Sem [h] [ |- S]  =
fn s => fn t => let s : SemSubst [g] [h] = s in
case t of
| [g |- #p[..] ]           =>  lookup [g |- #p[..]] s
| [g |- lam (\x. E) ]  =>
  Slam [h] [ |- _] [ |- _] (mlam h' => mlam $W => fn e =>
    eval (Dot (subst_wkn [h] [h'] [h' |- $W[..]] s) e) [g,x:tm _ |-  E])
| [g |- app (E1[..]) (E2[..]) ] =>
  let Slam [h] [ |- A] [ |- B] f =  eval s [g |- E1[..]] in
    f [h] [h |- ..] (eval s [g |- E2[..]])
;

rec reflect : [g |- neut A[]] ->  Sem [g] [ |- A] =
fn r => let [g |- R[..] ] : [g |- neut A[]] = r in
case [ |- A] of
| [ |- atomic P ] => Syn [g |- R[..]]
| [ |- arr T S ] =>  Slam [g] [ |- T] [ |- S] (mlam h => mlam $W => fn e =>
   let [h |- N[..]] = reify e in
   reflect [h |- rapp (R[$W[..]]) (N[..])]
  )

and rec reify : Sem [g] [ |- A] -> [g |- norm A[]] =
fn e => let (e : Sem [g] [ |- A]) = e in
case e of
| Syn [g |- R[..]] => [g |- embed (R[..])]
| Slam [g] [ |- A] [ |- B] f =>
     let [g,x:neut _ |-  E] = reify (f [g,x:neut _] [g,x |- .. ] (reflect [g,x:neut _ |-  x]))
     in [g |- nlam (\x. E)]
;

rec nbe : [ |- tm A] -> [ |- norm A] =
fn t => reify (eval Nil t)
;
