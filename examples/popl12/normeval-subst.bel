%{
  Normalization by Evaluation
  Author: Andrew Cave, Brigitte Pientka

  This version uses first-class substitutions Beluga provides instead
of modelling substitutions as functions from neutral variables to
neutral variables. This eliminates the need of implementing
functions for weakening and pushing a substitution through normal
and neutral terms.

}%
atomic_tp : type.

LF tp : type =
| atomic : atomic_tp -> tp
| arr: tp -> tp -> tp;

--name tp T.

LF tm : tp -> type =
| app : tm (arr T S) -> tm T -> tm S
| lam : (tm T -> tm S) -> tm (arr T S);

--name tm E.

schema tctx = some [t:tp] tm t;

LF neut : tp -> type =
| rapp : neut (arr T S) -> norm T -> neut S
and norm : tp -> type =
| nlam : (neut T -> norm S) -> norm (arr T S)
| embed : neut (atomic P) -> norm (atomic P);
--name neut R.
--name norm M.
schema ctx = neut T;

inductive TmVar : {g:tctx} [ |- tp] -> ctype =
| TmVar : {#p:[g |- tm T[]]} TmVar [g] [ |- T]
;

stratified Sem : {g:ctx} [ |- tp] -> ctype =
| Syn :  [g |- neut (atomic P[])] -> Sem [g] [ |- atomic P]
| Slam : ({h:ctx}{$S:[h |- g]} Sem [h] [ |- A] -> Sem [h] [ |- B])
           -> Sem [g] [ |- arr A B]
;

rec subst : {g:ctx}{h:ctx}{$S:[h |- g]}
            Sem [g] [ |- A] -> Sem [h] [ |- A] =
mlam g,h,$S => fn e =>
case e of
| Syn [g |- R] => Syn [h |- R[$S]]
| Slam  f =>
  Slam (mlam h' => mlam $W => fn e => f [h'] [h'|- $S[$W[..]]] e)
;


typedef Map : {g:tctx} {h:ctx} ctype = ({T:[ |- tp]} TmVar [g] [ |- T] -> Sem [h] [ |- T]);

rec extend : (g:tctx)(h:ctx)
             Map [g] [h] -> Sem [h] [ |- S] ->  Map [g, x:tm S[]] [h]  =
fn s => fn e => mlam T => fn x => case x of
| TmVar [g,x:tm S[] |-  x] => e
| TmVar [g,x:tm S[] |-  #q[..] ] => s [ |- T ] (TmVar [g |- #q])
;

rec eval : (g:tctx)(h:ctx)
           Map [g] [h]
        -> [g |- tm S[]] -> Sem [h] [ |- S]  =
fn s => fn t =>
let (s : Map [g] [h]) = s in
case t of
| [g |- #p ]          : [g |- tm S[]] =>  s [ |- S] (TmVar [g |- #p ])
| [g |- lam (\x. E) ] : [g |- tm (arr A[] B[])] =>
  Slam  (mlam h' => mlam $W => fn e =>
         eval (extend (mlam T => fn x => subst [h] [h'] [h'|- $W] (s [ |- T] x))  e)
              [g,x:tm A[] |-  E])

| [g |- app E1 E2 ] =>
  let (Slam f ) : Sem [h] [ |- arr A B] =  eval s [g |- E1] in
  f [h] [h |- ..] (eval s [g |- E2])
;


rec reflect : (g:ctx) [g |- neut A[]] ->  Sem [g] [ |- A] =
fn r => let [g |- R ] : [g |- neut A[]] = r in
case [ |- A] of
| [ |- atomic P ] => Syn [g |- R]
| [ |- arr T S ] =>  Slam (extendSem r)


% Lesson: FACTORIZATION OF CODE HELPS TYPE RECONSTRUCTION!!!
and rec extendSem : (g:ctx)[g |- neut (arr A[] B[])] ->
                ({h:ctx}{$S:[h |- g]} Sem [h] [ |- A] -> Sem [h] [ |- B])
=
fn r => mlam h => mlam $S => fn e =>
let [h |- N ] = reify e in
let [g |- R ] = r in
  reflect [h |- rapp R[$S] N]

and rec reify : Sem [g] [ |- A] -> [g |- norm A[]] =
fn e => let (e : Sem [g] [ |- A]) = e in case [ |- A] of
| [ |- atomic P ] =>  (case e of Syn [g |- R] => [g |- embed R])
| [ |- arr T S ] =>
  (case e of
   | Slam f  =>
     let s = (f [g,x:neut T[] ] [g,x:neut T[] |- ..] (reflect [g ,x:neut T[] |-  x])) in
     let [g,x:neut T[] |-  E] = reify s
     in [g |- nlam (\x. E)])
;


rec initialMap :  {T:[ |- tp]} TmVar [ ] [ |- T] -> Sem [ ] [ |- T] =
mlam T => fn y => let TmVar [ |- #p] = y in impossible [ |- #p] ;

rec nbe : [ |- tm A] -> [ |- norm A] =
fn t => reify  (eval initialMap t)
;
