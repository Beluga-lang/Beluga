module Nats = struct
  nat : type.
  z : nat.
  s : nat -> nat.

  rec suc : [ |- nat ] -> [ |- nat] =
  fn n => let [ |- N ] = n in [ |- s N];

  let two = [ |- s (s z)];
  let three = suc two;
end;

module Arith = struct
	#open Nats

	private rec add : [ |- nat ] -> [ |- nat ] -> [ |- nat ] =
	fn x, y => case x of
	| [ |- z ] => y
	| [ |- s N ] => 
		let [ |- N' ] = add [ |- N ] y in
		[ |- s N'];

	rec add' : [ |- nat ] -> [ |- nat ] -> [ |- nat] =
	fn x, y => add x y;
end;

let x = Arith.add' Nats.two Nats.three;
