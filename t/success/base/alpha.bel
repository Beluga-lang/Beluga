nat: type.
z : nat.
s : nat -> nat.

tp : type.
un : tp.

schema w = nat;
schema wblock = block x:nat, _t:nat;
schema tps = tp;
schema tpblock = block t:tp, _t:tp;

%{
--not
rec ffff3 : {h:(tps)*} tp[h] -> tp[h] =
  FN h => fn eTp =>
    case eTp of [h] #pp.1[..] => [h] #pp.1[..]       % Fails: tps doesn't include any Sigmas
;

rec ffff4 : {g:(wblock)*} {h:(tps)*} nat[g] -> nat[g] =
  FN g => FN h => fn eNat =>
    case eNat of
      [g] #pp.1[..] => [g] z
;
}%

--not
rec ffff3 : {h:tps} [h |- tp] -> [h |- tp] =
% / total e (ffff3 h e)/
  mlam h => fn eTp =>
    case eTp of [h |- #pp.1[..]] => [h |- #pp.3[..]]       % Fails: tps doesn't include any Sigmas
;

rec ffff4 : {g:wblock} {h:tps} [g |- nat] -> [g |- nat] =
% / total e (ffff4 h e)/
  mlam g => mlam h => fn eNat =>
    case eNat of --not
%    | [g] #pppppp.1[..] => [g] z
    | [g |- #pp.1[..]] => [g |- z]        % works if pp is renamed to something else!
;
