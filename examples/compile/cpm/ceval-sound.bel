%%% Soundness of Evaluation under Continuations
%%% Author: Frank Pfenning

%% %{ Main Lemma:
%%    If   C :: K # (ev E) =>* (answer W)
%%    then for some V
%%         D :: eval E V
%%    and  C' :: K # (return V) =>* (answer W)
%%    where C' is a subderivation of C.
%%
%% Proof: By complete induction on the structure of C.
%%
%% Note, we do not explicitly reason about the fact that
%% C' is a subderivation of C. This could be added as an extra argument.
%%
%% Interesting part: We avoid the use of existentials by defining first a
%% constant eval_step (see below).
%% }%

eval_step: exp -> cont -> val -> type.

result : eval E V → mstep (st K (return V))  (answer W) → eval_step E K W.

rec csd :
          [ |- mstep (st K (ev E)) (answer W) ]
       -> [ |- eval_step E K W ] =

fn c => case c of

  [ |- next C' st_z] => [ |- result ev_z C']

| [ |- next C1 st_s] =>
  let [ |- result D1 S]  = csd [ |- C1] in
  let [ |- next C' (st_return (\v. return (s_val v)) K)] = [ |- S] in
   [ |- result (ev_s D1) C']

 | [ |- next C1 st_match]  =>
    (case csd [ |- C1] of
    [ |- result D1 (next (next C2 st_match1_z) S1)] =>
      let [ |- st_return  (\x1. match1 x1 E2 (\x. E3[x])) K]   = [ |- S1] in
      let [ |- result D2 C'] = csd [ |- C2] in
          [ |- result (ev_match_z D2 D1) C']

  | [ |- result D1 (next (next C3 st_match1_s)  S1)]  =>
      let [ |- st_return (\x1. match1 x1 E2 (\x. E3[x])) K] = [ |- S1] in
      let [ |- result D3 C'] = csd [ |- C3] in
      [ |- result (ev_match_s D3 D1) C']
   )

 | [ |- (next C1 st_pair)] =>
    let [ |- result D1 (next (next C2 st_pair1) S1)] = csd [ |- C1] in
    let [ |- st_return (\x1. pair1 x1 E2) K] = [ |- S1] in
    let [ |- result D2 (next C' S2)] = csd [ |- C2] in
    let [ |- st_return (\x2. return (pair_val V1 x2)) K] = [ |- S2] in
      [ |- result (ev_pair D2 D1) C']


 | [ |- (next C1 st_fst)] =>
    let [ |- result D1 (next (next C' st_fst1) S1)] = csd [ |- C1] in
    let [ |- st_return (\x. fst1 x) K] =  [ |- S1] in
      [ |- result (ev_fst D1) C']

 |  [ |- (next C1 st_snd)] =>
    let [ |- result D1 (next (next C' st_snd1) S1)] = csd [ |- C1] in
    let [ |- st_return (\x. snd1 x) K] = [ |- S1] in
      [ |- result (ev_snd D1) C']

 | [ |- (next C' st_lam)] => [ |- result (ev_lam) C']

 | [ |- (next C1 st_app)] =>
   let [ |- result D1 (next (next C2 st_app1) S1)] =  csd [ |- C1] in
   let [ |- st_return (\x1. app1 x1 E2) K]  = [ |- S1] in
   let [ |- result D2 (next (next C3 st_app2) S2)] = csd [ |- C2] in
   let [ |- st_return (\x2. app2 (lam_val (\x. E1'[x])) x2) K] = [ |- S2] in
   let [ |- result D3 C']  = csd [ |- C3] in
    [ |- result (ev_app D3 D2 D1) C']


 | [ |- (next C1 st_letv)] =>
     let [ |- result D1 (next C2 S1)]          = csd [ |- C1] in
     let [ |- st_return (\x1. ev E2[x1]) K] = [ |- S1] in
     let [ |- result D2 C']                  = csd [ |- C2] in
       [ |- result (ev_letv D2 D1) C']

 | [ |- (next C1 st_letn)] =>
     let [ |- result D2 C'] = csd [ |- C1] in
       [ |- result (ev_letn D2) C']


 | [ |- (next C1 st_fix)] =>
     let [ |- result D1 C'] = csd [ |- C1] in
       [ |- result (ev_fix D1) C']

| [ |- (next C' st_vl)] => [ |- result ev_vl C']
;

rec ceval_sound : [ |- ceval E V] -> [ |- eval E V] =
fn c => let [ |- cev C] = c in
        let [ |- result D (next stop st_init)] = csd [ |- C] in [ |- D]
;
