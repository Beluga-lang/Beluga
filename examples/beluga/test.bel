nat : type.
z : nat.
s : nat -> nat.

schema w = some [] block nat;

rec id-test : {g:(w)*} nat [g] -> nat [g] =
    FN g => fn x => x ;



rec identity1 : {g:(w)*} nat [g] -> nat [g] =
  FN g =>
    fn x =>
      case x of
          box (g . z)   : nat [g] => box (g . z)
        | {U::nat[g]} box (g . s U[id(g)]) : nat [g] => box (g . s U[id(g)]);



rec identity2 : {g:(w)*} nat [g] -> nat [g] =
  FN g =>
    fn x =>
      case x of
          box (g . z)   : nat [g] => x
        | {U::nat[g]} box (g . s U[id(g)]) : nat [g] => box (g . s U[id(g)]);


rec identity2 : {g:(w)*} nat [g] -> nat [g] =
  FN g =>
    fn x =>
      case x of
          box (g . z)   : nat [g] => x
        | {U::nat[g]} box (g . s U[id(g)]) : nat [g] => x;





% SHOULD NOT TYPE CHECK
% rec identity : {g:(w)*} nat [g] -> nat [g] =
%   FN g =>
%    fn x =>
%      case x of
%          box (g . z)   : nat [g] => box (g . z)
%        | box (g . s n) : nat [g] => box (g . s n);

