% Sketch of weak normalization for STLC that doesn't go under binders
% Uses more LF level datatypes
% Author: Andrew Cave

tp : type.                %name tp T.
i :  tp.
arr: tp -> tp -> tp.

tm : tp -> type.          %name tm E.
app : tm (arr T S) -> tm T -> tm S.
lam : (tm T -> tm S) -> tm (arr T S).
c : tm i.

schema ctx = tm T;

mstep : tm A -> tm A -> type.  %name mstep S.
beta : mstep (app (lam M) N) (M N).
eta : {M:tm (arr A B)} mstep M (lam (\x. app M x)).
stepapp : mstep M M' -> mstep N N' -> mstep (app M N) (app M' N').
refl : mstep M M.
trans : mstep M M' -> mstep M' M'' -> mstep M M''.

val : tm A -> type.
val/c : val c.
val/lam : val (lam M).

halts : {A:tp} tm A -> type.
halts/m : mstep M M' -> val M' -> halts A M.

datatype Reduce : {g:ctx}{A:[g.tp]} {M:[g.tm (A ..)]} ctype =
| Base : [g. halts i (M ..)] -> Reduce [g] [g. i] [g. M ..]
| Arr :  {g:ctx}{A:[g.tp]}{B:[g.tp]}{M:[g.tm (arr (A ..) (B ..))]}
         [g. halts _ (M ..)] ->
         ({N:[g.tm (A ..)]}
          Reduce [g] [g . A ..] [g. N ..] -> Reduce [g] [g. B ..] [g . app (M ..) (N ..)])
           -> Reduce [g] [g. arr (A ..) (B ..)] [g. M ..]
;

rec haltsMstep : (g:ctx) {S:[g. mstep (M ..) (M' ..)]}
  [g.halts (A ..) (M' ..)] ->  [g. halts (A ..) (M ..)] =
mlam MS => fn h =>
let [g. halts/m (MS' ..) (V ..)] = h in
 [g. halts/m (trans (MS ..) (MS' ..)) (V ..)]
;

% CR2
rec closed : {S:[g. mstep (M ..) (M' ..)]} Reduce [g] [g.A ..] [g. M' ..] -> Reduce [g] [g.A ..] [g. M ..] =
mlam S => fn r => let (r : Reduce [g] [g.A ..] [g. M' ..]) = r in  case r of
| Base ha => Base (haltsMstep [g. S ..] ha)
| Arr [g] [g. A ..] [g. B ..] [g. M ..] ha f => Arr [g] [g. A ..] [g. B ..] [g. _]
  (haltsMstep [g. S ..] ha)
  (mlam N => fn rn => closed [g. stepapp (S ..) refl] (f [g. N ..] rn))

;

% CR1
rec reify : Reduce [g] [g. A ..] [g. M ..] -> [g. halts (A ..) (M ..)] =
fn r => let r : Reduce [g] [g. A ..] [g. M ..] = r in case r of
| Base h => h
| Arr [g] [g. A ..] [g. B ..] [g. M ..] ha f => ha
;

%  h |- #s : g
datatype RedSub : {g:ctx}{h:ctx}{#S:g[h]} ctype =
| Nil : {h:ctx} RedSub [] [h] <h $ ^ >
| Dot : {g:ctx}{h:ctx}{A:[g. tp]}{#S:g[h]}{M:[h.tm (A #S[..])]} % !!!!
        RedSub [g] [h] <h $ #S[..] > -> Reduce [h] [h. A #S[..] ] [h. M ..]
         -> RedSub [g,x:tm (A ..)] [h] <h $ #S[..] (M ..) >
;

rec redVar : {g:ctx}{h:ctx}{T:[g.tp]}{#S:g[h]}{#p:[g.tm (T ..)]} RedSub [g] [h] <h $ #S[..]>
              ->  Reduce [h] [h. T #S[..]] [h. #p #S[..] ] =
mlam g => mlam h => mlam T => mlam #S => mlam #p => fn rs =>
case [g. #p ..] of
 | {A:[g'. tp]} [g',x:tm (A ..). x] =>
    (case rs of
     | {#R:g'[h]}{A:[g'.tp]}{N:[h. tm (A #R[..])]}
       Dot [g'] [h] [g'. A ..] <h $ #R[..] > [h . N .. ] rs' rN => rN)
 | {#q : [g'. tm (T ..)]} [g',x:tm (A ..). #q ..] =>
    let  {#R:g'[h]}{A:[g'.tp]}{N:[h. tm (A #R[..])]}
        Dot [g'] [h] [g'. A ..] <h $ #R[..] > [h . N .. ] rs' rN = rs in
     redVar [g'] [h] [g'. T ..] [h $ #R[..] ] [g'. #q ..] rs'
;


rec eval : {g:ctx}{h:ctx}{A:[g.tp]}{M:[g.tm (A ..)]}{#S:g[h]} RedSub [g] [h] <h $ #S[..] >
           -> Reduce [h] [h. A #S[..]] [h. M #S[..] ] =
mlam g => mlam h => mlam A => mlam M => mlam #S => fn rs => case [g. M ..] of
| {T:[g'.tp]}{#p:[g'. tm (T ..)]}
  [g'. #p ..] => redVar [g'] [h] [g'.T ..] [h $ #S[..] ] [g'. #p ..] rs
% The above should work, I think...
| {T2:[g'.tp]}{T:[g'.tp]}{M1:[g', y:tm (T2 ..). tm (T ..)]}
  [g'. lam (\x. M1 .. x)] =>
  Arr [h] [h. T2 #S[..]] [h. T #S[..]] [h. lam (\x. M1 #S[..] x)]
    [h. halts/m refl val/lam]
    (mlam N => fn rN => closed [h. beta]
       (eval [g',x:tm (T2 ..)] [h] [g',x. T ..] [g',x. M1 .. x] [h $ #S[..] (N ..)]
            (Dot [g'] [h] [g'. T2 ..]  [h $  #S[..]]
                  [h. (N ..)] rs rN
                 ))
    )
 | {T:[g'.tp]}{T2:[g'.tp]}{M1:[g'. tm (arr (T2 ..) (T ..))]}{M2:[g'. tm (T2 ..)]}
  [g'. app (M1 ..) (M2 ..)] =>
  let rM2 : Reduce [h] [h. A' ..] [h. N2 ..] = eval [g'] [h] [g'. T2 ..] [g'. M2 ..] [h $ #S[..] ] rs in
  let Arr [h0] [h0. S2 ..] [h0. S1 ..] [h0. N1 ..] ha f =
       eval [g'] [h] [g'. arr (T2 ..) (T ..)] [g'. M1 ..] [h $ #S[..] ] rs in
  f [h. N2 ..] rM2
| [g'. c] => Base [h. halts/m refl val/c]
;


rec weakNorm : {A:[.tp]}{M:[. tm A]} [. halts A M] =
mlam A => mlam M =>
reify (eval [] [] [. A] [. M] [ $ ^ ] (Nil []))
;

