tp: type.   --name tp T.
nat: tp.
arr: tp -> tp -> tp.

exp : tp -> type.   --name exp E x.

z : exp nat.
s  : exp nat -> exp nat.
lam : (exp T1 -> exp T2) -> exp (arr T1 T2).

coe : exp T -> exp T.

schema w = some [t:tp] exp t;

rec test : {g:w} [g |- exp (T[..])] -> [g |- exp (T[..])] =
 mlam g =>
 fn x =>
  case x of

    [g |- z]          => [g |- z]

  | [g |- s (U[..])]   => [g |- s (U[..])]

  | [g |- coe (E[..])] =>  [g |- coe (E[..])]

  | [g |- (#p[..])]    => [g |- (#p[..])]

  | [g |- lam (\x. (E))]  =>
      [g |- lam (\x. (E))]


;
