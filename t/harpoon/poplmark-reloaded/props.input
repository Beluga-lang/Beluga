t/harpoon/poplmark-reloaded/tps.bel
m-trans
(g : cxt) {M : [g |- tm A[]]} [g |- mstep M1 M] -> [g |- mstep M M2] -> [g |- mstep M1 M2]
2

split x
by m-trans _ [_ |- X5] x1 as MS unboxed
solve [_ |- m-step X4 MS]
m-appl
(g : cxt) {M : [g |- tm (arr A[] B[])]} {M' : [g |- tm (arr A[] B[])]} {N : [g |- tm A[]]} [g |- mstep M M'] -> [g |- mstep (app M N) (app M' N)]
4

split x
by m-appl _ _ [_ |- N] [_ |- X5] as MS unboxed
solve [_ |- m-step (rappl X4) MS]
solve [_ |- m-refl]
m-appr
(g : cxt) {M : [g |- tm (arr A[] B[])]} {N : [g |- tm A[]]} {N' : [g |- tm A[]]} [g |- mstep N N'] -> [g |- mstep (app M N) (app M N')]
4

split x
by m-appr [_ |- M] _ _ [_ |- X5] as MS unboxed
solve [_ |- m-step (rappr X4) MS]
solve [_ |- m-refl]
m-abs
(g : cxt) {M : [g, x : tm A[] |- tm B[]]} [g, x : tm A[] |- mstep M M']-> [g |- mstep (abs \x. M) (abs \x. M')]
2

split x
by m-abs _ [_ |- X5] as MS unboxed
solve [_ |- m-step (rabs \x. X4) MS]
solve [_ |- m-refl]
m-subst
(g : cxt) {M : [g, x : tm A[] |- tm B[]]} {N : [g |- tm A[]]} {N' : [g |- tm A[]]} [g |- step N N'] -> [g |- mstep M[.., N] M[.., N']]
trust

split [_, x : tm _ |- M]
by m-subst [_, x : tm _ |- X2] _ _ x as ms1
by m-subst [_, x : tm _ |- X3] _ _ x as ms2
suffices by m-trans [_ |- app X2[.., N'] X3[.., N]] toshow _, _
suffices by m-appr toshow _
suffices by m-appl toshow _
unbox x as S
by m-subst [_, y : tm _, x : tm _ |- X2[.., x, y]] _ _ [_, y : tm _ |- S[..]] as ms
suffices by m-abs toshow _
unbox x as S
solve [_ |- m-step S m-refl]
solve [_ |- m-refl]
mstep-Sn
(g : cxt) {M : [g |- tm A[]]} {M' : [g |- tm A[]]} [g |- mstep M M'] -> Sn [g |- M] -> Sn [g |- M']
3

split x
split x1
solve mstep-Sn _ _ [_ |- X5] (x2 _ [_ |- X4])
Sn-var
(g : cxt) {#p : [g |- tm A[]]} Sn [g |- #p]


suffices by Acc toshow _
split [_ |- S]
Sn-abs
(g : cxt) {M : [g, x : tm A[] |- tm B[]]} Sn [g, x : tm A[] |- M] -> Sn [g |- abs \x. M]
1

suffices by Acc toshow _
split [_ |- S]
split x
solve Sn-abs _ (x1 _ [_ |- X4])
Sn-appl
(g : cxt) {M : [g |- tm (arr A[] B[])]} {N : [g |- tm A[]]} Sn [g |- app M N] -> Sn [g |- M]
2

split x
suffices by Acc toshow _
solve Sn-appl _ _ (x1 _ [_ |- rappl S])
Sn-appr
(g : cxt) {M : [g |- tm (arr A[] B[])]} {N : [g |- tm A[]]} Sn [g |- app M N] -> Sn [g |- N]
1

split x
suffices by Acc toshow _
solve Sn-appr _ _ (x1 _ [_ |- rappr S])
Sn-weak-head
(g : cxt) {M : [g, x : tm A[] |- tm B[]]} {N : [g |- tm A[]]} Sn [g |- M[.., N]] -> Sn [g |- N] -> Sn [g |- app (abs \x. M) N]
2


suffices by Acc toshow _
split [_ |- S]
split x1
by m-subst [_ |- M] _ _ [_ |- X5] as ms
by mstep-Sn _ _ ms x as sn
solve Sn-weak-head [_ |- M] _ sn (x2 _ [_ |- X5])
split [_ |- X5]
split x
solve Sn-weak-head [_ |- X9] _ (x2 _ [_ |- X10[.., N]]) x1
neu-step
(g : cxt) {R : [g |- tm A[]]} {R' : [g |- tm A[]]} [g |- step R R'] -> Neutral [g |- R] -> Neutral [g |- R']
3

split x1
split x
suffices by Napp toshow _
by neu-step _ _ [_ |- X5] x2 as neu
suffices by Napp toshow _
impossible x2
impossible x
Sn-neu
(g : cxt) {R : [g |- tm (arr A[] B[])]} {N : [g |- tm A[]]} Neutral [g |- R] -> Sn [g |- R] -> Sn [g |- N] -> Sn [g |- app R N]
2

suffices by Acc toshow _
split [_ |- S]
split x2
solve Sn-neu _ _ x x1 (x3 _ [_ |- X5])
split x1
by neu-step _ _ [_ |- X5] x as neu
solve Sn-neu _ _ neu (x3 _ [_ |- X5]) x2
impossible x
confluence
(g : cxt) {M : [g |- tm A[]]} {N : [g |- tm A[]]} {N' : [g |- tm A[]]} [g |- step M N'] -> SnRed [g |- M] [g |- N] -> ConfResult [g |- N] [g |- N']
4

split x1
split x
suffices by Conf toshow SnRed [_ |- app M1 X2] [_ |- app M' X2], _
suffices by m-appr toshow _
solve [_ |- m-step X5 m-refl]
suffices by SnAppl toshow _
by confluence _ _ _ [_ |- X5] x2 as conf
split conf
suffices by Conf toshow SnRed [_ |- app X3 N1] [_ |- app Q N1], _
suffices by m-appl toshow _
suffices by SnAppl toshow _
solve Eq
impossible x2
split x
split x2
suffices by Conf toshow SnRed [_ |- app (abs \x.M1) X2] [_ |- M1[.., X2]], _
solve m-subst [_ |- M1] _ _ [_ |- X5]
by x3 _ [_ |- X5] as x4
suffices by SnBeta toshow _
split [_ |- X5]
suffices by Conf toshow SnRed [_ |- app (abs \x.X9) N1] [_ |- X9[.., N1]], _
solve [_ |- m-step X10[.., N1] m-refl]
suffices by SnBeta toshow _
solve Eq
backwards_closure_aux
(g : cxt) {M : [g |- tm (arr A[] B[])]} {M' : [g |- tm (arr A[] B[])]} {N : [g |- tm A[]]} Sn [g |- M] -> Sn [g |- N] -> SnRed [g |- M] [g |- M'] -> Sn [g |- app M' N] -> Sn [g |- app M N]
{4 5}

suffices by Acc toshow _
split [_ |- S]
split x1
split x3
solve backwards_closure_aux _ _ _ x (x4 _ [_ |- X5]) x2 (x5 _ [_ |- rappr X5])
by confluence _ _ _ [_ |- X5] x2 as conf
split conf
split x
solve backwards_closure_aux _ _ _ (x6 _ [_ |- X5]) x1 x4 (mstep-Sn _ _ (m-appl _ _ _ x5) x3)
impossible x2
backwards_closure
(g : cxt) {M : [g |- tm A[]]} {M' : [g |- tm A[]]} SnRed [g |- M] [g |- M'] -> Sn [g |- M'] -> Sn [g |- M]
3

split x
suffices by backwards_closure_aux toshow _, _, _, Sn [_ |- app M'1 N]
suffices by Sn-appr toshow Sn [_ |- app M'1 N]
solve backwards_closure _ _ x2 (Sn-appl _ _ x1)
suffices by Sn-weak-head toshow _, _
solve x2
neutralSNe
(g : cxt) {R : [g |- tm A[]]} SNe [g |- R] -> Neutral [g |- R]
2

split x
suffices by Napp toshow _
solve neutralSNe _ x1
solve Nvar _
soundSN
(g : cxt) {M : [g |- tm A[]]} SN [g |- M] -> Sn [g |- M]
2
soundSNe
(g : cxt) {M : [g |- tm A[]]} SNe [g |- M] -> Sn [g |- M]
2
soundSNRed
(g : cxt) {M : [g |- tm A[]]} {M' : [g |- tm A[]]} SNRed [g |- M] [g |- M'] -> SnRed [g |- M] [g |- M']
3

split x
suffices by backwards_closure toshow _, Sn [_ |- M']
solve soundSN _ x2
solve soundSNRed _ _ x1
suffices by Sn-abs toshow _
solve soundSN _ x1
solve soundSNe _ x1
split x
suffices by Sn-neu toshow _, _, _
solve soundSN _ x2
solve soundSNe _ x1
solve neutralSNe _ x1
solve Sn-var _
split x
suffices by SnAppl toshow _
solve soundSNRed _ _ x1
suffices by SnBeta toshow _
solve soundSN _ x1
renameSN
{g : cxt} {g' : cxt} {$R : [g' |-# g]} {M : [g |- tm A[]]} SN [g |- M] -> SN [g' |- M[$R]]
5
renameSNe
(g : cxt) (g' : cxt) {$R : [g' |-# g]} {M : [g |- tm A[]]} SNe [g |- M] -> SNe [g' |- M[$R]]
3
renameSNRed
(g : cxt) (g' : cxt) {$R : [g' |-# g]} {M : [g |- tm A[]]} SNRed [g |- M] [g |- N] -> SNRed [g' |- M[$R]] [g' |- N[$R]]
3

split x
suffices by SRed toshow _, SN [_ |- M'[$R[..]]]
solve renameSN [_] [_] [_ |- $R] _ x2
solve renameSNRed [_ |- $R] _ x1
suffices by SAbs toshow _
solve renameSN [_, x : tm _] [_, x : tm _] [_, x : tm _ |- $R[..], x] _ x1
suffices by SNeu toshow _
solve renameSNe [_ |- $R] _ x1
split x
suffices by SApp toshow _, _
solve renameSN [_] [_] [_ |- $R] _ x2
solve renameSNe [_ |- $R] _ x1
solve SVar [_ |- #p[$R]]
split x
suffices by SAppl toshow _
solve renameSNRed [_ |- $R] _ x1
suffices by SBeta toshow _
solve renameSN [_] [_] [_ |- $R] _ x1
anti-renameSNe
(g : cxt) (g' : cxt) {$R : [g' |-# g]} {M : [g |- tm A[]]} SNe [g' |- M[$R]] -> SNe [g |- M]
3
anti-renameSNRed
{g : cxt} {g' : cxt} {$R : [g' |-# g]} {M : [g |- tm A[]]} {N' : [g' |- tm A[]]} SNRed [g' |- M[$R]] [g' |- N'] -> SNRed' [g' |- $R] [g |- M] [g' |- N']
6
anti-renameSN
{g : cxt} {g' : cxt} {$R : [g' |-# g]} {M : [g |- tm A[]]} SN [g' |- M[$R]] -> SN [g |- M]
5

split x
suffices by SApp toshow _, _
solve anti-renameSN [_] [_] [_ |- $R] _ x2
solve anti-renameSNe [_ |- $R] _ x1
solve SVar _
split x
by anti-renameSNRed [_] [_] [_ |- $R] _ _ x1 as snred
split snred
solve SNRed' [_] [_] [_ |- $R] _ (SAppl x2)
solve SNRed' [_] [_] [_ |- $R] _ (SBeta _ (anti-renameSN [_] [_] [_ |- $R] _ x1))
split x
by anti-renameSNRed [_] [_] [_ |- $R] _ _ x1 as snred
split snred
solve SRed x3 (anti-renameSN [g] [g'] [g' |- $R] [g |- N] x2)
solve SAbs (anti-renameSN [g, x : tm _] [g', x : tm _] [g', x : tm _ |- $R[..], x] [g, x : tm _ |- _] x1)
solve SNeu (anti-renameSNe [g' |- $R] [g |- M] x1)
extSN
(g : cxt) {M : [g |- tm (arr A[] B[])]} {#p : [g |- tm A[]]} SN [g |- app M #p] -> SN [g |- M]
3

split x
split x1
suffices by SRed toshow _, SN [_ |- R']
solve extSN _ [_ |- #p] x2
suffices by SAbs toshow _
solve anti-renameSN [_, x : tm _] [_] [_ |- .., #p[..]] [_, x : tm _ |- _] x2
split x1
solve SNeu x2
renameRed
(g : cxt) (g' : cxt) {A : [|- ty]} {M : [g |- tm A[]]} {$R : [g' |-# g]} Red [|- A] [g |- M] -> Red [|- A] [g' |- M[$R]]


split [|- A]
split x
suffices by RArr toshow _
suffices by x1 toshow _
split x
suffices by RBase toshow _
suffices by renameSN toshow _
solve x1
renameRedS
(g : cxt) (g' : cxt) {$R : [g' |-# g]} {$S : [g |- g'']} RedS [g''] [g |- $S] -> RedS [g''] [g' |- $S[$R]]
3

split x
suffices by RCons toshow _, _
solve renameRedS [_ |- $R] [_ |- $S1] x2
suffices by renameRed toshow _
solve RNil
cr1
(g : cxt) {A : [|- ty]} {M : [g |- tm A[]]} Red [|- A] [g |- M] -> SN [g |- M]
1
cr2
(g : cxt) {A : [|- ty]} {M : [g |- tm A[]]} {M' : [g |- tm A[]]} SNRed [g |- M] [g |- M'] -> Red [|- A] [g |- M'] -> Red [|- A] [g |- M]
1
cr3
(g : cxt) {A : [|- ty]} {M : [g |- tm A[]]} SNe [g |- M] -> Red [|- A] [g |- M]
1

split [|- A]
split x
suffices by anti-renameSN toshow SN [_, x : tm X[] |- M[..]]
suffices by extSN toshow SN [_, x : tm _ |- app M[..] x]
by cr3 _ _ (SVar [g, x : tm X[] |- x]) as rv
by x1 [_] [_, x : tm _ |- ..] _ rv as r
solve cr1 _ _ r
split x
solve x1
split [|- A]
split x1
suffices by RArr toshow _
by x2 [_] [_ |- $S] _ x3 as r
solve cr2 _ _ _ (SAppl (renameSNRed [_ |- $S] _ x)) r
split x1
suffices by RBase toshow _
suffices by SRed toshow _, SN [_ |- M']
solve x2
split [|- A]
suffices by RArr toshow _
by cr1 _ _ x1 as sn
solve cr3 _ _ (SApp (renameSNe [_ |- $S] _ x) sn)
suffices by RBase toshow _
suffices by SNeu toshow _
solve x
red-var
(g : cxt) {#p : [g |- tm A[]]} Red [|- A] [g |- #p]


solve cr3 _ _ (SVar [_ |- #p])
fund-var
{g : cxt} {$S : [g' |- g]} {#p : [g |- tm A[]]} RedS [g] [g' |- $S] -> Red [|- A] [g' |- #p[$S]]
1

split [g]
split [_, x : tm _ |- #p]
split x
split x
solve fund-var [_] [_ |- $S1] [_ |- #p1] x2
split x
impossible [|- #p]
fundamental_lemma
{g : cxt} {g' : cxt} {M : [g |- tm A[]]} {$S : [g' |- g]} RedS [g] [g' |- $S] -> Red [|- A] [g' |- M[$S]]
3

split [_ |- M]
by fundamental_lemma [_] [_] [_ |- X2] [_ |- $S] x as x1
split x1
suffices by x2 toshow _
solve fundamental_lemma [_] [_] _ [_ |- $S] x
suffices by RArr toshow _
suffices by cr2 toshow _, Red [|- _] [_ |- X2[$S[$S1], N]]
by renameRedS [_ |- $S1] [_ |- $S] x as rs
solve fundamental_lemma [_, x : tm _] [g'1] [_ |- X2] [g'1 |- $S[$S1], N] (RCons x1 rs)
suffices by SBeta toshow _
suffices by cr1 toshow _
solve fund-var [_] [_ |- $S] [_ |- #p] x
id_red
{g : cxt} RedS [g] [g |- ..]
1

split [g]
by id_red [g1] as r
by renameRedS [_, x : tm A[] |- ..] [_ |- ..] r as r'
solve RCons (red-var [_, x : tm _ |- x]) r'
solve RNil
norm
{g : cxt} {M : [g |- tm A[]]} SN [g |- M]


suffices by cr1 toshow _
solve fundamental_lemma [_] [_] _ [_ |- ..] (id_red [g])
:quit
