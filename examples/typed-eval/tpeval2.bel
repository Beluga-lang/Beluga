% Substitution based evaluator
%   call-by-value strategy
%
%   Author: Brigitte Pientka
%

tp:type. 
exp: tp -> type.

nat: tp.
bool:tp.

z : exp nat.
s : exp nat -> exp nat.
tt: exp bool.
ff: exp bool.
andalso: exp bool -> exp bool -> exp bool.


plus: exp nat -> exp nat -> exp nat.
letv: exp T1 -> (exp T1 -> exp T2) -> exp T2.



rec add : [. exp nat] -> [. exp nat] -> [. exp nat] = 
fn a => fn b =>
 case a of
   [. z]  => b
 | [. s U]  =>
   let [. V] =  b in 
     add [. U] [. s V]
;

rec logical_and : [. exp bool] -> [. exp bool] -> [. exp bool] = 
fn a => fn b => 
 case a of 
   [. tt] => b 
 | [. ff] => a
;


rec eval : [. exp T] -> [. exp T] = 
fn e => 
case e of
   [. z]  => e
 | [. tt] => [. tt]
 | [. ff] => [. ff]

 | [. s U]  =>  
   let [. V] = eval [. U] in [. s V]

 | [. andalso U1 W1]  => 
    logical_and (eval [. U1]) (eval [. W1])

 | [. plus U W]  => 
    add (eval  [. U]) (eval [. W])

 | [. letv  U (\x . (W  x))]  => 
   let [. V] = eval  [. U] in 
      eval [. (W V)]
;
