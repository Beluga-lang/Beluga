%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Figure 12 : CPS abstract machine with two stack 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

two_stacksR : croot -> ctriv -> type.
two_stacksE : (ccont -> cstack) -> stack -> (ccont -> cexp) -> ctriv -> type.
two_stacksT : stack -> ctriv -> ctriv -> stack -> type.
two_stacksC : (ccont -> cstack) 
              -> (ccont -> ccont) 
              -> (ccont -> cstack) 
              -> type.

%mode two_stacksR +R -A.
%mode two_stacksE +Phi +Xi +E -A.
%mode two_stacksT +Xi +T -T' -Xi'.
%mode two_stacksC +Phi +C -Phi'.

two_stacks_klam : two_stacksR (klam E) A
                  <- two_stacksE ([k]cdot) dot E A. 

two_stacks_cret_k_init : two_stacksE ([k]cdot)
                                     Xi 
                                     ([k]cret k T) A
                         <- two_stacksT Xi T A dot.

two_stacks_cret_k_vlam : two_stacksE ([k](ccons (Phi k) 
                                                 (vlam ([v] E v k))))
                                     Xi 
                                     ([k]cret k T) A
                         <- two_stacksT Xi T T' Xi'
                         <- ({v:ctriv}
                             ({xi:stack}{t:ctriv}two_stacksT (cons xi  t) v t xi)
                             -> two_stacksE Phi (cons Xi'  T') ([c] E v c) A).
                            

two_stacks_cret_vlam_phi : two_stacksE ([k] Phi  k)
                                       Xi 
                                       ([k] cret (vlam ([v]E v k)) T)
                                       A
                           <- two_stacksT Xi T T' Xi'
                           <- ({v:ctriv}
                               ({xi:stack}{t:ctriv}two_stacksT (cons xi t) v t xi)
                               -> two_stacksE Phi (cons Xi' T') ([c] E v c) A).

two_stacks_capp : two_stacksE Phi Xi ([k]capp T0 T1 (C k)) A
                  <- two_stacksT Xi T1 T1' Xi1
                  <- two_stacksT Xi1 T0 (xlam ([x] klam (E x))) Xi0
                  <- two_stacksC Phi C Phi'
                  <- two_stacksE Phi' Xi0 ([c] E T1' c) A. 

two_stacks_xlam : two_stacksT Xi (xlam R) (xlam R) Xi.

two_stacks_vlam : two_stacksC Phi 
                              ([k]vlam (E k)) 
                              ([k](ccons (Phi k)  (vlam (E k)))).

two_stacks_k : two_stacksC Phi
                           ([k]k)
                           Phi.
                         

%name two_stacksR TWOR.
%name two_stacksE TWOE.
%name two_stacksT TWOT.
%name two_stacksC TWOC.
