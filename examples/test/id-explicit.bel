tp: type.
nat: tp.
arr: tp -> tp -> tp.

exp : tp -> type.
z : exp nat.
s  : exp nat -> exp nat.
lam : {T1:tp}{T2:tp}(exp T1 -> exp T2) -> exp (arr T1 T2).

rec identity : (exp nat)[ ] -> (exp nat) [ ] =
    fn x =>
      case x of
          [ ] z   : (exp nat) [ ] => [ ] z
        | {U::(exp nat)[ ]}
          [ ] s U : (exp nat) [ ] => [ ] s U;


schema w = some [t:tp] block exp t;


rec identity' : {g:(w)*}{T:: tp[g]} (exp (T ..))[g] -> (exp (T ..)) [g] =
FN g =>  mlam T => 
    fn x =>
      case x of
          [g] z   : (exp nat) [g] => [g] z
        | {U::exp nat [g]} 
          [g] s (U ..) : (exp nat) [g] => [g] s (U ..)
%
	| {T::tp[g]}{#p:: (exp (T ..))[g]}
          [g] (#p ..) : (exp (T ..))[g] => 
	    [g] (#p ..)
;


rec copy : {g:(w)*}{T:: tp[g]} (exp (T ..))[g] -> (exp (T ..)) [g] =
FN g =>  mlam T => 
    fn x =>
      case x of

          [g] z   : (exp nat) [g] => [g] z

        | {U::exp nat [g]} 
           [g] s (U ..) : (exp nat) [g] => 
	   (case (copy [g] < g. nat > ([g] (U ..))) of
	      {V::(exp nat)[g]}
              [g] (V ..) : (exp nat)[g]=> ([g] s (V ..)))

        | {T1::tp[g]}{T2::tp[g]}{E::(exp (T2 ..))[g, x:exp (T1 ..)]}

           [g] lam (T1 ..)  (T2 ..)  (\x. (E .. x)) : (exp (arr (T1 ..) (T2 ..)))[g] => 
             [g] lam (T1 ..)  (T2 ..)  (\x. (E .. x)) 					  

        | {T1::tp[g]}{T2::tp[g]}{E::(exp (T2 ..))[g, x:exp (T1 ..)]}

           [g] lam (T1 ..)  (T2 ..)  (\x. (E .. x)) : (exp (arr (T1..) (T2 ..)))[g] => 

	   x

 	| {T::tp[g]}{#p::(exp (T ..)) [g]} 
            [g] (#p ..) : (exp (T ..))[g] => [g] (#p ..)
;
