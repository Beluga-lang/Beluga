%%% Mapping evaluations to evaluations in environments.
%%% Version restricted to pure lambda-calculus
%%% Author: Frank Pfenning, based on [Hannan & Pfenning 92]
%%% Adapted to Beluga: Brigitte Pientka

% To return a pair: feval K F W * vtrans W V we define the
% following constructor. This avoids not only computation-level pairs
% but also avoids existential types on the computation level.

% Bisimulation (1)
% If eval E V and trans K F E then there exists a W s.t.
% vtrans V W and feval K F W.

fev_vtr: env -> exp' -> exp  -> type.

fev_vtrans: feval K F W → vtrans W V → fev_vtr K F V.

rec map_eval : [ |- eval E V] -> [ |- trans K F E]
 	      -> [ |- fev_vtr K F V] =
fn d => fn c => case c of

   [ |- tr_1 (vtr_lam (tr_lam (\w. \x. \v. C2)))]  =>
     let [ |- ev_lam] = d in
        [ |- fev_vtrans (fev_1) (vtr_lam (tr_lam (\w. \x. \v. C2)))]

 | [ |- tr_lam (\w. \x. \u. C1)] =>
   let [ |- ev_lam] = d in
        [ |- fev_vtrans (fev_lam) (vtr_lam (tr_lam (\w.\x.\u. C1)))]

 | [ |- tr_^ C1] =>
     let [ |- fev_vtrans  D1' U1] = (map_eval d) [ |- C1] in
        [ |- fev_vtrans   (fev_^ D1') U1]

 | [ |- tr_app C2 C1] =>
     let [ |- ev_app D3 D2 D1] = d in
     let [ |- fev_vtrans D1' (vtr_lam (tr_lam (\w. \x. \v. C3)))] = map_eval [ |- D1] [ |- C1] in
     let [ |- fev_vtrans D2' U2] = (map_eval [ |- D2]) [ |- C2] in
     let [ |- fev_vtrans D3' U3] = (map_eval [ |- D3]) [ |- C3[_,_,U2]] in
       [ |- fev_vtrans (fev_app D3' D2' D1') U3]
;



% Other direction:
% Bisimulation (2) (not finished yet)
% If trans K F E and feval K F W then then there exists a value V s.t. eval E V and vtrans W V.
%

ev_vtr: exp -> val  -> type.

ev_vtrans: eval E V → vtrans W V → ev_vtr E W.
