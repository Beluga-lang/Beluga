nat: type.
z   : nat.
suc : nat -> nat.

boolean : type.
true : boolean.
false : boolean.

schema nat3 = block x:nat, y:nat, _t:nat;
schema bool = boolean;

--not
rec loop1 : {g:nat3} [ |- nat] -> [ |- nat]
 = mlam g => fn e => loop1[g, zz:block zz1:nat, _t:nat] e;

rec loop1 : {g:nat3} [ |- nat] -> [ |- nat]
 = mlam g => fn e => loop1[g, zz:block zz1:nat, zz2:nat, _t:nat] e;


% rec loop2 : {g:(nat3)*} (nat)[ ] -> (nat)[ ]
%   = FN g  => fn e => loop1 [g] e;
%
% --not
% rec loop2 : {g:(nat3)*} {bb:(bool)*} (nat)[g] -> (nat)[g]
%   = FN g => FN bb => fn e => loop2[bb][g] e;
%
% rec loop3 : {g:(nat3)*} {bb:(bool)*} (nat)[g] -> (nat)[g] = FN g => FN bb => fn e => loop3 [g][bb] e;
% --not
% rec loop4 : {g:(nat3)*} {bb:(bool)*} (nat)[g] -> (nat)[g] = FN g => FN bb => fn e => loop4 [bb][g] e;
