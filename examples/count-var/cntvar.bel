--nostrengthen
% Variable counting (see Pientka [POPL'08])
% Author:  Brigitte Pientka
%
% This example only uses higher-order abstract syntax.

LF tp  : type =
| nat : tp
| bool: tp
;
--name tp T.

inductive Int : ctype =
| Zero : Int
| Suc : Int -> Int
;

LF exp : tp -> type =
  | z   : exp nat
  | s   : exp nat -> exp nat
  | tt  : exp bool
  | add : exp nat -> exp nat -> exp nat
  | letv: {T1:tp}exp T1 -> (exp T1 -> exp T2) -> exp T2
;

  --name exp E x.
schema expCtx = some [t:tp] exp t;
schema natCtx = exp nat;
%{ schema intCtx = int;
schema inCtx = int + exp nat;
schema inCtx' = block (i:int, x:exp nat) ;
}%

rec add : Int -> Int -> Int = ? ;

rec count : (g:expCtx) [g |- exp T] -> Int =
fn e => case e of
| [g |- #p] => Zero  % variable
| [g |- z] => Zero
| [g |- s E ] => count [g |- E]
| [g |- letv T1 E1 (\x.E2) ] =>
  let x = count [g |- E1] in
  let y = count [g, x:exp _ |- E2] in
  Suc (add x y)
;




%{
rec plus : [. exp nat] -> [. exp nat] -> [. exp nat] =

fn x => fn y =>
case x of
  [ |- z]    => y

| [ |- s U]  =>
  let [ |- V] = plus [ |- U] y in [ |- s V]

| [ |- add U V] => plus [ |- U] [ |- V]
| [ |- W] => let [ |- V] = y in [ |- add W V]
;

% G, x:exp T |-  z  ==>  0
% G, x:exp T |-  tt  ==>  0
% G, x:exp T |-  x  ==>  1
% G, x:exp T |-  y  ==>  0   y =/= x
% G, x:exp T |-  s U ==> n   if G, x:exp T |- U  ==> n
% G, x:exp T |-  s U  ==> n   if G, x:exp T |- U  ==> n
% G, x:exp T |-  letv U (\y. V y) ===> n1 + n2
% if  G, x: exp T |-  U ==> n1
% if  G, y:exp _ , x: exp T |-  V  y ==> n2

rec cntV : {g:expCtx}  [g, x:exp T |-  exp S] -> [ |- exp nat] =
mlam g =>
 fn e =>
  case e of  % e : exp S [g, x:exp T]

   | % {T':[g |- tp]}
     [g,x : exp (T')  |-  tt]
     => [ |- z]

  | [g,x : exp _  |-  (#p )]    => [ |- z]

  | [g,x : exp _  |-  x]           => [ |- s z]


  | [g,x : exp _  |-  z]           => [ |- z]

  | [g,x : exp _  |-  (U )]  => [ |- z]

  | [g,x : exp _  |-  s W]  => cntV [g] [g,x |- W]

  | [g,x : exp _  |- letv T1 U1 (\y . (U2  x y))] =>
             plus (cntV [g]  [g,x |- U1])
                  (cntV [g, y:exp _ ]  [g,y,x |- U2 y])

   | [g,x: exp _  |-  add U W]  =>
     plus (cntV [g] [g,x |- U])
          (cntV [g] [g,x |- W])
;
}%
