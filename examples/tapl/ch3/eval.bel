%{
  CH 3:  Untyped arithmetic expressions
  Author: Brigitte Pientka

  EVALUATION RULES AND META-THEORY
}%

% Small-step operational semantics
step: term -> term -> type.

e_if_true:
   step (if_then_else true T2 T3)    T2.

e_if_false:
   step (if_then_else false T2 T3)   T3.

e_if_then_else:
   step T1 T1'
-> step (if_then_else T1 T2 T3)      (if_then_else T1' T2 T3).


% Example:

let t : [ |- step (if_then_else (if_then_else true false false)
                      true
                      true)
              (if_then_else false true true)]
= [ |- e_if_then_else e_if_true] ;

let d : [ |- step (if_then_else (if_then_else (if_then_else true false false)
                               true
                               true)
                       false
                       false)

              (if_then_else (if_then_else false true true)
	              false
                      false)]
= [ |- e_if (e_if e_if_true)] ;


% Values
value: term -> type.

v_true : value true.
v_false: value false.


equal: term -> term -> type.
ref: equal T T.

%{
Determinacy of evaluation:

Theorem: if step T T1 and step T T2 then equal T1 T2.

}%

steps_to_terms: term -> term -> term -> type.
andalso: step T T1 -> step T T2 -> steps_to_terms T T1 T2.


rec det : [ |- steps_to_terms T T1 T2] -> [ |- equal T1 T2] =
/ total s (det t t1 t2 s)/
fn s => case s of
% | [ ] andalso (e_if_true)  (e_if_true)  =>  [ ] ref
 | [ |- andalso (e_if_false) (e_if_false)] =>  [ |- ref]
 | [ |- andalso (e_if D)     (e_if E)]     =>
         let [ |- ref] = det [ |- andalso D E] in
           [ |- ref]
;



% Normal form = values
%{ Multi-step evaluation rules

  Reflexive, transitive closure of one-step evaluation.

}%
mstep: term -> term -> type.

m_step : step M N
     -> mstep M N.

m_ref  : mstep M M.  % Reflexive

m_tr   : mstep M N1 -> mstep N1 N
      -> mstep M N.  % Transitive






%{ Values evaluate to themselves

 Lemma: if value N and mstep N M then  equal N M.

}%
rec lemma_val : [ |- value N] -> [ |- mstep N M] -> [ |- equal N M] =
fn v => fn s => case v of
| [ |- v_true] =>
  (case s of
     | [ |- m_ref]      => [ |- ref]
     | [ |- m_tr S1 S2] =>
	 let [ |- ref] = lemma_val [ |- v_true] [ |- S1] in
	 let [ |- ref] = lemma_val [ |- v_true] [ |- S2] in
	   [ |- ref]
  )
| [ |- v_false] =>
  (case s of
     | [ |- m_ref]      => [ |- ref]
     | [ |- m_tr S1 S2] =>
	 let [ |- ref] = lemma_val [ |- v_false] [ |- S1] in
	 let [ |- ref] = lemma_val [ |- v_false] [ |- S2] in
	   [ |- ref]
  )
;

%{
Theorem: Uniqueness of evaluation

If value N    and value N' and
   mstep M N  and mstep M N'  then equal N N'.

}%

msteps_to_terms: term -> term -> term -> type.
andalso': mstep M M1 -> mstep M M2 -> msteps_to_terms M M1 M2.
%{
rec unique : (msteps_to_terms M N1 N2)[ ]
	     -> (value N1)[ ] -> (value N2)[ ]
	     -> (equal N1 N2)[ ] =
fn ms => case ms of
| [ ] andalso' (m_step S1) (m_step S2) =>
  let [ ] ref = det ([ ] andalso S1 S2) in
    [ ] ref

| [ ] andalso' (m_ref)       (m_ref)   =>
   [ ] ref

| [ ] andalso' (m_tr S1 S1') (m_tr S2 S2') =>
  let [ ] ref = unique ([ ] andalso' S1 S2) in
    unique ([ ] andalso' S1' S2')
;


}%
