term: type.

lam: (term -> term) -> term.
app: term -> term -> term.

copy: term -> term -> type.

c_l: copy (lam E) (lam E).


test: (term -> term) -> (term -> term) -> type.

t_l+id : test E E.

t_l+ap : test (app E) (app E).

teste: (term -> term) -> type.
t_lam_eta: teste (\x. lam (E x)).
t_lam: teste (\x. lam (\y. E x y)).

rec foo : [ |- term] -> [ |- term] =
fn t => case t of
 | [ |- lam \x. E] => t
;

%{
% Error message testing
rec foo : term [ ] -> term [ ] =
fn t => case t of
 | [ ] lam E => t
;

}%

schema termCtx = term ;

%{
rec foo : {g:(termCtx)*} term [g, x:term] -> term [g, x:term] =
FN g => fn t => case t of
 | [g] lam \x. E => t
;
}%

%{
rec foo : {g:(termCtx)*} term [g, x:term] -> term [g, x:term] =
FN g => fn t => case t of
 | [g, x:term] lam \x. (E V) => t
;

}%

% Higher order meta variables not supported
% rec foo : [ |- term] -> [ |- term] =
% fn t => case t of
%  | [ |- lam E] => t
% ;
