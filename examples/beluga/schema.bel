tp  : type.
nat : tp.
bool: tp.

exp : tp -> type.
z   : exp nat.

typist : {TT:tp} exp nat.

tt  : exp bool.

schema W = some [ T:tp] block exp T;

rec expnatter : {g:(W)*} (exp nat) [g] -> (exp nat) [.] = FN g => fn e => box( . z)
;

rec cntV : {g:(W)*} (exp nat) [g] -> (exp nat) [.] =
FN g => fn e =>
  (case e of
      {T1::tp[.]}
        box(g . typist T1 ![.]!) : (exp nat)[g] =>

         expnatter [g, x:(exp T1![.]!)] box(g, x. typist T1 ![.]!)
)
;
