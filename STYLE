-*- coding: utf-8; indent-tabs-mode: nil; -*-

This document describes several stylistic conventions used within the
Beluga source code and its accompanying documentation.

*      [Textual](#01)

       *        [Character Set](#0101)
       *        [Tabs vs. Spaces](#0102)

*      [Documentation](#02)

       *        [Markup](#0201)

*      [Coding](#03)

       *        [Philosophy](#0301)
       *        [Documentation](#0302)
       *        [Conventions](#0303)



Textual <a id="01"/>
=======


Character Set <a id="0101"/>
-------------

The Beluga source code and documentation are encoded with UTF-8.  Any
files added to the source tree should be saved with the appropriate
encoding.  To help maintain this invariant, the emacs mode line
present at the top of this file should be placed within all new files
immediately upon creation.


Tabs vs. Spaces <a id="0102"/>
---------------

It is well known that using tabs together with spaces generally wreaks
havoc upon the textual display of code in many editors.  Therefore, we
only use spaces in Beluga code, except in the Makefile.  To help
maintain this invariant, the emacs mode line present at the top of
this file should be placed within all new files immediately upon
creation.


Documentation <a id="02"/>
=============


Markup <a id="0201"/>
------

Simple textual documentation files, such as this one, use a
lightweight markup language known as [Markdown][0301].  They are
readable as regular text files with the added benefit of being
renderable to HTML, LaTeX, or a variety of other formats in a nice and
consistent fashion.  A Markdown mode for Emacs is available
[here][0302].

[0301]: http://daringfireball.net/projects/markdown/
[0302]: http://jblevins.org/projects/markdown-mode/



Coding <a id="03"/>
======


Philosophy <a id="0301"/>
----------

The Beluga source code is intended, above all, to be *correct* and *clear*.


Documentation <a id="0302"/>
-------------

The Beluga source code is intended to be fully documented.  We use
[ocamldoc][03] for documentation markup and pretty documentation
generation.

All modules should have their signatures fully documented: exceptions,
functions, and types should include at least a brief comment.

Where possible, syntactic conventions from publications should be
correlated with the source code in question.  For this, we will often
use Unicode.  For example, if something is called Ψ in a paper, then Ψ
should be written in the comment, rather than `Psi'.

For emacs users, such characters can easily be typed into the buffer
with the help of the TeX input method for MULE.  To enable this, make
sure `default-input-method` is set to "TeX" and then run
`toggle-input-method` (C-\).  Now, you can simply type the LaTeX
command for a symbol, which will then be placed into your buffer.  For
example, to input Γ, just type \Gamma.  To make this easier, we
suggest emacs/tuareg-mode users add the following to their `.emacs`
file:

    ; Set input method for mule
    (setq default-input-method "TeX")
    ; Automatically enable the mule input-method
    (add-hook 'tuareg-mode-hook 'toggle-input-method)

[03]: http://caml.inria.fr/pub/docs/manual-ocaml/manual029.html


Conventions <a id="0303"/>
-----------

Lots more to come about our actual coding conventions.  Things about
why people prefer certain styles of names, why they prefer not to use
higher order functions (for better or worse), how modules should be
structured, what kinds of tests should be added/run for all new code,
what kind of policies we have for code correctness, etc., etc.
