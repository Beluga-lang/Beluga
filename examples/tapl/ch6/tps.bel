%{
  Lambda-terms
}%
datatype tp: type = 
| nat: tp
| arr: tp -> tp -> tp
;

datatype term: type =
| app: term -> term -> term
| lam: tp -> (term ->  term) -> term
;

datatype value:  term -> type = 
| v_lam: value (lam T M)
;


% ---------------------------------------------------------- %
% Small-step operational semantics

datatype step: term -> term -> type = 
| e_app_1    : step M1 M1'
             -> step (app M1 M2) (app M1' M2)
| e_app_2    : step M2 M2' -> value M1              
              -> step (app M1 M2) (app M1 M2')
| e_app_abs : value M2
              -> step (app (lam T M) M2) (M M2)
;

% ---------------------------------------------------------- %
datatype hastype: term -> tp -> type =
| t_lam : ({x:term} hastype x T -> hastype (E x) S)
	-> hastype (lam T E) (arr T S)
| t_app:  hastype E1 (arr T S) -> hastype E2 T
	-> hastype (app E1 E2) S
;

% ---------------------------------------------------------- %
rec tps: [ |- hastype M T] -> [ |- step M N] -> [ |- hastype N T] =
/ total s (tps m t n d s)/
fn d => fn s => case s of
| [ |- e_app_1 S1] => 
 let [ |- t_app D1 D2] = d in
  let [ |- F1] = tps  [ |- D1] [ |- S1] in
    [ |- t_app F1 D2 ]

| [ |- e_app_2 S2 _ ] =>
  let [ |- t_app D1 D2] = d in
  let [ |- F2] = tps  [ |- D2] [ |- S2] in
    [ |- t_app D1 F2]

| [ |- e_app_abs V] =>
  let [ |- t_app (t_lam \x.\u. D x u) D2] = d in
    [ |- D _ D2]
;
