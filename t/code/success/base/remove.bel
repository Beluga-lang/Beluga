% Types
tp: type.   --name tp T.
arr  : tp -> tp -> tp.
code : tp -> tp -> tp.
cross: tp -> tp -> tp.
unit :tp.

% source lang
term: tp -> type.   --name term M.
elam: (term T -> term S) -> term (arr T S).
eapp: term (arr T S) -> term T -> term S.


list: tp -> type. --name list F.
nil: list unit.
cons: term T -> list S -> list (cross T S).

elist: type.
eLS: list R -> elist.

schema ctx = term T;

rec remove : (g:ctx) [g,x:term (T[]) |-  list (R[])] -> [g |- elist] =
    fn l => case l of
      | [g,x:term (T[]) |-  nil] ⇒ [g |- eLS nil]
      | [g,x:term (T[]) |-  cons x L] ⇒ remove[g,x:term (T[]) |-  L]
      | [g,x:term (T[]) |-  cons (#p[..]) L] =>
	let [g |- (eLS (L'))] = remove [g,x:term (T[]) |-  L] in
	[g |- eLS (cons (#p[..]) (L'))]
;
